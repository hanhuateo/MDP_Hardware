
MDP_STM wk6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800bff8  0800bff8  0001bff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdf8  0800cdf8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdf8  0800cdf8  0001cdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce00  0800ce00  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce00  0800ce00  0001ce00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce04  0800ce04  0001ce04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ce08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000087b0  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20008830  20008830  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018823  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ea  00000000  00000000  000388d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c0  00000000  00000000  0003d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024eef  00000000  00000000  0003e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a387  00000000  00000000  0006375f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e39d3  00000000  00000000  0007dae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001614b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067e0  00000000  00000000  0016150c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfe0 	.word	0x0800bfe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800bfe0 	.word	0x0800bfe0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <vApplicationGetIdleTaskMemory+0x30>)
 8000ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000009c 	.word	0x2000009c
 8000f00:	200000f0 	.word	0x200000f0

08000f04 <readByte>:
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

double total_angle=0;

void readByte(uint8_t addr, uint8_t* data){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <readByte+0x4c>)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <readByte+0x50>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	230a      	movs	r3, #10
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <readByte+0x4c>)
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <readByte+0x54>)
 8000f2a:	f004 fdf9 	bl	8005b20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <readByte+0x50>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	b299      	uxth	r1, r3
 8000f38:	2314      	movs	r3, #20
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <readByte+0x54>)
 8000f42:	f004 feeb 	bl	8005d1c <HAL_I2C_Master_Receive>

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20004688 	.word	0x20004688
 8000f54:	2000000a 	.word	0x2000000a
 8000f58:	20000440 	.word	0x20000440

08000f5c <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <writeByte+0x3c>)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <writeByte+0x3c>)
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <writeByte+0x40>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b299      	uxth	r1, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2302      	movs	r3, #2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <writeByte+0x3c>)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <writeByte+0x44>)
 8000f8c:	f004 fdc8 	bl	8005b20 <HAL_I2C_Master_Transmit>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20004688 	.word	0x20004688
 8000f9c:	2000000a 	.word	0x2000000a
 8000fa0:	20000440 	.word	0x20000440
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <correctDirection>:

void correctDirection(double target_angle, int dir){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fb2:	6078      	str	r0, [r7, #4]

	int pidVal;

	// calibrate these for PID and gyro
	pidVal = (int)(147 + (dir*(total_angle - target_angle)*2.0 + 0.0008*Aint));
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fabd 	bl	8000534 <__aeabi_i2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <correctDirection+0x100>)
 8000fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fc8:	f7ff f966 	bl	8000298 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fb18 	bl	8000608 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	f7ff f95a 	bl	800029c <__adddf3>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4614      	mov	r4, r2
 8000fee:	461d      	mov	r5, r3
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <correctDirection+0x104>)
 8000ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff6:	a328      	add	r3, pc, #160	; (adr r3, 8001098 <correctDirection+0xf0>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fb04 	bl	8000608 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff f948 	bl	800029c <__adddf3>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <correctDirection+0xf8>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff f93f 	bl	800029c <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fd89 	bl	8000b3c <__aeabi_d2iz>
 800102a:	4603      	mov	r3, r0
 800102c:	617b      	str	r3, [r7, #20]
	if(pidVal <= 100){
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	dc01      	bgt.n	8001038 <correctDirection+0x90>
		pidVal = 100;
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	617b      	str	r3, [r7, #20]
	}

	if(pidVal >= 200){
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2bc7      	cmp	r3, #199	; 0xc7
 800103c:	dd01      	ble.n	8001042 <correctDirection+0x9a>
		pidVal = 200;
 800103e:	23c8      	movs	r3, #200	; 0xc8
 8001040:	617b      	str	r3, [r7, #20]
	}
	Aint += dir*(total_angle - target_angle);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fa76 	bl	8000534 <__aeabi_i2d>
 8001048:	4604      	mov	r4, r0
 800104a:	460d      	mov	r5, r1
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <correctDirection+0x100>)
 800104e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001056:	f7ff f91f 	bl	8000298 <__aeabi_dsub>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fad1 	bl	8000608 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <correctDirection+0x104>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f912 	bl	800029c <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	490b      	ldr	r1, [pc, #44]	; (80010ac <correctDirection+0x104>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
	htim1.Instance -> CCR4 = pidVal;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <correctDirection+0x108>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40

}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	eb1c432d 	.word	0xeb1c432d
 800109c:	3f4a36e2 	.word	0x3f4a36e2
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40626000 	.word	0x40626000
 80010a8:	200046b8 	.word	0x200046b8
 80010ac:	200046a0 	.word	0x200046a0
 80010b0:	20000494 	.word	0x20000494

080010b4 <gyroInit>:

void gyroInit(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 80010b8:	2100      	movs	r1, #0
 80010ba:	2006      	movs	r0, #6
 80010bc:	f7ff ff4e 	bl	8000f5c <writeByte>
	osDelay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f008 fdcc 	bl	8009c5e <osDelay>
	writeByte(0x03, 0x80);
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	2003      	movs	r0, #3
 80010ca:	f7ff ff47 	bl	8000f5c <writeByte>
	osDelay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f008 fdc5 	bl	8009c5e <osDelay>
	writeByte(0x07, 0x07);
 80010d4:	2107      	movs	r1, #7
 80010d6:	2007      	movs	r0, #7
 80010d8:	f7ff ff40 	bl	8000f5c <writeByte>
	osDelay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f008 fdbe 	bl	8009c5e <osDelay>
	writeByte(0x06, 0x01);
 80010e2:	2101      	movs	r1, #1
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff ff39 	bl	8000f5c <writeByte>
	osDelay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f008 fdb7 	bl	8009c5e <osDelay>
	writeByte(0x7F, 0x20);
 80010f0:	2120      	movs	r1, #32
 80010f2:	207f      	movs	r0, #127	; 0x7f
 80010f4:	f7ff ff32 	bl	8000f5c <writeByte>
	osDelay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f008 fdb0 	bl	8009c5e <osDelay>
	writeByte(0x01, 0x2F);
 80010fe:	212f      	movs	r1, #47	; 0x2f
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff ff2b 	bl	8000f5c <writeByte>
	osDelay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f008 fda9 	bl	8009c5e <osDelay>
	writeByte(0x0, 0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ff24 	bl	8000f5c <writeByte>
	osDelay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f008 fda2 	bl	8009c5e <osDelay>
	writeByte(0x7F, 0x00);
 800111a:	2100      	movs	r1, #0
 800111c:	207f      	movs	r0, #127	; 0x7f
 800111e:	f7ff ff1d 	bl	8000f5c <writeByte>
	osDelay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f008 fd9b 	bl	8009c5e <osDelay>
	writeByte(0x07, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	2007      	movs	r0, #7
 800112c:	f7ff ff16 	bl	8000f5c <writeByte>
	osDelay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f008 fd94 	bl	8009c5e <osDelay>

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b0c6      	sub	sp, #280	; 0x118
 8001140:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001142:	f003 f837 	bl	80041b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001146:	f000 f90d 	bl	8001364 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800114a:	f000 fcb5 	bl	8001ab8 <MX_GPIO_Init>
	MX_DMA_Init();
 800114e:	f000 fc8b 	bl	8001a68 <MX_DMA_Init>
	MX_TIM8_Init();
 8001152:	f000 fbb5 	bl	80018c0 <MX_TIM8_Init>
	MX_TIM2_Init();
 8001156:	f000 fab7 	bl	80016c8 <MX_TIM2_Init>
	MX_TIM1_Init();
 800115a:	f000 fa33 	bl	80015c4 <MX_TIM1_Init>
	MX_TIM3_Init();
 800115e:	f000 fb07 	bl	8001770 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8001162:	f000 fc57 	bl	8001a14 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001166:	f000 f9ff 	bl	8001568 <MX_I2C1_Init>
	MX_TIM4_Init();
 800116a:	f000 fb55 	bl	8001818 <MX_TIM4_Init>
	MX_ADC1_Init();
 800116e:	f000 f957 	bl	8001420 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001172:	f000 f9a7 	bl	80014c4 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8001176:	f00a f977 	bl	800b468 <OLED_Init>
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 5);
 800117a:	2205      	movs	r2, #5
 800117c:	4963      	ldr	r1, [pc, #396]	; (800130c <main+0x1d0>)
 800117e:	4864      	ldr	r0, [pc, #400]	; (8001310 <main+0x1d4>)
 8001180:	f007 fd47 	bl	8008c12 <HAL_UART_Receive_IT>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <main+0x1d8>)
 8001186:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001198:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f008 fd11 	bl	8009bc6 <osThreadCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <main+0x1dc>)
 80011a8:	6013      	str	r3, [r2, #0]

	/* definition and creation of robotCommandTas */
	osThreadDef(robotCommandTas, robotCommand, osPriorityIdle, 0, 128);
 80011aa:	4b5c      	ldr	r3, [pc, #368]	; (800131c <main+0x1e0>)
 80011ac:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	robotCommandTasHandle = osThreadCreate(osThread(robotCommandTas), NULL);
 80011be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 fcfe 	bl	8009bc6 <osThreadCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <main+0x1e4>)
 80011ce:	6013      	str	r3, [r2, #0]

	/* definition and creation of leftEncoderTask */
	osThreadDef(leftEncoderTask, leftEncoder, osPriorityIdle, 0, 128);
 80011d0:	4b54      	ldr	r3, [pc, #336]	; (8001324 <main+0x1e8>)
 80011d2:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	leftEncoderTaskHandle = osThreadCreate(osThread(leftEncoderTask), NULL);
 80011e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fceb 	bl	8009bc6 <osThreadCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a4d      	ldr	r2, [pc, #308]	; (8001328 <main+0x1ec>)
 80011f4:	6013      	str	r3, [r2, #0]

	/* definition and creation of rightEncoderTas */
	osThreadDef(rightEncoderTas, rightEncoder, osPriorityIdle, 0, 128);
 80011f6:	4b4d      	ldr	r3, [pc, #308]	; (800132c <main+0x1f0>)
 80011f8:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80011fc:	461d      	mov	r5, r3
 80011fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rightEncoderTasHandle = osThreadCreate(osThread(rightEncoderTas), NULL);
 800120a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f008 fcd8 	bl	8009bc6 <osThreadCreate>
 8001216:	4603      	mov	r3, r0
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <main+0x1f4>)
 800121a:	6013      	str	r3, [r2, #0]

	/* definition and creation of stopBotTask */
	osThreadDef(stopBotTask, stopBot, osPriorityIdle, 0, 128);
 800121c:	4b45      	ldr	r3, [pc, #276]	; (8001334 <main+0x1f8>)
 800121e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001222:	461d      	mov	r5, r3
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	stopBotTaskHandle = osThreadCreate(osThread(stopBotTask), NULL);
 8001230:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f008 fcc5 	bl	8009bc6 <osThreadCreate>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <main+0x1fc>)
 8001240:	6013      	str	r3, [r2, #0]

	/* definition and creation of leftMotorFixTas */
	osThreadDef(leftMotorFixTas, LeftMotorFix, osPriorityIdle, 0, 128);
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <main+0x200>)
 8001244:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001248:	461d      	mov	r5, r3
 800124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	leftMotorFixTasHandle = osThreadCreate(osThread(leftMotorFixTas), NULL);
 8001256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fcb2 	bl	8009bc6 <osThreadCreate>
 8001262:	4603      	mov	r3, r0
 8001264:	4a36      	ldr	r2, [pc, #216]	; (8001340 <main+0x204>)
 8001266:	6013      	str	r3, [r2, #0]

	/* definition and creation of motorTask */
	osThreadDef(motorTask, motor, osPriorityIdle, 0, 128);
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <main+0x208>)
 800126a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800126e:	461d      	mov	r5, r3
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800127c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f008 fc9f 	bl	8009bc6 <osThreadCreate>
 8001288:	4603      	mov	r3, r0
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <main+0x20c>)
 800128c:	6013      	str	r3, [r2, #0]

	/* definition and creation of OLEDTask */
	osThreadDef(OLEDTask, OLEDShow, osPriorityIdle, 0, 128);
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <main+0x210>)
 8001290:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001294:	461d      	mov	r5, r3
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OLEDTaskHandle = osThreadCreate(osThread(OLEDTask), NULL);
 80012a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 fc8c 	bl	8009bc6 <osThreadCreate>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <main+0x214>)
 80012b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of rightMotorFixTa */
	osThreadDef(rightMotorFixTa, rightMotorFix, osPriorityIdle, 0, 128);
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <main+0x218>)
 80012b6:	f107 041c 	add.w	r4, r7, #28
 80012ba:	461d      	mov	r5, r3
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rightMotorFixTaHandle = osThreadCreate(osThread(rightMotorFixTa), NULL);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 fc79 	bl	8009bc6 <osThreadCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a20      	ldr	r2, [pc, #128]	; (8001358 <main+0x21c>)
 80012d8:	6013      	str	r3, [r2, #0]

	/* definition and creation of gyroTask */
	osThreadDef(gyroTask, gyroTask1, osPriorityIdle, 0, 128);
 80012da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <main+0x220>)
 80012e4:	461c      	mov	r4, r3
 80012e6:	4615      	mov	r5, r2
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gyroTaskHandle = osThreadCreate(osThread(gyroTask), NULL);
 80012f4:	463b      	mov	r3, r7
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 fc64 	bl	8009bc6 <osThreadCreate>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <main+0x224>)
 8001302:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001304:	f008 fc48 	bl	8009b98 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001308:	e7fe      	b.n	8001308 <main+0x1cc>
 800130a:	bf00      	nop
 800130c:	20000668 	.word	0x20000668
 8001310:	200005fc 	.word	0x200005fc
 8001314:	0800c084 	.word	0x0800c084
 8001318:	20000640 	.word	0x20000640
 800131c:	0800c0a0 	.word	0x0800c0a0
 8001320:	20000644 	.word	0x20000644
 8001324:	0800c0bc 	.word	0x0800c0bc
 8001328:	20000648 	.word	0x20000648
 800132c:	0800c0d8 	.word	0x0800c0d8
 8001330:	2000064c 	.word	0x2000064c
 8001334:	0800c0f4 	.word	0x0800c0f4
 8001338:	20000650 	.word	0x20000650
 800133c:	0800c110 	.word	0x0800c110
 8001340:	20000654 	.word	0x20000654
 8001344:	0800c12c 	.word	0x0800c12c
 8001348:	20000658 	.word	0x20000658
 800134c:	0800c148 	.word	0x0800c148
 8001350:	2000065c 	.word	0x2000065c
 8001354:	0800c164 	.word	0x0800c164
 8001358:	20000660 	.word	0x20000660
 800135c:	0800c180 	.word	0x0800c180
 8001360:	20000664 	.word	0x20000664

08001364 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	; 0x50
 8001368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00a f940 	bl	800b5f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <SystemClock_Config+0xb4>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <SystemClock_Config+0xb4>)
 8001392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <SystemClock_Config+0xb4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <SystemClock_Config+0xb8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <SystemClock_Config+0xb8>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <SystemClock_Config+0xb8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fa1d 	bl	8006814 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80013e0:	f002 faf6 	bl	80039d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fc80 	bl	8006d04 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800140a:	f002 fae1 	bl	80039d0 <Error_Handler>
	}
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	; 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <MX_ADC1_Init+0x9c>)
 8001436:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_ADC1_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_ADC1_Init+0x98>)
 800144c:	2201      	movs	r2, #1
 800144e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_ADC1_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_ADC1_Init+0x98>)
 800146c:	2201      	movs	r2, #1
 800146e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_ADC1_Init+0x98>)
 800147a:	2201      	movs	r2, #1
 800147c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <MX_ADC1_Init+0x98>)
 8001480:	f002 ff2e 	bl	80042e0 <HAL_ADC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800148a:	f002 faa1 	bl	80039d0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800148e:	230b      	movs	r3, #11
 8001490:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_ADC1_Init+0x98>)
 80014a0:	f003 f890 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80014aa:	f002 fa91 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002f0 	.word	0x200002f0
 80014bc:	40012000 	.word	0x40012000
 80014c0:	0f000001 	.word	0x0f000001

080014c4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_ADC2_Init+0x98>)
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <MX_ADC2_Init+0x9c>)
 80014da:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_ADC2_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_ADC2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_ADC2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_ADC2_Init+0x98>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_ADC2_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_ADC2_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_ADC2_Init+0x98>)
 8001504:	4a17      	ldr	r2, [pc, #92]	; (8001564 <MX_ADC2_Init+0xa0>)
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_ADC2_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_ADC2_Init+0x98>)
 8001510:	2201      	movs	r2, #1
 8001512:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_ADC2_Init+0x98>)
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_ADC2_Init+0x98>)
 800151e:	2201      	movs	r2, #1
 8001520:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_ADC2_Init+0x98>)
 8001524:	f002 fedc 	bl	80042e0 <HAL_ADC_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 800152e:	f002 fa4f 	bl	80039d0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001532:	230c      	movs	r3, #12
 8001534:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_ADC2_Init+0x98>)
 8001544:	f003 f83e 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 800154e:	f002 fa3f 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000338 	.word	0x20000338
 8001560:	40012100 	.word	0x40012100
 8001564:	0f000001 	.word	0x0f000001

08001568 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f004 f977 	bl	8005898 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80015b0:	f002 fa0e 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000440 	.word	0x20000440
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b092      	sub	sp, #72	; 0x48
 80015c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2220      	movs	r2, #32
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00a f802 	bl	800b5f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <MX_TIM1_Init+0xfc>)
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <MX_TIM1_Init+0x100>)
 80015f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <MX_TIM1_Init+0xfc>)
 80015fc:	22a0      	movs	r2, #160	; 0xa0
 80015fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_TIM1_Init+0xfc>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001620:	4827      	ldr	r0, [pc, #156]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001622:	f005 fd9e 	bl	8007162 <HAL_TIM_PWM_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 800162c:	f002 f9d0 	bl	80039d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163c:	4619      	mov	r1, r3
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001640:	f007 f926 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 800164a:	f002 f9c1 	bl	80039d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164e:	2360      	movs	r3, #96	; 0x60
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	220c      	movs	r2, #12
 800166c:	4619      	mov	r1, r3
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <MX_TIM1_Init+0xfc>)
 8001670:	f006 fade 	bl	8007c30 <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0xba>
	{
		Error_Handler();
 800167a:	f002 f9a9 	bl	80039d0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM1_Init+0xfc>)
 80016a2:	f007 f971 	bl	8008988 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 80016ac:	f002 f990 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM1_Init+0xfc>)
 80016b2:	f002 fc37 	bl	8003f24 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3748      	adds	r7, #72	; 0x48
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000494 	.word	0x20000494
 80016c4:	40010000 	.word	0x40010000

080016c8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f009 ff8e 	bl	800b5f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_TIM2_Init+0xa4>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_TIM2_Init+0xa4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_TIM2_Init+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_TIM2_Init+0xa4>)
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM2_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_TIM2_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170c:	2303      	movs	r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800171c:	230a      	movs	r3, #10
 800171e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001724:	2301      	movs	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 800172c:	230a      	movs	r3, #10
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_TIM2_Init+0xa4>)
 8001738:	f005 ffa2 	bl	8007680 <HAL_TIM_Encoder_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001742:	f002 f945 	bl	80039d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM2_Init+0xa4>)
 8001754:	f007 f89c 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 800175e:	f002 f937 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3730      	adds	r7, #48	; 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200004dc 	.word	0x200004dc

08001770 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f009 ff3a 	bl	800b5f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_TIM3_Init+0xa0>)
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <MX_TIM3_Init+0xa4>)
 8001790:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_TIM3_Init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM3_Init+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017b2:	2303      	movs	r3, #3
 80017b4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80017c2:	230a      	movs	r3, #10
 80017c4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80017d2:	230a      	movs	r3, #10
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017de:	f005 ff4f 	bl	8007680 <HAL_TIM_Encoder_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80017e8:	f002 f8f2 	bl	80039d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017fa:	f007 f849 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001804:	f002 f8e4 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000524 	.word	0x20000524
 8001814:	40000400 	.word	0x40000400

08001818 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001828:	463b      	mov	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <MX_TIM4_Init+0xa4>)
 8001838:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_TIM4_Init+0xa0>)
 800183c:	2210      	movs	r2, #16
 800183e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800185a:	4817      	ldr	r0, [pc, #92]	; (80018b8 <MX_TIM4_Init+0xa0>)
 800185c:	f005 fd98 	bl	8007390 <HAL_TIM_IC_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8001866:	f002 f8b3 	bl	80039d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	480f      	ldr	r0, [pc, #60]	; (80018b8 <MX_TIM4_Init+0xa0>)
 800187a:	f007 f809 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001884:	f002 f8a4 	bl	80039d0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM4_Init+0xa0>)
 80018a0:	f006 f92a 	bl	8007af8 <HAL_TIM_IC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 80018aa:	f002 f891 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000056c 	.word	0x2000056c
 80018bc:	40000800 	.word	0x40000800

080018c0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b096      	sub	sp, #88	; 0x58
 80018c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f009 fe7d 	bl	800b5f8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001900:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <MX_TIM8_Init+0x150>)
 8001902:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <MX_TIM8_Init+0x14c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001910:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001912:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001916:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <MX_TIM8_Init+0x14c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800192a:	4838      	ldr	r0, [pc, #224]	; (8001a0c <MX_TIM8_Init+0x14c>)
 800192c:	f005 fbca 	bl	80070c4 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 8001936:	f002 f84b 	bl	80039d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001944:	4619      	mov	r1, r3
 8001946:	4831      	ldr	r0, [pc, #196]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001948:	f006 fa34 	bl	8007db4 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001952:	f002 f83d 	bl	80039d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001956:	482d      	ldr	r0, [pc, #180]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001958:	f005 fc03 	bl	8007162 <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 8001962:	f002 f835 	bl	80039d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800196e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <MX_TIM8_Init+0x14c>)
 8001976:	f006 ff8b 	bl	8008890 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0xc4>
	{
		Error_Handler();
 8001980:	f002 f826 	bl	80039d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	; 0x60
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_TIM8_Init+0x14c>)
 80019aa:	f006 f941 	bl	8007c30 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM8_Init+0xf8>
	{
		Error_Handler();
 80019b4:	f002 f80c 	bl	80039d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	2204      	movs	r2, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_TIM8_Init+0x14c>)
 80019c2:	f006 f935 	bl	8007c30 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM8_Init+0x110>
	{
		Error_Handler();
 80019cc:	f002 f800 	bl	80039d0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_TIM8_Init+0x14c>)
 80019f4:	f006 ffc8 	bl	8008988 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM8_Init+0x142>
	{
		Error_Handler();
 80019fe:	f001 ffe7 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3758      	adds	r7, #88	; 0x58
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200005b4 	.word	0x200005b4
 8001a10:	40010400 	.word	0x40010400

08001a14 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_USART3_UART_Init+0x50>)
 8001a1c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a24:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_USART3_UART_Init+0x4c>)
 8001a4c:	f007 f802 	bl	8008a54 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001a56:	f001 ffbb 	bl	80039d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200005fc 	.word	0x200005fc
 8001a64:	40004800 	.word	0x40004800

08001a68 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_DMA_Init+0x4c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <MX_DMA_Init+0x4c>)
 8001a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_DMA_Init+0x4c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	2038      	movs	r0, #56	; 0x38
 8001a90:	f003 f913 	bl	8004cba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a94:	2038      	movs	r0, #56	; 0x38
 8001a96:	f003 f92c 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	203a      	movs	r0, #58	; 0x3a
 8001aa0:	f003 f90b 	bl	8004cba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001aa4:	203a      	movs	r0, #58	; 0x3a
 8001aa6:	f003 f924 	bl	8004cf2 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a37      	ldr	r2, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f242 11e0 	movw	r1, #8672	; 0x21e0
 8001b60:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0x11c>)
 8001b62:	f003 fe7f 	bl	8005864 <HAL_GPIO_WritePin>
			|TRIG_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin|MotorA_IN1_Pin|MotorB_IN1_Pin|MotorB_IN2_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	213c      	movs	r1, #60	; 0x3c
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0x120>)
 8001b6c:	f003 fe7a 	bl	8005864 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 8001b70:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <MX_GPIO_Init+0x11c>)
 8001b8a:	f003 fccf 	bl	800552c <HAL_GPIO_Init>

	/*Configure GPIO pins : MotorA_IN2_Pin MotorA_IN1_Pin MotorB_IN1_Pin MotorB_IN2_Pin */
	GPIO_InitStruct.Pin = MotorA_IN2_Pin|MotorA_IN1_Pin|MotorB_IN1_Pin|MotorB_IN2_Pin;
 8001b8e:	233c      	movs	r3, #60	; 0x3c
 8001b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <MX_GPIO_Init+0x120>)
 8001ba6:	f003 fcc1 	bl	800552c <HAL_GPIO_Init>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 8001baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_GPIO_Init+0x11c>)
 8001bc4:	f003 fcb2 	bl	800552c <HAL_GPIO_Init>

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 10, 0xFFFF);
	//motorDir = aRxBuffer[0];
	sprintf(temp,"%s\0",aRxBuffer);
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_UART_RxCpltCallback+0x74>)
 8001be6:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_UART_RxCpltCallback+0x78>)
 8001be8:	481b      	ldr	r0, [pc, #108]	; (8001c58 <HAL_UART_RxCpltCallback+0x7c>)
 8001bea:	f009 fd0d 	bl	800b608 <siprintf>
	int value = atoi(temp);
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <HAL_UART_RxCpltCallback+0x7c>)
 8001bf0:	f009 fcc6 	bl	800b580 <atoi>
 8001bf4:	60f8      	str	r0, [r7, #12]
	motorDir = value/1000;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_UART_RxCpltCallback+0x80>)
 8001bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfe:	1192      	asrs	r2, r2, #6
 8001c00:	17db      	asrs	r3, r3, #31
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_UART_RxCpltCallback+0x84>)
 8001c06:	6013      	str	r3, [r2, #0]
	angle = value % 1000;
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_UART_RxCpltCallback+0x80>)
 8001c0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c10:	1199      	asrs	r1, r3, #6
 8001c12:	17d3      	asrs	r3, r2, #31
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_UART_RxCpltCallback+0x88>)
 8001c22:	6013      	str	r3, [r2, #0]
	if (!motorDir){
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_UART_RxCpltCallback+0x84>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <HAL_UART_RxCpltCallback+0x62>
		stopMovement();
 8001c2c:	f000 f8e8 	bl	8001e00 <stopMovement>
		HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	2205      	movs	r2, #5
 8001c36:	490c      	ldr	r1, [pc, #48]	; (8001c68 <HAL_UART_RxCpltCallback+0x8c>)
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_UART_RxCpltCallback+0x90>)
 8001c3a:	f006 ff58 	bl	8008aee <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT (&huart3, aRxBuffer, 5);
 8001c3e:	2205      	movs	r2, #5
 8001c40:	4903      	ldr	r1, [pc, #12]	; (8001c50 <HAL_UART_RxCpltCallback+0x74>)
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <HAL_UART_RxCpltCallback+0x90>)
 8001c44:	f006 ffe5 	bl	8008c12 <HAL_UART_Receive_IT>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000668 	.word	0x20000668
 8001c54:	0800c19c 	.word	0x0800c19c
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	10624dd3 	.word	0x10624dd3
 8001c60:	20004680 	.word	0x20004680
 8001c64:	20000000 	.word	0x20000000
 8001c68:	0800c1a0 	.word	0x0800c1a0
 8001c6c:	200005fc 	.word	0x200005fc

08001c70 <HAL_TIM_IC_CaptureCallback>:
	while(__HAL_TIM_GET_COUNTER(&htim4) < duration);
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7f1b      	ldrb	r3, [r3, #28]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f040 8089 	bne.w	8001d94 <HAL_TIM_IC_CaptureCallback+0x124>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11a      	bne.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f006 f959 	bl	8007f44 <HAL_TIM_ReadCapturedValue>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a45      	ldr	r2, [pc, #276]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c96:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020a 	bic.w	r2, r2, #10
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0202 	orr.w	r2, r2, #2
 8001cbc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC1);
		}
	}
}
 8001cbe:	e069      	b.n	8001d94 <HAL_TIM_IC_CaptureCallback+0x124>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001cc0:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d165      	bne.n	8001d94 <HAL_TIM_IC_CaptureCallback+0x124>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f006 f93a 	bl	8007f44 <HAL_TIM_ReadCapturedValue>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cd4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d907      	bls.n	8001cfa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e00f      	b.n	8001d1a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d909      	bls.n	8001d1a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d14:	33ff      	adds	r3, #255	; 0xff
 8001d16:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d18:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbf8 	bl	8000514 <__aeabi_ui2d>
 8001d24:	a31e      	add	r3, pc, #120	; (adr r3, 8001da0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fc6d 	bl	8000608 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d3e:	f7fe fd8d 	bl	800085c <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff1f 	bl	8000b8c <__aeabi_d2uiz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d54:	701a      	strb	r2, [r3, #0]
			Distance+=4;  //ultrasonic sensor is off by 3cm
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d60:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a1a      	ldr	r2, [r3, #32]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020a 	bic.w	r2, r2, #10
 8001d76:	621a      	str	r2, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a12      	ldr	r2, [r2, #32]
 8001d82:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC1);
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0202 	bic.w	r2, r2, #2
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	b020c49c 	.word	0xb020c49c
 8001da4:	3fa16872 	.word	0x3fa16872
 8001da8:	200046b4 	.word	0x200046b4
 8001dac:	200046ac 	.word	0x200046ac
 8001db0:	200046b0 	.word	0x200046b0
 8001db4:	200046a8 	.word	0x200046a8
 8001db8:	200046b5 	.word	0x200046b5
 8001dbc:	2000056c 	.word	0x2000056c

08001dc0 <ultrasonic_read>:

void ultrasonic_read(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	//code for ultrasound
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <ultrasonic_read+0x38>)
 8001dcc:	f003 fd4a 	bl	8005864 <HAL_GPIO_WritePin>
	osDelay(10);  // wait for 10 us
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f007 ff44 	bl	8009c5e <osDelay>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <ultrasonic_read+0x38>)
 8001dde:	f003 fd41 	bl	8005864 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <ultrasonic_read+0x3c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <ultrasonic_read+0x3c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0202 	orr.w	r2, r2, #2
 8001df0:	60da      	str	r2, [r3, #12]
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	2000056c 	.word	0x2000056c

08001e00 <stopMovement>:



void stopMovement(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e04:	210c      	movs	r1, #12
 8001e06:	4810      	ldr	r0, [pc, #64]	; (8001e48 <stopMovement+0x48>)
 8001e08:	f005 f9fa 	bl	8007200 <HAL_TIM_PWM_Start>
	//	htim1.Instance->CCR4 = 146;
	//	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
	//	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <stopMovement+0x4c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <stopMovement+0x4c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38

	//forward - Motor A
	HAL_GPIO_WritePin(GPIOA,MotorA_IN1_Pin, GPIO_PIN_SET);  // high
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2108      	movs	r1, #8
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <stopMovement+0x50>)
 8001e22:	f003 fd1f 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorA_IN2_Pin,GPIO_PIN_RESET); // low
 8001e26:	2200      	movs	r2, #0
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <stopMovement+0x50>)
 8001e2c:	f003 fd1a 	bl	8005864 <HAL_GPIO_WritePin>

	//forward - Motor B
	HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_SET);  // high
 8001e30:	2201      	movs	r2, #1
 8001e32:	2110      	movs	r1, #16
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <stopMovement+0x50>)
 8001e36:	f003 fd15 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin,GPIO_PIN_RESET); // low
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4804      	ldr	r0, [pc, #16]	; (8001e50 <stopMovement+0x50>)
 8001e40:	f003 fd10 	bl	8005864 <HAL_GPIO_WritePin>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000494 	.word	0x20000494
 8001e4c:	200005b4 	.word	0x200005b4
 8001e50:	40020000 	.word	0x40020000
 8001e54:	00000000 	.word	0x00000000

08001e58 <moveForward>:

void moveForward(char dir[10], int distance){
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	stopMovement();
 8001e62:	f7ff ffcd 	bl	8001e00 <stopMovement>
	osDelay(100);
 8001e66:	2064      	movs	r0, #100	; 0x64
 8001e68:	f007 fef9 	bl	8009c5e <osDelay>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	4850      	ldr	r0, [pc, #320]	; (8001fb0 <moveForward+0x158>)
 8001e70:	f005 f9c6 	bl	8007200 <HAL_TIM_PWM_Start>
	if(strcmp(dir, "Left") == 0)
 8001e74:	494f      	ldr	r1, [pc, #316]	; (8001fb4 <moveForward+0x15c>)
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe f9aa 	bl	80001d0 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d104      	bne.n	8001e8c <moveForward+0x34>
		htim1.Instance->CCR4 = 101;
 8001e82:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <moveForward+0x158>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2265      	movs	r2, #101	; 0x65
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8a:	e00f      	b.n	8001eac <moveForward+0x54>
	else if(strcmp(dir, "Right") == 0)
 8001e8c:	494a      	ldr	r1, [pc, #296]	; (8001fb8 <moveForward+0x160>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe f99e 	bl	80001d0 <strcmp>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <moveForward+0x4c>
		htim1.Instance->CCR4 = 220;
 8001e9a:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <moveForward+0x158>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	22dc      	movs	r2, #220	; 0xdc
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea2:	e003      	b.n	8001eac <moveForward+0x54>
	else
		htim1.Instance->CCR4 = 147;
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <moveForward+0x158>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2293      	movs	r2, #147	; 0x93
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4842      	ldr	r0, [pc, #264]	; (8001fbc <moveForward+0x164>)
 8001eb2:	f003 fcd7 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4840      	ldr	r0, [pc, #256]	; (8001fbc <moveForward+0x164>)
 8001ebc:	f003 fcd2 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	483d      	ldr	r0, [pc, #244]	; (8001fbc <moveForward+0x164>)
 8001ec6:	f003 fccd 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2120      	movs	r1, #32
 8001ece:	483b      	ldr	r0, [pc, #236]	; (8001fbc <moveForward+0x164>)
 8001ed0:	f003 fcc8 	bl	8005864 <HAL_GPIO_WritePin>

	// forward left and right wheels CLEARED CHECKLIST @ left: 2650; right: 2000
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1500); //left wheel was 1650
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <moveForward+0x168>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1500); //right wheel was 1400
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <moveForward+0x168>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38

	//	osDelay(2250);   //latest
	// forward movement delay CLEARED CHECKLIST @ 2725/100
	int t = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
	//HAL_GetTick()
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001eec:	f007 fe5b 	bl	8009ba6 <osKernelSysTick>
 8001ef0:	6138      	str	r0, [r7, #16]
	int tick = HAL_GetTick();
 8001ef2:	f002 f9c5 	bl	8004280 <HAL_GetTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	60fb      	str	r3, [r7, #12]
	uint32_t delay = angle * (12800/10);
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <moveForward+0x16c>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	60bb      	str	r3, [r7, #8]
	//original value before PID: (2875/100) ; 5th Oct 4pm
	//prev value (12500/10) ; 6th Oct 1pm

	totalLeftEncoder = 0;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <moveForward+0x170>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
	total_angle = 0;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <moveForward+0x174>)
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]

	Aint = 0;
 8001f1c:	492c      	ldr	r1, [pc, #176]	; (8001fd0 <moveForward+0x178>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9c1 2300 	strd	r2, r3, [r1]


	// indoor 1500
	// outdoor
	// for forward movement, adjust the denominator (1500) to be more if the distance traversed is not enough
	while(totalLeftEncoder/1300.0 * 21.04 < distance){
 8001f2a:	e007      	b.n	8001f3c <moveForward+0xe4>
		// value was 1550 at 7th Oct 1209am; 160cm: ok, 10cm: overshot by 2cm
		// value was 1520 at 7th Oct 1220am; 160cm: ok, 20cm: overshot by 0.5
		// value was 1515 at 7th Oct 1240am; 160cm: ok, 20cm: overshot


		correctDirection(0, 1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001f98 <moveForward+0x140>
 8001f32:	f7ff f839 	bl	8000fa8 <correctDirection>
		//osDelayUntil(&PreviousWakeTime,5);
		osDelay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f007 fe91 	bl	8009c5e <osDelay>
	while(totalLeftEncoder/1300.0 * 21.04 < distance){
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <moveForward+0x170>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faf7 	bl	8000534 <__aeabi_i2d>
 8001f46:	a316      	add	r3, pc, #88	; (adr r3, 8001fa0 <moveForward+0x148>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fc86 	bl	800085c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	a313      	add	r3, pc, #76	; (adr r3, 8001fa8 <moveForward+0x150>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb53 	bl	8000608 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fae2 	bl	8000534 <__aeabi_i2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe fdb8 	bl	8000aec <__aeabi_dcmplt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1d4      	bne.n	8001f2c <moveForward+0xd4>

	}
	stopMovement();
 8001f82:	f7ff ff3d 	bl	8001e00 <stopMovement>
	//	//osDelay(delay);
	//
	//
	//
	//	stopMovement();
	motorDir = 0;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <moveForward+0x17c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdb0      	pop	{r4, r5, r7, pc}
 8001f94:	f3af 8000 	nop.w
	...
 8001fa4:	40945000 	.word	0x40945000
 8001fa8:	70a3d70a 	.word	0x70a3d70a
 8001fac:	40350a3d 	.word	0x40350a3d
 8001fb0:	20000494 	.word	0x20000494
 8001fb4:	0800c1a8 	.word	0x0800c1a8
 8001fb8:	0800c1b0 	.word	0x0800c1b0
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	200005b4 	.word	0x200005b4
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20004684 	.word	0x20004684
 8001fcc:	200046b8 	.word	0x200046b8
 8001fd0:	200046a0 	.word	0x200046a0
 8001fd4:	20004680 	.word	0x20004680

08001fd8 <moveBackward>:

void moveBackward(char dir[10], int distance){
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	uint32_t delay = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
	stopMovement();
 8001fe6:	f7ff ff0b 	bl	8001e00 <stopMovement>
	osDelay(100);
 8001fea:	2064      	movs	r0, #100	; 0x64
 8001fec:	f007 fe37 	bl	8009c5e <osDelay>
	uint32_t target_angle = 90;
 8001ff0:	235a      	movs	r3, #90	; 0x5a
 8001ff2:	60bb      	str	r3, [r7, #8]
	total_angle = 0;
 8001ff4:	49a2      	ldr	r1, [pc, #648]	; (8002280 <moveBackward+0x2a8>)
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2108      	movs	r1, #8
 8002006:	489f      	ldr	r0, [pc, #636]	; (8002284 <moveBackward+0x2ac>)
 8002008:	f003 fc2c 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2104      	movs	r1, #4
 8002010:	489c      	ldr	r0, [pc, #624]	; (8002284 <moveBackward+0x2ac>)
 8002012:	f003 fc27 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2110      	movs	r1, #16
 800201a:	489a      	ldr	r0, [pc, #616]	; (8002284 <moveBackward+0x2ac>)
 800201c:	f003 fc22 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	2120      	movs	r1, #32
 8002024:	4897      	ldr	r0, [pc, #604]	; (8002284 <moveBackward+0x2ac>)
 8002026:	f003 fc1d 	bl	8005864 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800202a:	210c      	movs	r1, #12
 800202c:	4896      	ldr	r0, [pc, #600]	; (8002288 <moveBackward+0x2b0>)
 800202e:	f005 f8e7 	bl	8007200 <HAL_TIM_PWM_Start>
	if(strcmp(dir, "Left") == 0){
 8002032:	4996      	ldr	r1, [pc, #600]	; (800228c <moveBackward+0x2b4>)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe f8cb 	bl	80001d0 <strcmp>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15a      	bne.n	80020f6 <moveBackward+0x11e>
		// delay = angle * (1500/90);// was 1550
		htim1.Instance->CCR4 = 101;
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <moveBackward+0x2b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2265      	movs	r2, #101	; 0x65
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

		// __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1700);// was 2700
		// __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1945);// was 2975
		HAL_GPIO_WritePin(GPIOA,MotorA_IN1_Pin, GPIO_PIN_RESET);  // high
 8002048:	2200      	movs	r2, #0
 800204a:	2108      	movs	r1, #8
 800204c:	488d      	ldr	r0, [pc, #564]	; (8002284 <moveBackward+0x2ac>)
 800204e:	f003 fc09 	bl	8005864 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,MotorA_IN2_Pin, GPIO_PIN_SET); // low
 8002052:	2201      	movs	r2, #1
 8002054:	2104      	movs	r1, #4
 8002056:	488b      	ldr	r0, [pc, #556]	; (8002284 <moveBackward+0x2ac>)
 8002058:	f003 fc04 	bl	8005864 <HAL_GPIO_WritePin>

		// back
		HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_RESET);  // high
 800205c:	2200      	movs	r2, #0
 800205e:	2110      	movs	r1, #16
 8002060:	4888      	ldr	r0, [pc, #544]	; (8002284 <moveBackward+0x2ac>)
 8002062:	f003 fbff 	bl	8005864 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_SET); // low
 8002066:	2201      	movs	r2, #1
 8002068:	2120      	movs	r1, #32
 800206a:	4886      	ldr	r0, [pc, #536]	; (8002284 <moveBackward+0x2ac>)
 800206c:	f003 fbfa 	bl	8005864 <HAL_GPIO_WritePin>

		osDelay(250);
 8002070:	20fa      	movs	r0, #250	; 0xfa
 8002072:	f007 fdf4 	bl	8009c5e <osDelay>

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 500); //motor A; 1000 at 14 oct 245am
 8002076:	4b86      	ldr	r3, [pc, #536]	; (8002290 <moveBackward+0x2b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1500); //motor B;
 8002080:	4b83      	ldr	r3, [pc, #524]	; (8002290 <moveBackward+0x2b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

		osDelay(10);
 800208a:	200a      	movs	r0, #10
 800208c:	f007 fde7 	bl	8009c5e <osDelay>
		while(total_angle*-1  <= target_angle - 3){//was 3
 8002090:	e002      	b.n	8002098 <moveBackward+0xc0>
			osDelay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f007 fde3 	bl	8009c5e <osDelay>
		while(total_angle*-1  <= target_angle - 3){//was 3
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <moveBackward+0x2a8>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	4614      	mov	r4, r2
 80020a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3b03      	subs	r3, #3
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa33 	bl	8000514 <__aeabi_ui2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fd23 	bl	8000b00 <__aeabi_dcmple>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e8      	bne.n	8002092 <moveBackward+0xba>
		}

		stopMovement();
 80020c0:	f7ff fe9e 	bl	8001e00 <stopMovement>
		//
		//			Aint += -1*total_angle - target_angle;
		//
		//			osDelay(10);
		//		}
		osDelay(10);
 80020c4:	200a      	movs	r0, #10
 80020c6:	f007 fdca 	bl	8009c5e <osDelay>
		stopMovement();
 80020ca:	f7ff fe99 	bl	8001e00 <stopMovement>
		htim1.Instance->CCR4 = 147;
 80020ce:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <moveBackward+0x2b0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2293      	movs	r2, #147	; 0x93
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 80020d6:	20c8      	movs	r0, #200	; 0xc8
 80020d8:	f007 fdc1 	bl	8009c5e <osDelay>
		moveForward("Straight", 7);
 80020dc:	2107      	movs	r1, #7
 80020de:	486d      	ldr	r0, [pc, #436]	; (8002294 <moveBackward+0x2bc>)
 80020e0:	f7ff feba 	bl	8001e58 <moveForward>
		osDelay(200);
 80020e4:	20c8      	movs	r0, #200	; 0xc8
 80020e6:	f007 fdba 	bl	8009c5e <osDelay>
		stopMovement();
 80020ea:	f7ff fe89 	bl	8001e00 <stopMovement>
		motorDir = 0;
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <moveBackward+0x2c0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
		//osDelay(delay);
		stopMovement();
		motorDir = 0;
	}

}
 80020f4:	e0b1      	b.n	800225a <moveBackward+0x282>
	else if(strcmp(dir, "Right") == 0){
 80020f6:	4969      	ldr	r1, [pc, #420]	; (800229c <moveBackward+0x2c4>)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe f869 	bl	80001d0 <strcmp>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d153      	bne.n	80021ac <moveBackward+0x1d4>
		htim1.Instance->CCR4 = 220;
 8002104:	4b60      	ldr	r3, [pc, #384]	; (8002288 <moveBackward+0x2b0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	22dc      	movs	r2, #220	; 0xdc
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOA,MotorA_IN1_Pin, GPIO_PIN_RESET);  // high
 800210c:	2200      	movs	r2, #0
 800210e:	2108      	movs	r1, #8
 8002110:	485c      	ldr	r0, [pc, #368]	; (8002284 <moveBackward+0x2ac>)
 8002112:	f003 fba7 	bl	8005864 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,MotorA_IN2_Pin, GPIO_PIN_SET); // low
 8002116:	2201      	movs	r2, #1
 8002118:	2104      	movs	r1, #4
 800211a:	485a      	ldr	r0, [pc, #360]	; (8002284 <moveBackward+0x2ac>)
 800211c:	f003 fba2 	bl	8005864 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_RESET);  // high
 8002120:	2200      	movs	r2, #0
 8002122:	2110      	movs	r1, #16
 8002124:	4857      	ldr	r0, [pc, #348]	; (8002284 <moveBackward+0x2ac>)
 8002126:	f003 fb9d 	bl	8005864 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_SET); // low
 800212a:	2201      	movs	r2, #1
 800212c:	2120      	movs	r1, #32
 800212e:	4855      	ldr	r0, [pc, #340]	; (8002284 <moveBackward+0x2ac>)
 8002130:	f003 fb98 	bl	8005864 <HAL_GPIO_WritePin>
		osDelay(250);
 8002134:	20fa      	movs	r0, #250	; 0xfa
 8002136:	f007 fd92 	bl	8009c5e <osDelay>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1500); //motor A
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <moveBackward+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 500); //motor B; 1000 at 14 oct 245am
 8002144:	4b52      	ldr	r3, [pc, #328]	; (8002290 <moveBackward+0x2b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(10);
 800214e:	200a      	movs	r0, #10
 8002150:	f007 fd85 	bl	8009c5e <osDelay>
		while(total_angle  <= target_angle + 1){
 8002154:	e002      	b.n	800215c <moveBackward+0x184>
			osDelay(10);
 8002156:	200a      	movs	r0, #10
 8002158:	f007 fd81 	bl	8009c5e <osDelay>
		while(total_angle  <= target_angle + 1){
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9d7 	bl	8000514 <__aeabi_ui2d>
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <moveBackward+0x2a8>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe fcd2 	bl	8000b14 <__aeabi_dcmpge>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <moveBackward+0x17e>
		stopMovement();
 8002176:	f7ff fe43 	bl	8001e00 <stopMovement>
		osDelay(10);
 800217a:	200a      	movs	r0, #10
 800217c:	f007 fd6f 	bl	8009c5e <osDelay>
		stopMovement();
 8002180:	f7ff fe3e 	bl	8001e00 <stopMovement>
		htim1.Instance->CCR4 = 147;
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <moveBackward+0x2b0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2293      	movs	r2, #147	; 0x93
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 800218c:	20c8      	movs	r0, #200	; 0xc8
 800218e:	f007 fd66 	bl	8009c5e <osDelay>
		moveForward("Straight", 7);
 8002192:	2107      	movs	r1, #7
 8002194:	483f      	ldr	r0, [pc, #252]	; (8002294 <moveBackward+0x2bc>)
 8002196:	f7ff fe5f 	bl	8001e58 <moveForward>
		osDelay(200);
 800219a:	20c8      	movs	r0, #200	; 0xc8
 800219c:	f007 fd5f 	bl	8009c5e <osDelay>
		stopMovement();
 80021a0:	f7ff fe2e 	bl	8001e00 <stopMovement>
		motorDir = 0;
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <moveBackward+0x2c0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	e056      	b.n	800225a <moveBackward+0x282>
		htim1.Instance->CCR4 = 147;
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <moveBackward+0x2b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2293      	movs	r2, #147	; 0x93
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
		delay = angle * (2600/100);// was 2510 for 100 (not accurate) // 251 for 10cm slight short
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <moveBackward+0x2c8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	221a      	movs	r2, #26
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1000);// was 2550
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <moveBackward+0x2b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1000);// was 2250
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <moveBackward+0x2b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
		totalLeftEncoder = 0;
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <moveBackward+0x2cc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 80021da:	4929      	ldr	r1, [pc, #164]	; (8002280 <moveBackward+0x2a8>)
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c1 2300 	strd	r2, r3, [r1]
		Aint = 0;
 80021e8:	492f      	ldr	r1, [pc, #188]	; (80022a8 <moveBackward+0x2d0>)
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
		while(totalLeftEncoder/1500.0 * -21.04 < distance){
 80021f6:	e008      	b.n	800220a <moveBackward+0x232>
			correctDirection(0, -1);
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002268 <moveBackward+0x290>
 8002200:	f7fe fed2 	bl	8000fa8 <correctDirection>
			osDelay(1);
 8002204:	2001      	movs	r0, #1
 8002206:	f007 fd2a 	bl	8009c5e <osDelay>
		while(totalLeftEncoder/1500.0 * -21.04 < distance){
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <moveBackward+0x2cc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f990 	bl	8000534 <__aeabi_i2d>
 8002214:	a316      	add	r3, pc, #88	; (adr r3, 8002270 <moveBackward+0x298>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe fb1f 	bl	800085c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	a314      	add	r3, pc, #80	; (adr r3, 8002278 <moveBackward+0x2a0>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f9ec 	bl	8000608 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f7fe f97b 	bl	8000534 <__aeabi_i2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe fc51 	bl	8000aec <__aeabi_dcmplt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1d3      	bne.n	80021f8 <moveBackward+0x220>
		stopMovement();
 8002250:	f7ff fdd6 	bl	8001e00 <stopMovement>
		motorDir = 0;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <moveBackward+0x2c0>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bdb0      	pop	{r4, r5, r7, pc}
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
	...
 8002274:	40977000 	.word	0x40977000
 8002278:	70a3d70a 	.word	0x70a3d70a
 800227c:	c0350a3d 	.word	0xc0350a3d
 8002280:	200046b8 	.word	0x200046b8
 8002284:	40020000 	.word	0x40020000
 8002288:	20000494 	.word	0x20000494
 800228c:	0800c1a8 	.word	0x0800c1a8
 8002290:	200005b4 	.word	0x200005b4
 8002294:	0800c1b8 	.word	0x0800c1b8
 8002298:	20004680 	.word	0x20004680
 800229c:	0800c1b0 	.word	0x0800c1b0
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20004684 	.word	0x20004684
 80022a8:	200046a0 	.word	0x200046a0
 80022ac:	00000000 	.word	0x00000000

080022b0 <motorRight>:

void motorRight(int target_angle){
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b088      	sub	sp, #32
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6178      	str	r0, [r7, #20]

	total_angle = 0;
 80022ba:	4999      	ldr	r1, [pc, #612]	; (8002520 <motorRight+0x270>)
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9c1 2300 	strd	r2, r3, [r1]
	//target_angle = angle;

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022c8:	210c      	movs	r1, #12
 80022ca:	4896      	ldr	r0, [pc, #600]	; (8002524 <motorRight+0x274>)
 80022cc:	f004 ff98 	bl	8007200 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 220;
 80022d0:	4b94      	ldr	r3, [pc, #592]	; (8002524 <motorRight+0x274>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	22dc      	movs	r2, #220	; 0xdc
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

	//forward
	HAL_GPIO_WritePin(GPIOA,MotorA_IN1_Pin, GPIO_PIN_SET);  // high
 80022d8:	2201      	movs	r2, #1
 80022da:	2108      	movs	r1, #8
 80022dc:	4892      	ldr	r0, [pc, #584]	; (8002528 <motorRight+0x278>)
 80022de:	f003 fac1 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorA_IN2_Pin, GPIO_PIN_RESET); // low
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	4890      	ldr	r0, [pc, #576]	; (8002528 <motorRight+0x278>)
 80022e8:	f003 fabc 	bl	8005864 <HAL_GPIO_WritePin>

	//forward
	HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_SET);  // high
 80022ec:	2201      	movs	r2, #1
 80022ee:	2110      	movs	r1, #16
 80022f0:	488d      	ldr	r0, [pc, #564]	; (8002528 <motorRight+0x278>)
 80022f2:	f003 fab7 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_RESET); // low
 80022f6:	2200      	movs	r2, #0
 80022f8:	2120      	movs	r1, #32
 80022fa:	488b      	ldr	r0, [pc, #556]	; (8002528 <motorRight+0x278>)
 80022fc:	f003 fab2 	bl	8005864 <HAL_GPIO_WritePin>

	//back
	//	HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_RESET);  // low
	//	HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_SET); // high

	osDelay(250);
 8002300:	20fa      	movs	r0, #250	; 0xfa
 8002302:	f007 fcac 	bl	8009c5e <osDelay>

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 3000); //motor A; 1000 at 14 oct 245am
 8002306:	4b89      	ldr	r3, [pc, #548]	; (800252c <motorRight+0x27c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1000); //motor B;
 8002310:	4b86      	ldr	r3, [pc, #536]	; (800252c <motorRight+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002318:	639a      	str	r2, [r3, #56]	; 0x38

	osDelay(10);
 800231a:	200a      	movs	r0, #10
 800231c:	f007 fc9f 	bl	8009c5e <osDelay>
	while(total_angle*-1  <= target_angle - 6){
 8002320:	e002      	b.n	8002328 <motorRight+0x78>
		osDelay(10);
 8002322:	200a      	movs	r0, #10
 8002324:	f007 fc9b 	bl	8009c5e <osDelay>
	while(total_angle*-1  <= target_angle - 6){
 8002328:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <motorRight+0x270>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3b06      	subs	r3, #6
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f8fa 	bl	8000534 <__aeabi_i2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002348:	f7fe fbda 	bl	8000b00 <__aeabi_dcmple>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e7      	bne.n	8002322 <motorRight+0x72>
	}

	stopMovement();
 8002352:	f7ff fd55 	bl	8001e00 <stopMovement>

	double Aint = 0;
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2108      	movs	r1, #8
 8002366:	4870      	ldr	r0, [pc, #448]	; (8002528 <motorRight+0x278>)
 8002368:	f003 fa7c 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	2104      	movs	r1, #4
 8002370:	486d      	ldr	r0, [pc, #436]	; (8002528 <motorRight+0x278>)
 8002372:	f003 fa77 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	2110      	movs	r1, #16
 800237a:	486b      	ldr	r0, [pc, #428]	; (8002528 <motorRight+0x278>)
 800237c:	f003 fa72 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	2120      	movs	r1, #32
 8002384:	4868      	ldr	r0, [pc, #416]	; (8002528 <motorRight+0x278>)
 8002386:	f003 fa6d 	bl	8005864 <HAL_GPIO_WritePin>

	osDelay(10);
 800238a:	200a      	movs	r0, #10
 800238c:	f007 fc67 	bl	8009c5e <osDelay>

	while((int)-1*total_angle > (target_angle)){
 8002390:	bf00      	nop
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <motorRight+0x270>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7fe f8c7 	bl	8000534 <__aeabi_i2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023ae:	f7fe fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809a 	beq.w	80024ee <motorRight+0x23e>
		//change this (500) to improve turning correction
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (int)(500*(-1*total_angle - target_angle) + 0.1*Aint));
 80023ba:	4b59      	ldr	r3, [pc, #356]	; (8002520 <motorRight+0x270>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	4614      	mov	r4, r2
 80023c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7fe f8b4 	bl	8000534 <__aeabi_i2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fd ff60 	bl	8000298 <__aeabi_dsub>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b52      	ldr	r3, [pc, #328]	; (8002530 <motorRight+0x280>)
 80023e6:	f7fe f90f 	bl	8000608 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	461d      	mov	r5, r3
 80023f2:	a349      	add	r3, pc, #292	; (adr r3, 8002518 <motorRight+0x268>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023fc:	f7fe f904 	bl	8000608 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fd ff48 	bl	800029c <__adddf3>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fb92 	bl	8000b3c <__aeabi_d2iz>
 8002418:	4602      	mov	r2, r0
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <motorRight+0x27c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (int)(500*(-1*total_angle - target_angle) + 0.1*Aint)); //motor B
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <motorRight+0x270>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	4692      	mov	sl, r2
 8002428:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800242c:	6978      	ldr	r0, [r7, #20]
 800242e:	f7fe f881 	bl	8000534 <__aeabi_i2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4650      	mov	r0, sl
 8002438:	4659      	mov	r1, fp
 800243a:	f7fd ff2d 	bl	8000298 <__aeabi_dsub>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <motorRight+0x280>)
 800244c:	f7fe f8dc 	bl	8000608 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	a32f      	add	r3, pc, #188	; (adr r3, 8002518 <motorRight+0x268>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002462:	f7fe f8d1 	bl	8000608 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd ff15 	bl	800029c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb5f 	bl	8000b3c <__aeabi_d2iz>
 800247e:	4602      	mov	r2, r0
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <motorRight+0x27c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38

		Aint += -1*total_angle - target_angle;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <motorRight+0x270>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	4690      	mov	r8, r2
 800248e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7fe f84e 	bl	8000534 <__aeabi_i2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4640      	mov	r0, r8
 800249e:	4649      	mov	r1, r9
 80024a0:	f7fd fefa 	bl	8000298 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ac:	f7fd fef6 	bl	800029c <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

		osDelay(10);
 80024b8:	200a      	movs	r0, #10
 80024ba:	f007 fbd0 	bl	8009c5e <osDelay>
		if ((int) total_angle-1 == target_angle){
 80024be:	4b18      	ldr	r3, [pc, #96]	; (8002520 <motorRight+0x270>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7fe fb38 	bl	8000b3c <__aeabi_d2iz>
 80024cc:	4603      	mov	r3, r0
 80024ce:	3b01      	subs	r3, #1
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d10a      	bne.n	80024ec <motorRight+0x23c>
			if ((int)total_angle == target_angle){
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <motorRight+0x270>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fb2c 	bl	8000b3c <__aeabi_d2iz>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4293      	cmp	r3, r2
				break;
			}
			else{
				break;
 80024ea:	e000      	b.n	80024ee <motorRight+0x23e>
			}
		}
		else{
			break;
 80024ec:	bf00      	nop
		}
	}
	osDelay(10);
 80024ee:	200a      	movs	r0, #10
 80024f0:	f007 fbb5 	bl	8009c5e <osDelay>
	stopMovement();
 80024f4:	f7ff fc84 	bl	8001e00 <stopMovement>
	htim1.Instance->CCR4 = 147;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <motorRight+0x274>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2293      	movs	r2, #147	; 0x93
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
	//	osDelay(200);
	//	moveBackward("Straight", 7);
	//	osDelay(200);
	//    stopMovement();
	motorDir = 0;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <motorRight+0x284>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

	osDelay(500);
 8002506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800250a:	f007 fba8 	bl	8009c5e <osDelay>

}
 800250e:	bf00      	nop
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002518:	9999999a 	.word	0x9999999a
 800251c:	3fb99999 	.word	0x3fb99999
 8002520:	200046b8 	.word	0x200046b8
 8002524:	20000494 	.word	0x20000494
 8002528:	40020000 	.word	0x40020000
 800252c:	200005b4 	.word	0x200005b4
 8002530:	407f4000 	.word	0x407f4000
 8002534:	20004680 	.word	0x20004680

08002538 <motorLeft>:
void motorLeft(int target_angle){
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

	total_angle = 0;
 8002540:	498f      	ldr	r1, [pc, #572]	; (8002780 <motorLeft+0x248>)
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9c1 2300 	strd	r2, r3, [r1]
	//target_angle = angle;

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800254e:	210c      	movs	r1, #12
 8002550:	488c      	ldr	r0, [pc, #560]	; (8002784 <motorLeft+0x24c>)
 8002552:	f004 fe55 	bl	8007200 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 101;
 8002556:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <motorLeft+0x24c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2265      	movs	r2, #101	; 0x65
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

	//forward
	HAL_GPIO_WritePin(GPIOA,MotorA_IN1_Pin, GPIO_PIN_SET);  // high
 800255e:	2201      	movs	r2, #1
 8002560:	2108      	movs	r1, #8
 8002562:	4889      	ldr	r0, [pc, #548]	; (8002788 <motorLeft+0x250>)
 8002564:	f003 f97e 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorA_IN2_Pin, GPIO_PIN_RESET); // low
 8002568:	2200      	movs	r2, #0
 800256a:	2104      	movs	r1, #4
 800256c:	4886      	ldr	r0, [pc, #536]	; (8002788 <motorLeft+0x250>)
 800256e:	f003 f979 	bl	8005864 <HAL_GPIO_WritePin>

	//forward
	HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_SET);  // high
 8002572:	2201      	movs	r2, #1
 8002574:	2110      	movs	r1, #16
 8002576:	4884      	ldr	r0, [pc, #528]	; (8002788 <motorLeft+0x250>)
 8002578:	f003 f974 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_RESET); // low
 800257c:	2200      	movs	r2, #0
 800257e:	2120      	movs	r1, #32
 8002580:	4881      	ldr	r0, [pc, #516]	; (8002788 <motorLeft+0x250>)
 8002582:	f003 f96f 	bl	8005864 <HAL_GPIO_WritePin>

	//back
	//	HAL_GPIO_WritePin(GPIOA,MotorB_IN1_Pin, GPIO_PIN_RESET);  // low
	//	HAL_GPIO_WritePin(GPIOA,MotorB_IN2_Pin, GPIO_PIN_SET); // high

	osDelay(250);
 8002586:	20fa      	movs	r0, #250	; 0xfa
 8002588:	f007 fb69 	bl	8009c5e <osDelay>

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1000); //motor A
 800258c:	4b7f      	ldr	r3, [pc, #508]	; (800278c <motorLeft+0x254>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 3000); //motor B; 1000 at 14 oct 245am
 8002596:	4b7d      	ldr	r3, [pc, #500]	; (800278c <motorLeft+0x254>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800259e:	639a      	str	r2, [r3, #56]	; 0x38

	osDelay(10);
 80025a0:	200a      	movs	r0, #10
 80025a2:	f007 fb5c 	bl	8009c5e <osDelay>
	while(total_angle  <= target_angle - 6){
 80025a6:	e002      	b.n	80025ae <motorLeft+0x76>
		osDelay(10);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f007 fb58 	bl	8009c5e <osDelay>
	while(total_angle  <= target_angle - 6){
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3b06      	subs	r3, #6
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffbe 	bl	8000534 <__aeabi_i2d>
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <motorLeft+0x248>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe faa9 	bl	8000b14 <__aeabi_dcmpge>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ef      	bne.n	80025a8 <motorLeft+0x70>
	}

	stopMovement();
 80025c8:	f7ff fc1a 	bl	8001e00 <stopMovement>

	double Aint = 0;
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	2108      	movs	r1, #8
 80025dc:	486a      	ldr	r0, [pc, #424]	; (8002788 <motorLeft+0x250>)
 80025de:	f003 f941 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2104      	movs	r1, #4
 80025e6:	4868      	ldr	r0, [pc, #416]	; (8002788 <motorLeft+0x250>)
 80025e8:	f003 f93c 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2110      	movs	r1, #16
 80025f0:	4865      	ldr	r0, [pc, #404]	; (8002788 <motorLeft+0x250>)
 80025f2:	f003 f937 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2120      	movs	r1, #32
 80025fa:	4863      	ldr	r0, [pc, #396]	; (8002788 <motorLeft+0x250>)
 80025fc:	f003 f932 	bl	8005864 <HAL_GPIO_WritePin>

	osDelay(10);
 8002600:	200a      	movs	r0, #10
 8002602:	f007 fb2c 	bl	8009c5e <osDelay>

	while((int)total_angle > (target_angle)){
 8002606:	bf00      	nop
 8002608:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <motorLeft+0x248>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fa93 	bl	8000b3c <__aeabi_d2iz>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4293      	cmp	r3, r2
 800261c:	f280 808e 	bge.w	800273c <motorLeft+0x204>
		//motorOnA = (int)(200*(total_angle + target_angle) + 0.1*Aint);
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (int)(400*(total_angle - target_angle) + 0.1*Aint));
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <motorLeft+0x248>)
 8002622:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ff84 	bl	8000534 <__aeabi_i2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe30 	bl	8000298 <__aeabi_dsub>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <motorLeft+0x258>)
 8002646:	f7fd ffdf 	bl	8000608 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4614      	mov	r4, r2
 8002650:	461d      	mov	r5, r3
 8002652:	a349      	add	r3, pc, #292	; (adr r3, 8002778 <motorLeft+0x240>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265c:	f7fd ffd4 	bl	8000608 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd fe18 	bl	800029c <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fa62 	bl	8000b3c <__aeabi_d2iz>
 8002678:	4602      	mov	r2, r0
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <motorLeft+0x254>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (int)(400*(total_angle - target_angle) + 0.1*Aint)); //motor B
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <motorLeft+0x248>)
 8002682:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fd ff54 	bl	8000534 <__aeabi_i2d>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd fe00 	bl	8000298 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <motorLeft+0x258>)
 80026a6:	f7fd ffaf 	bl	8000608 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4614      	mov	r4, r2
 80026b0:	461d      	mov	r5, r3
 80026b2:	a331      	add	r3, pc, #196	; (adr r3, 8002778 <motorLeft+0x240>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026bc:	f7fd ffa4 	bl	8000608 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fd fde8 	bl	800029c <__adddf3>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa32 	bl	8000b3c <__aeabi_d2iz>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <motorLeft+0x254>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

		Aint += total_angle - target_angle;
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <motorLeft+0x248>)
 80026e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fd ff24 	bl	8000534 <__aeabi_i2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd fdd0 	bl	8000298 <__aeabi_dsub>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002700:	f7fd fdcc 	bl	800029c <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if ((int) total_angle-1 == target_angle){
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <motorLeft+0x248>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe fa11 	bl	8000b3c <__aeabi_d2iz>
 800271a:	4603      	mov	r3, r0
 800271c:	3b01      	subs	r3, #1
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d10a      	bne.n	800273a <motorLeft+0x202>
			if ((int)total_angle == target_angle){
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <motorLeft+0x248>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa05 	bl	8000b3c <__aeabi_d2iz>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4293      	cmp	r3, r2
				break;
			}
			else{
				break;
 8002738:	e000      	b.n	800273c <motorLeft+0x204>
			}
		}
		else{
			break;
 800273a:	bf00      	nop
		}
		osDelay(10);
	}
	osDelay(10);
 800273c:	200a      	movs	r0, #10
 800273e:	f007 fa8e 	bl	8009c5e <osDelay>
	stopMovement();
 8002742:	f7ff fb5d 	bl	8001e00 <stopMovement>
	htim1.Instance->CCR4 = 147;
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <motorLeft+0x24c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2293      	movs	r2, #147	; 0x93
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
	//	osDelay(200);
	//	moveBackward("Straight", 7);
	//	osDelay(200);
	//	stopMovement();
	motorDir = 0;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <motorLeft+0x25c>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

	osDelay(500);
 8002754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002758:	f007 fa81 	bl	8009c5e <osDelay>
	total_angle = 0;
 800275c:	4908      	ldr	r1, [pc, #32]	; (8002780 <motorLeft+0x248>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9c1 2300 	strd	r2, r3, [r1]




}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bdb0      	pop	{r4, r5, r7, pc}
 8002772:	bf00      	nop
 8002774:	f3af 8000 	nop.w
 8002778:	9999999a 	.word	0x9999999a
 800277c:	3fb99999 	.word	0x3fb99999
 8002780:	200046b8 	.word	0x200046b8
 8002784:	20000494 	.word	0x20000494
 8002788:	40020000 	.word	0x40020000
 800278c:	200005b4 	.word	0x200005b4
 8002790:	40790000 	.word	0x40790000
 8002794:	20004680 	.word	0x20004680

08002798 <motorForward>:
	//	if (ruk<umin) ruk=umin;
	return (ruk);
}

// turns on motor in fwd direction
void motorForward(int pwm){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	total_angle = 0;
 80027a0:	4913      	ldr	r1, [pc, #76]	; (80027f0 <motorForward+0x58>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]
	// these 4 lines control direction of the motors
	// HAL is a system library that has a function "GPIO write pin"
	// GPIOA is the port (port A)
	// MotorA_IN_Pin is the pin number (PA3)
	// set is 1, reset is 0
	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2108      	movs	r1, #8
 80027b2:	4810      	ldr	r0, [pc, #64]	; (80027f4 <motorForward+0x5c>)
 80027b4:	f003 f856 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <motorForward+0x5c>)
 80027be:	f003 f851 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_SET);
 80027c2:	2201      	movs	r2, #1
 80027c4:	2110      	movs	r1, #16
 80027c6:	480b      	ldr	r0, [pc, #44]	; (80027f4 <motorForward+0x5c>)
 80027c8:	f003 f84c 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2120      	movs	r1, #32
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <motorForward+0x5c>)
 80027d2:	f003 f847 	bl	8005864 <HAL_GPIO_WritePin>

	//
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,  pwm);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <motorForward+0x60>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm);
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <motorForward+0x60>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38

}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200046b8 	.word	0x200046b8
 80027f4:	40020000 	.word	0x40020000
 80027f8:	200005b4 	.word	0x200005b4

080027fc <motorReverse>:

void motorReverse(int pwm){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	total_angle = 0;
 8002804:	4913      	ldr	r1, [pc, #76]	; (8002854 <motorReverse+0x58>)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_GPIO_WritePin(GPIOA, MotorA_IN1_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	2108      	movs	r1, #8
 8002816:	4810      	ldr	r0, [pc, #64]	; (8002858 <motorReverse+0x5c>)
 8002818:	f003 f824 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorA_IN2_Pin, GPIO_PIN_SET);
 800281c:	2201      	movs	r2, #1
 800281e:	2104      	movs	r1, #4
 8002820:	480d      	ldr	r0, [pc, #52]	; (8002858 <motorReverse+0x5c>)
 8002822:	f003 f81f 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN1_Pin, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	2110      	movs	r1, #16
 800282a:	480b      	ldr	r0, [pc, #44]	; (8002858 <motorReverse+0x5c>)
 800282c:	f003 f81a 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MotorB_IN2_Pin, GPIO_PIN_SET);
 8002830:	2201      	movs	r2, #1
 8002832:	2120      	movs	r1, #32
 8002834:	4808      	ldr	r0, [pc, #32]	; (8002858 <motorReverse+0x5c>)
 8002836:	f003 f815 	bl	8005864 <HAL_GPIO_WritePin>


	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwm);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <motorReverse+0x60>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm);
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <motorReverse+0x60>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38

}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200046b8 	.word	0x200046b8
 8002858:	40020000 	.word	0x40020000
 800285c:	200005b4 	.word	0x200005b4

08002860 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, rightIR, 4096); // PC1 is right IR
 8002868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <StartDefaultTask+0x34>)
 800286e:	480a      	ldr	r0, [pc, #40]	; (8002898 <StartDefaultTask+0x38>)
 8002870:	f001 fd7a 	bl	8004368 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,  leftIR, 4096); // PC2 is left IR
 8002874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002878:	4908      	ldr	r1, [pc, #32]	; (800289c <StartDefaultTask+0x3c>)
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <StartDefaultTask+0x40>)
 800287c:	f001 fd74 	bl	8004368 <HAL_ADC_Start_DMA>
	htim1.Instance->CCR4 = 147;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <StartDefaultTask+0x44>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2293      	movs	r2, #147	; 0x93
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
	for(;;)
	{
		ultrasonic_read();
 8002888:	f7ff fa9a 	bl	8001dc0 <ultrasonic_read>
		osDelay(200);
 800288c:	20c8      	movs	r0, #200	; 0xc8
 800288e:	f007 f9e6 	bl	8009c5e <osDelay>
		ultrasonic_read();
 8002892:	e7f9      	b.n	8002888 <StartDefaultTask+0x28>
 8002894:	2000267c 	.word	0x2000267c
 8002898:	200002f0 	.word	0x200002f0
 800289c:	2000067c 	.word	0x2000067c
 80028a0:	20000338 	.word	0x20000338
 80028a4:	20000494 	.word	0x20000494

080028a8 <thirtyCMFromObstacle>:
	}
	/* USER CODE END 5 */
}
void thirtyCMFromObstacle(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	gyroInit();
 80028ac:	f7fe fc02 	bl	80010b4 <gyroInit>
	osDelay(1000);
 80028b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028b4:	f007 f9d3 	bl	8009c5e <osDelay>
	motorForward(1300); // 1500 too fast; 13th Oct 6pm
 80028b8:	f240 5014 	movw	r0, #1300	; 0x514
 80028bc:	f7ff ff6c 	bl	8002798 <motorForward>
	while(Distance > 30){
 80028c0:	e007      	b.n	80028d2 <thirtyCMFromObstacle+0x2a>
		correctDirection(0, 1);
 80028c2:	2001      	movs	r0, #1
 80028c4:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8002908 <thirtyCMFromObstacle+0x60>
 80028c8:	f7fe fb6e 	bl	8000fa8 <correctDirection>
		osDelay(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f007 f9c6 	bl	8009c5e <osDelay>
	while(Distance > 30){
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <thirtyCMFromObstacle+0x68>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b1e      	cmp	r3, #30
 80028d8:	d8f3      	bhi.n	80028c2 <thirtyCMFromObstacle+0x1a>
	}
	stopMovement();
 80028da:	f7ff fa91 	bl	8001e00 <stopMovement>
	motorReverse(1000);
 80028de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e2:	f7ff ff8b 	bl	80027fc <motorReverse>
	while(Distance < 30){
 80028e6:	e002      	b.n	80028ee <thirtyCMFromObstacle+0x46>
		osDelay(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f007 f9b8 	bl	8009c5e <osDelay>
	while(Distance < 30){
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <thirtyCMFromObstacle+0x68>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b1d      	cmp	r3, #29
 80028f4:	d9f8      	bls.n	80028e8 <thirtyCMFromObstacle+0x40>
	}
	stopMovement();
 80028f6:	f7ff fa83 	bl	8001e00 <stopMovement>
	motorDir = 0;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <thirtyCMFromObstacle+0x6c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	f3af 8000 	nop.w
	...
 8002910:	200046b5 	.word	0x200046b5
 8002914:	20004680 	.word	0x20004680

08002918 <robotCommand>:
/* USER CODE END Header_robotCommand */

int obs_flag=0;

void robotCommand(void const * argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	 *  |  13xxx			|	Turn Right for xxx angle (Backward)						 |
	 *  |--------------------------------------------------------------------------------|
	 *
	 */

	int turnDegree=0;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
	double target_angle;
	double Aint;


	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);
 8002924:	2100      	movs	r1, #0
 8002926:	48a4      	ldr	r0, [pc, #656]	; (8002bb8 <robotCommand+0x2a0>)
 8002928:	f004 fd82 	bl	8007430 <HAL_TIM_IC_Start_IT>

	for(;;){
		target_angle = 0;
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c7 2308 	strd	r2, r3, [r7, #32]
		switch(motorDir){
 8002938:	4ba0      	ldr	r3, [pc, #640]	; (8002bbc <robotCommand+0x2a4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b10      	cmp	r3, #16
 800293e:	f200 8631 	bhi.w	80035a4 <robotCommand+0xc8c>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <robotCommand+0x30>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	0800298d 	.word	0x0800298d
 800294c:	08002995 	.word	0x08002995
 8002950:	080029cf 	.word	0x080029cf
 8002954:	08002a09 	.word	0x08002a09
 8002958:	08002a43 	.word	0x08002a43
 800295c:	08002aa7 	.word	0x08002aa7
 8002960:	08002d39 	.word	0x08002d39
 8002964:	08002e65 	.word	0x08002e65
 8002968:	08002fdd 	.word	0x08002fdd
 800296c:	0800313b 	.word	0x0800313b
 8002970:	080032ad 	.word	0x080032ad
 8002974:	080033d3 	.word	0x080033d3
 8002978:	08003407 	.word	0x08003407
 800297c:	08003433 	.word	0x08003433
 8002980:	0800345f 	.word	0x0800345f
 8002984:	08003515 	.word	0x08003515
 8002988:	0800355d 	.word	0x0800355d
		case 0:
			stopMovement();
 800298c:	f7ff fa38 	bl	8001e00 <stopMovement>
			break;
 8002990:	f000 be13 	b.w	80035ba <robotCommand+0xca2>
			//				// forward left and right wheels CLEARED CHECKLIST @ left: 2650; right: 2000
			//				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1000); //left wheel was 1650
			//				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1000); //right wheel was 1400


			Aint = 0;
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9c7 2306 	strd	r2, r3, [r7, #24]

			gyroInit();
 80029a0:	f7fe fb88 	bl	80010b4 <gyroInit>
			osDelay(1000);
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	f007 f959 	bl	8009c5e <osDelay>

			turnDegree = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			moveForward("Straight", angle);
 80029b0:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <robotCommand+0x2a8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	4883      	ldr	r0, [pc, #524]	; (8002bc4 <robotCommand+0x2ac>)
 80029b8:	f7ff fa4e 	bl	8001e58 <moveForward>
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 80029bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c0:	2205      	movs	r2, #5
 80029c2:	4981      	ldr	r1, [pc, #516]	; (8002bc8 <robotCommand+0x2b0>)
 80029c4:	4881      	ldr	r0, [pc, #516]	; (8002bcc <robotCommand+0x2b4>)
 80029c6:	f006 f892 	bl	8008aee <HAL_UART_Transmit>
			break;
 80029ca:	f000 bdf6 	b.w	80035ba <robotCommand+0xca2>
		case 2:

			Aint = 0;
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 80029da:	f7fe fb6b 	bl	80010b4 <gyroInit>
			osDelay(1000);
 80029de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029e2:	f007 f93c 	bl	8009c5e <osDelay>

			//motorLeft(angle);

			motorLeft(angle);
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <robotCommand+0x2a8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fda4 	bl	8002538 <motorLeft>
			osDelay(1);
 80029f0:	2001      	movs	r0, #1
 80029f2:	f007 f934 	bl	8009c5e <osDelay>
			//				moveBackward("Straight", 10);
			//				osDelay(1);
			//				motorLeft(40);
			//				moveBackward("Straight", 10);

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 80029f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fa:	2205      	movs	r2, #5
 80029fc:	4972      	ldr	r1, [pc, #456]	; (8002bc8 <robotCommand+0x2b0>)
 80029fe:	4873      	ldr	r0, [pc, #460]	; (8002bcc <robotCommand+0x2b4>)
 8002a00:	f006 f875 	bl	8008aee <HAL_UART_Transmit>
			break;
 8002a04:	f000 bdd9 	b.w	80035ba <robotCommand+0xca2>

		case 3: // turn right

			Aint = 0;
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8002a14:	f7fe fb4e 	bl	80010b4 <gyroInit>
			osDelay(1000);
 8002a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1c:	f007 f91f 	bl	8009c5e <osDelay>

			//motorRight(angle);

			motorRight(angle);
 8002a20:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <robotCommand+0x2a8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc43 	bl	80022b0 <motorRight>
			osDelay(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f007 f917 	bl	8009c5e <osDelay>
			//				moveBackward("Straight", 20);
			//				osDelay(1);
			//				motorRight(35);
			//				moveBackward("Straight", 7);
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8002a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a34:	2205      	movs	r2, #5
 8002a36:	4964      	ldr	r1, [pc, #400]	; (8002bc8 <robotCommand+0x2b0>)
 8002a38:	4864      	ldr	r0, [pc, #400]	; (8002bcc <robotCommand+0x2b4>)
 8002a3a:	f006 f858 	bl	8008aee <HAL_UART_Transmit>
			break;
 8002a3e:	f000 bdbc 	b.w	80035ba <robotCommand+0xca2>

		case 4: // go fwd, stop 30cm from obstacle

			Aint = 0;
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8002a4e:	f7fe fb31 	bl	80010b4 <gyroInit>
			osDelay(1000);
 8002a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a56:	f007 f902 	bl	8009c5e <osDelay>

			motorForward(1300); // 1500 too fast; 13th Oct 6pm
 8002a5a:	f240 5014 	movw	r0, #1300	; 0x514
 8002a5e:	f7ff fe9b 	bl	8002798 <motorForward>
			while(Distance > 40){
 8002a62:	e007      	b.n	8002a74 <robotCommand+0x15c>
				correctDirection(0, 1);
 8002a64:	2001      	movs	r0, #1
 8002a66:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8002bb0 <robotCommand+0x298>
 8002a6a:	f7fe fa9d 	bl	8000fa8 <correctDirection>
				osDelay(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f007 f8f5 	bl	8009c5e <osDelay>
			while(Distance > 40){
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <robotCommand+0x2b8>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b28      	cmp	r3, #40	; 0x28
 8002a7a:	d8f3      	bhi.n	8002a64 <robotCommand+0x14c>
			}
			stopMovement();
 8002a7c:	f7ff f9c0 	bl	8001e00 <stopMovement>


			motorReverse(1300);
 8002a80:	f240 5014 	movw	r0, #1300	; 0x514
 8002a84:	f7ff feba 	bl	80027fc <motorReverse>
			while(Distance < 40){
 8002a88:	e002      	b.n	8002a90 <robotCommand+0x178>
				osDelay(1);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f007 f8e7 	bl	8009c5e <osDelay>
			while(Distance < 40){
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <robotCommand+0x2b8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b27      	cmp	r3, #39	; 0x27
 8002a96:	d9f8      	bls.n	8002a8a <robotCommand+0x172>
			}
			stopMovement();
 8002a98:	f7ff f9b2 	bl	8001e00 <stopMovement>
			motorDir = 0;
 8002a9c:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <robotCommand+0x2a4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
			//HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);

			break;
 8002aa2:	f000 bd8a 	b.w	80035ba <robotCommand+0xca2>

		case 5: // go around the first obstacle from the left side
			if(obs_flag==0){
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <robotCommand+0x2bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8096 	bne.w	8002bdc <robotCommand+0x2c4>
				Aint = 0;
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002abc:	f7fe fafa 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac4:	f007 f8cb 	bl	8009c5e <osDelay>

				motorLeft(45);
 8002ac8:	202d      	movs	r0, #45	; 0x2d
 8002aca:	f7ff fd35 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002ace:	4942      	ldr	r1, [pc, #264]	; (8002bd8 <robotCommand+0x2c0>)
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c1 2300 	strd	r2, r3, [r1]
				moveForward("Straight", 15);
 8002adc:	210f      	movs	r1, #15
 8002ade:	4839      	ldr	r0, [pc, #228]	; (8002bc4 <robotCommand+0x2ac>)
 8002ae0:	f7ff f9ba 	bl	8001e58 <moveForward>
				osDelay(500);
 8002ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ae8:	f007 f8b9 	bl	8009c5e <osDelay>

				motorRight(45);
 8002aec:	202d      	movs	r0, #45	; 0x2d
 8002aee:	f7ff fbdf 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002af2:	4939      	ldr	r1, [pc, #228]	; (8002bd8 <robotCommand+0x2c0>)
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9c1 2300 	strd	r2, r3, [r1]

				motorRight(45);
 8002b00:	202d      	movs	r0, #45	; 0x2d
 8002b02:	f7ff fbd5 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002b06:	4934      	ldr	r1, [pc, #208]	; (8002bd8 <robotCommand+0x2c0>)
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 15);
 8002b14:	210f      	movs	r1, #15
 8002b16:	482b      	ldr	r0, [pc, #172]	; (8002bc4 <robotCommand+0x2ac>)
 8002b18:	f7ff f99e 	bl	8001e58 <moveForward>

				motorLeft(45);
 8002b1c:	202d      	movs	r0, #45	; 0x2d
 8002b1e:	f7ff fd0b 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002b22:	492d      	ldr	r1, [pc, #180]	; (8002bd8 <robotCommand+0x2c0>)
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9c1 2300 	strd	r2, r3, [r1]

				HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8002b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b34:	2205      	movs	r2, #5
 8002b36:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <robotCommand+0x2b0>)
 8002b38:	4824      	ldr	r0, [pc, #144]	; (8002bcc <robotCommand+0x2b4>)
 8002b3a:	f005 ffd8 	bl	8008aee <HAL_UART_Transmit>
				obs_flag=1;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <robotCommand+0x2bc>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
				osDelay(1000);
 8002b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b48:	f007 f889 	bl	8009c5e <osDelay>

				Aint = 0;
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002b58:	f7fe faac 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b60:	f007 f87d 	bl	8009c5e <osDelay>

				motorForward(1300); // 1500 too fast; 13th Oct 6pm
 8002b64:	f240 5014 	movw	r0, #1300	; 0x514
 8002b68:	f7ff fe16 	bl	8002798 <motorForward>
				while(Distance > 40){
 8002b6c:	e007      	b.n	8002b7e <robotCommand+0x266>
					correctDirection(0, 1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8002bb0 <robotCommand+0x298>
 8002b74:	f7fe fa18 	bl	8000fa8 <correctDirection>
					osDelay(1);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f007 f870 	bl	8009c5e <osDelay>
				while(Distance > 40){
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <robotCommand+0x2b8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b28      	cmp	r3, #40	; 0x28
 8002b84:	d8f3      	bhi.n	8002b6e <robotCommand+0x256>
				}
				stopMovement();
 8002b86:	f7ff f93b 	bl	8001e00 <stopMovement>


				motorReverse(1300);
 8002b8a:	f240 5014 	movw	r0, #1300	; 0x514
 8002b8e:	f7ff fe35 	bl	80027fc <motorReverse>
				while(Distance < 40){
 8002b92:	e002      	b.n	8002b9a <robotCommand+0x282>
					osDelay(1);
 8002b94:	2001      	movs	r0, #1
 8002b96:	f007 f862 	bl	8009c5e <osDelay>
				while(Distance < 40){
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <robotCommand+0x2b8>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b27      	cmp	r3, #39	; 0x27
 8002ba0:	d9f8      	bls.n	8002b94 <robotCommand+0x27c>
				}
				stopMovement();
 8002ba2:	f7ff f92d 	bl	8001e00 <stopMovement>
				motorDir = 0;
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <robotCommand+0x2a4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

				break;
 8002bac:	f000 bd05 	b.w	80035ba <robotCommand+0xca2>
	...
 8002bb8:	2000056c 	.word	0x2000056c
 8002bbc:	20004680 	.word	0x20004680
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	0800c1b8 	.word	0x0800c1b8
 8002bc8:	0800c1a0 	.word	0x0800c1a0
 8002bcc:	200005fc 	.word	0x200005fc
 8002bd0:	200046b5 	.word	0x200046b5
 8002bd4:	200046c0 	.word	0x200046c0
 8002bd8:	200046b8 	.word	0x200046b8
			}
			else{
				//Go left around second obstacle
				Aint = 0;
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002be8:	f7fe fa64 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf0:	f007 f835 	bl	8009c5e <osDelay>

				motorLeft(90);
 8002bf4:	205a      	movs	r0, #90	; 0x5a
 8002bf6:	f7ff fc9f 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002bfa:	49a8      	ldr	r1, [pc, #672]	; (8002e9c <robotCommand+0x584>)
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 5);
 8002c08:	2105      	movs	r1, #5
 8002c0a:	48a5      	ldr	r0, [pc, #660]	; (8002ea0 <robotCommand+0x588>)
 8002c0c:	f7ff f924 	bl	8001e58 <moveForward>
				stopMovement();
 8002c10:	f7ff f8f6 	bl	8001e00 <stopMovement>

				motorRight(90);
 8002c14:	205a      	movs	r0, #90	; 0x5a
 8002c16:	f7ff fb4b 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002c1a:	49a0      	ldr	r1, [pc, #640]	; (8002e9c <robotCommand+0x584>)
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 10);
 8002c28:	210a      	movs	r1, #10
 8002c2a:	489d      	ldr	r0, [pc, #628]	; (8002ea0 <robotCommand+0x588>)
 8002c2c:	f7ff f914 	bl	8001e58 <moveForward>

				motorRight(90);
 8002c30:	205a      	movs	r0, #90	; 0x5a
 8002c32:	f7ff fb3d 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002c36:	4999      	ldr	r1, [pc, #612]	; (8002e9c <robotCommand+0x584>)
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9c1 2300 	strd	r2, r3, [r1]
				stopMovement();
 8002c44:	f7ff f8dc 	bl	8001e00 <stopMovement>
				moveForward("Straight", 35);
 8002c48:	2123      	movs	r1, #35	; 0x23
 8002c4a:	4895      	ldr	r0, [pc, #596]	; (8002ea0 <robotCommand+0x588>)
 8002c4c:	f7ff f904 	bl	8001e58 <moveForward>
				motorRight(97);
 8002c50:	2061      	movs	r0, #97	; 0x61
 8002c52:	f7ff fb2d 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002c56:	4991      	ldr	r1, [pc, #580]	; (8002e9c <robotCommand+0x584>)
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9c1 2300 	strd	r2, r3, [r1]
				//Robot at the edge of second obstacle


				motorRight(90);
 8002c64:	205a      	movs	r0, #90	; 0x5a
 8002c66:	f7ff fb23 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002c6a:	498c      	ldr	r1, [pc, #560]	; (8002e9c <robotCommand+0x584>)
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9c1 2300 	strd	r2, r3, [r1]
				moveForward("Straight", 5);
 8002c78:	2105      	movs	r1, #5
 8002c7a:	4889      	ldr	r0, [pc, #548]	; (8002ea0 <robotCommand+0x588>)
 8002c7c:	f7ff f8ec 	bl	8001e58 <moveForward>
				stopMovement();
 8002c80:	f7ff f8be 	bl	8001e00 <stopMovement>
				motorLeft(90);
 8002c84:	205a      	movs	r0, #90	; 0x5a
 8002c86:	f7ff fc57 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002c8a:	4984      	ldr	r1, [pc, #528]	; (8002e9c <robotCommand+0x584>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c1 2300 	strd	r2, r3, [r1]
				//Robot at the center of obstacle 2
				thirtyCMFromObstacle();
 8002c98:	f7ff fe06 	bl	80028a8 <thirtyCMFromObstacle>
				//Robot behind obstacle 1
				Aint = 0;
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002ca8:	f7fe fa04 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb0:	f006 ffd5 	bl	8009c5e <osDelay>

				motorLeft(45);
 8002cb4:	202d      	movs	r0, #45	; 0x2d
 8002cb6:	f7ff fc3f 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002cba:	4978      	ldr	r1, [pc, #480]	; (8002e9c <robotCommand+0x584>)
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9c1 2300 	strd	r2, r3, [r1]
				moveForward("Straight", 15);
 8002cc8:	210f      	movs	r1, #15
 8002cca:	4875      	ldr	r0, [pc, #468]	; (8002ea0 <robotCommand+0x588>)
 8002ccc:	f7ff f8c4 	bl	8001e58 <moveForward>

				motorRight(45);
 8002cd0:	202d      	movs	r0, #45	; 0x2d
 8002cd2:	f7ff faed 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002cd6:	4971      	ldr	r1, [pc, #452]	; (8002e9c <robotCommand+0x584>)
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c1 2300 	strd	r2, r3, [r1]

				motorRight(45);
 8002ce4:	202d      	movs	r0, #45	; 0x2d
 8002ce6:	f7ff fae3 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002cea:	496c      	ldr	r1, [pc, #432]	; (8002e9c <robotCommand+0x584>)
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 15);
 8002cf8:	210f      	movs	r1, #15
 8002cfa:	4869      	ldr	r0, [pc, #420]	; (8002ea0 <robotCommand+0x588>)
 8002cfc:	f7ff f8ac 	bl	8001e58 <moveForward>

				motorLeft(45);
 8002d00:	202d      	movs	r0, #45	; 0x2d
 8002d02:	f7ff fc19 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002d06:	4965      	ldr	r1, [pc, #404]	; (8002e9c <robotCommand+0x584>)
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9c1 2300 	strd	r2, r3, [r1]

				HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8002d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d18:	2205      	movs	r2, #5
 8002d1a:	4962      	ldr	r1, [pc, #392]	; (8002ea4 <robotCommand+0x58c>)
 8002d1c:	4862      	ldr	r0, [pc, #392]	; (8002ea8 <robotCommand+0x590>)
 8002d1e:	f005 fee6 	bl	8008aee <HAL_UART_Transmit>
				obs_flag=1;
 8002d22:	4b62      	ldr	r3, [pc, #392]	; (8002eac <robotCommand+0x594>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
				osDelay(1000);
 8002d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d2c:	f006 ff97 	bl	8009c5e <osDelay>
				thirtyCMFromObstacle();
 8002d30:	f7ff fdba 	bl	80028a8 <thirtyCMFromObstacle>
				//Robot at obstacle 1
			}
			break;
 8002d34:	f000 bc41 	b.w	80035ba <robotCommand+0xca2>

		case 6: // go around the first obstacle from the right side
			if(obs_flag==0){
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <robotCommand+0x594>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d145      	bne.n	8002dcc <robotCommand+0x4b4>
				Aint = 0;
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002d4c:	f7fe f9b2 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d54:	f006 ff83 	bl	8009c5e <osDelay>

				motorRight(45);
 8002d58:	202d      	movs	r0, #45	; 0x2d
 8002d5a:	f7ff faa9 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002d5e:	494f      	ldr	r1, [pc, #316]	; (8002e9c <robotCommand+0x584>)
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9c1 2300 	strd	r2, r3, [r1]
				moveForward("Straight", 15);
 8002d6c:	210f      	movs	r1, #15
 8002d6e:	484c      	ldr	r0, [pc, #304]	; (8002ea0 <robotCommand+0x588>)
 8002d70:	f7ff f872 	bl	8001e58 <moveForward>

				motorLeft(45);
 8002d74:	202d      	movs	r0, #45	; 0x2d
 8002d76:	f7ff fbdf 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002d7a:	4948      	ldr	r1, [pc, #288]	; (8002e9c <robotCommand+0x584>)
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9c1 2300 	strd	r2, r3, [r1]

				//moveForward("Straight", 10);

				motorLeft(45);
 8002d88:	202d      	movs	r0, #45	; 0x2d
 8002d8a:	f7ff fbd5 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002d8e:	4943      	ldr	r1, [pc, #268]	; (8002e9c <robotCommand+0x584>)
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9c1 2300 	strd	r2, r3, [r1]
				moveForward("Straight", 15);
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	4840      	ldr	r0, [pc, #256]	; (8002ea0 <robotCommand+0x588>)
 8002da0:	f7ff f85a 	bl	8001e58 <moveForward>

				motorRight(45);
 8002da4:	202d      	movs	r0, #45	; 0x2d
 8002da6:	f7ff fa83 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002daa:	493c      	ldr	r1, [pc, #240]	; (8002e9c <robotCommand+0x584>)
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c1 2300 	strd	r2, r3, [r1]
				obs_flag=1;
 8002db8:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <robotCommand+0x594>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
				osDelay(1000);
 8002dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc2:	f006 ff4c 	bl	8009c5e <osDelay>

				thirtyCMFromObstacle();
 8002dc6:	f7ff fd6f 	bl	80028a8 <thirtyCMFromObstacle>
				break;
 8002dca:	e3f6      	b.n	80035ba <robotCommand+0xca2>
			}
			else if(obs_flag==1){
 8002dcc:	4b37      	ldr	r3, [pc, #220]	; (8002eac <robotCommand+0x594>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	f040 83f1 	bne.w	80035b8 <robotCommand+0xca0>
				Aint = 0;
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyroInit();
 8002de2:	f7fe f967 	bl	80010b4 <gyroInit>
				osDelay(1000);
 8002de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dea:	f006 ff38 	bl	8009c5e <osDelay>

				motorRight(90);
 8002dee:	205a      	movs	r0, #90	; 0x5a
 8002df0:	f7ff fa5e 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002df4:	4929      	ldr	r1, [pc, #164]	; (8002e9c <robotCommand+0x584>)
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 25);
 8002e02:	2119      	movs	r1, #25
 8002e04:	4826      	ldr	r0, [pc, #152]	; (8002ea0 <robotCommand+0x588>)
 8002e06:	f7ff f827 	bl	8001e58 <moveForward>
				stopMovement();
 8002e0a:	f7fe fff9 	bl	8001e00 <stopMovement>

				motorLeft(90);
 8002e0e:	205a      	movs	r0, #90	; 0x5a
 8002e10:	f7ff fb92 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002e14:	4921      	ldr	r1, [pc, #132]	; (8002e9c <robotCommand+0x584>)
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9c1 2300 	strd	r2, r3, [r1]

				moveForward("Straight", 10);
 8002e22:	210a      	movs	r1, #10
 8002e24:	481e      	ldr	r0, [pc, #120]	; (8002ea0 <robotCommand+0x588>)
 8002e26:	f7ff f817 	bl	8001e58 <moveForward>

				motorLeft(90);
 8002e2a:	205a      	movs	r0, #90	; 0x5a
 8002e2c:	f7ff fb84 	bl	8002538 <motorLeft>
				total_angle = 0;
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <robotCommand+0x584>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
				stopMovement();
 8002e3e:	f7fe ffdf 	bl	8001e00 <stopMovement>
				moveForward("Straight", 55);
 8002e42:	2137      	movs	r1, #55	; 0x37
 8002e44:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <robotCommand+0x588>)
 8002e46:	f7ff f807 	bl	8001e58 <moveForward>
				motorRight(97);
 8002e4a:	2061      	movs	r0, #97	; 0x61
 8002e4c:	f7ff fa30 	bl	80022b0 <motorRight>
				total_angle = 0;
 8002e50:	4912      	ldr	r1, [pc, #72]	; (8002e9c <robotCommand+0x584>)
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9c1 2300 	strd	r2, r3, [r1]
				//Robot at the edge of second obstacle
				thirtyCMFromObstacle();
 8002e5e:	f7ff fd23 	bl	80028a8 <thirtyCMFromObstacle>
				//Should be at the carpark
			}

			break;
 8002e62:	e3a9      	b.n	80035b8 <robotCommand+0xca0>

		case 7: // turn left around the second obstacle and move to edge

			Aint = 0;
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8002e70:	f7fe f920 	bl	80010b4 <gyroInit>
			osDelay(1000);
 8002e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e78:	f006 fef1 	bl	8009c5e <osDelay>

			motorLeft(90);
 8002e7c:	205a      	movs	r0, #90	; 0x5a
 8002e7e:	f7ff fb5b 	bl	8002538 <motorLeft>
			total_angle = 0;
 8002e82:	4906      	ldr	r1, [pc, #24]	; (8002e9c <robotCommand+0x584>)
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9c1 2300 	strd	r2, r3, [r1]

			motorForward(1000);
 8002e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e94:	f7ff fc80 	bl	8002798 <motorForward>
			// adjust distance value using formula a*1/IR + b
			while(37411*(1/(double)rightIR[0]) - 8.57 < 60){
 8002e98:	e012      	b.n	8002ec0 <robotCommand+0x5a8>
 8002e9a:	bf00      	nop
 8002e9c:	200046b8 	.word	0x200046b8
 8002ea0:	0800c1b8 	.word	0x0800c1b8
 8002ea4:	0800c1a0 	.word	0x0800c1a0
 8002ea8:	200005fc 	.word	0x200005fc
 8002eac:	200046c0 	.word	0x200046c0
				correctDirection(0, 1);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	ed9f 0bad 	vldr	d0, [pc, #692]	; 8003168 <robotCommand+0x850>
 8002eb6:	f7fe f877 	bl	8000fa8 <correctDirection>
				osDelay(1);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f006 fecf 	bl	8009c5e <osDelay>
			while(37411*(1/(double)rightIR[0]) - 8.57 < 60){
 8002ec0:	4bb3      	ldr	r3, [pc, #716]	; (8003190 <robotCommand+0x878>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb25 	bl	8000514 <__aeabi_ui2d>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	49b0      	ldr	r1, [pc, #704]	; (8003194 <robotCommand+0x87c>)
 8002ed4:	f7fd fcc2 	bl	800085c <__aeabi_ddiv>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	a3a3      	add	r3, pc, #652	; (adr r3, 8003170 <robotCommand+0x858>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fb8f 	bl	8000608 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003178 <robotCommand+0x860>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd f9ce 	bl	8000298 <__aeabi_dsub>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4ba3      	ldr	r3, [pc, #652]	; (8003198 <robotCommand+0x880>)
 8002f0a:	f7fd fdef 	bl	8000aec <__aeabi_dcmplt>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1cd      	bne.n	8002eb0 <robotCommand+0x598>
			}
			stopMovement();
 8002f14:	f7fe ff74 	bl	8001e00 <stopMovement>

			motorRight(90);
 8002f18:	205a      	movs	r0, #90	; 0x5a
 8002f1a:	f7ff f9c9 	bl	80022b0 <motorRight>
			total_angle = 0;
 8002f1e:	499f      	ldr	r1, [pc, #636]	; (800319c <robotCommand+0x884>)
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9c1 2300 	strd	r2, r3, [r1]

			moveForward("Straight", 10);
 8002f2c:	210a      	movs	r1, #10
 8002f2e:	489c      	ldr	r0, [pc, #624]	; (80031a0 <robotCommand+0x888>)
 8002f30:	f7fe ff92 	bl	8001e58 <moveForward>

			motorRight(90);
 8002f34:	205a      	movs	r0, #90	; 0x5a
 8002f36:	f7ff f9bb 	bl	80022b0 <motorRight>
			total_angle = 0;
 8002f3a:	4998      	ldr	r1, [pc, #608]	; (800319c <robotCommand+0x884>)
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9c1 2300 	strd	r2, r3, [r1]

			motorForward(1000);
 8002f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f4c:	f7ff fc24 	bl	8002798 <motorForward>
			while(37411*(1/(double)rightIR[0]) - 8.57 < 60){
 8002f50:	e002      	b.n	8002f58 <robotCommand+0x640>
				osDelay(1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f006 fe83 	bl	8009c5e <osDelay>
			while(37411*(1/(double)rightIR[0]) - 8.57 < 60){
 8002f58:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <robotCommand+0x878>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fad9 	bl	8000514 <__aeabi_ui2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	498a      	ldr	r1, [pc, #552]	; (8003194 <robotCommand+0x87c>)
 8002f6c:	f7fd fc76 	bl	800085c <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	a37d      	add	r3, pc, #500	; (adr r3, 8003170 <robotCommand+0x858>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd fb43 	bl	8000608 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	a37b      	add	r3, pc, #492	; (adr r3, 8003178 <robotCommand+0x860>)
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f7fd f982 	bl	8000298 <__aeabi_dsub>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	4b7d      	ldr	r3, [pc, #500]	; (8003198 <robotCommand+0x880>)
 8002fa2:	f7fd fda3 	bl	8000aec <__aeabi_dcmplt>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1d2      	bne.n	8002f52 <robotCommand+0x63a>
			}
			stopMovement();
 8002fac:	f7fe ff28 	bl	8001e00 <stopMovement>

			moveForward("Straight", 10);
 8002fb0:	210a      	movs	r1, #10
 8002fb2:	487b      	ldr	r0, [pc, #492]	; (80031a0 <robotCommand+0x888>)
 8002fb4:	f7fe ff50 	bl	8001e58 <moveForward>

			motorRight(97);
 8002fb8:	2061      	movs	r0, #97	; 0x61
 8002fba:	f7ff f979 	bl	80022b0 <motorRight>
			total_angle = 0;
 8002fbe:	4977      	ldr	r1, [pc, #476]	; (800319c <robotCommand+0x884>)
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8002fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	4974      	ldr	r1, [pc, #464]	; (80031a4 <robotCommand+0x88c>)
 8002fd4:	4874      	ldr	r0, [pc, #464]	; (80031a8 <robotCommand+0x890>)
 8002fd6:	f005 fd8a 	bl	8008aee <HAL_UART_Transmit>

			break;
 8002fda:	e2ee      	b.n	80035ba <robotCommand+0xca2>

		case 8: // turn right around the second obstacle and move to edge

			Aint = 0;
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8002fe8:	f7fe f864 	bl	80010b4 <gyroInit>
			osDelay(1000);
 8002fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ff0:	f006 fe35 	bl	8009c5e <osDelay>

			motorRight(90);
 8002ff4:	205a      	movs	r0, #90	; 0x5a
 8002ff6:	f7ff f95b 	bl	80022b0 <motorRight>
			motorForward(1000);
 8002ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ffe:	f7ff fbcb 	bl	8002798 <motorForward>
			while(41826*(1/(double)leftIR[0]) - 10.03 < 60){
 8003002:	e007      	b.n	8003014 <robotCommand+0x6fc>
				correctDirection(0, 1);
 8003004:	2001      	movs	r0, #1
 8003006:	ed9f 0b58 	vldr	d0, [pc, #352]	; 8003168 <robotCommand+0x850>
 800300a:	f7fd ffcd 	bl	8000fa8 <correctDirection>
				osDelay(1);
 800300e:	2001      	movs	r0, #1
 8003010:	f006 fe25 	bl	8009c5e <osDelay>
			while(41826*(1/(double)leftIR[0]) - 10.03 < 60){
 8003014:	4b65      	ldr	r3, [pc, #404]	; (80031ac <robotCommand+0x894>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa7b 	bl	8000514 <__aeabi_ui2d>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	495b      	ldr	r1, [pc, #364]	; (8003194 <robotCommand+0x87c>)
 8003028:	f7fd fc18 	bl	800085c <__aeabi_ddiv>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	a352      	add	r3, pc, #328	; (adr r3, 8003180 <robotCommand+0x868>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd fae5 	bl	8000608 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	a350      	add	r3, pc, #320	; (adr r3, 8003188 <robotCommand+0x870>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd f924 	bl	8000298 <__aeabi_dsub>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <robotCommand+0x880>)
 800305e:	f7fd fd45 	bl	8000aec <__aeabi_dcmplt>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1cd      	bne.n	8003004 <robotCommand+0x6ec>
			}

			stopMovement();
 8003068:	f7fe feca 	bl	8001e00 <stopMovement>
			motorLeft(90);
 800306c:	205a      	movs	r0, #90	; 0x5a
 800306e:	f7ff fa63 	bl	8002538 <motorLeft>
			total_angle = 0;
 8003072:	494a      	ldr	r1, [pc, #296]	; (800319c <robotCommand+0x884>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9c1 2300 	strd	r2, r3, [r1]

			moveForward("Straight", 10);
 8003080:	210a      	movs	r1, #10
 8003082:	4847      	ldr	r0, [pc, #284]	; (80031a0 <robotCommand+0x888>)
 8003084:	f7fe fee8 	bl	8001e58 <moveForward>

			motorLeft(88); // 90 at 14 oct 235am; too much angle
 8003088:	2058      	movs	r0, #88	; 0x58
 800308a:	f7ff fa55 	bl	8002538 <motorLeft>
			total_angle = 0;
 800308e:	4943      	ldr	r1, [pc, #268]	; (800319c <robotCommand+0x884>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9c1 2300 	strd	r2, r3, [r1]


			motorForward(1000);
 800309c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a0:	f7ff fb7a 	bl	8002798 <motorForward>
			while(41826*(1/(double)leftIR[0]) - 10.03 < 60){
 80030a4:	e007      	b.n	80030b6 <robotCommand+0x79e>
				correctDirection(0, 1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8003168 <robotCommand+0x850>
 80030ac:	f7fd ff7c 	bl	8000fa8 <correctDirection>
				osDelay(1);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f006 fdd4 	bl	8009c5e <osDelay>
			while(41826*(1/(double)leftIR[0]) - 10.03 < 60){
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <robotCommand+0x894>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa2a 	bl	8000514 <__aeabi_ui2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	4932      	ldr	r1, [pc, #200]	; (8003194 <robotCommand+0x87c>)
 80030ca:	f7fd fbc7 	bl	800085c <__aeabi_ddiv>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	a32a      	add	r3, pc, #168	; (adr r3, 8003180 <robotCommand+0x868>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd fa94 	bl	8000608 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	a327      	add	r3, pc, #156	; (adr r3, 8003188 <robotCommand+0x870>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f7fd f8d3 	bl	8000298 <__aeabi_dsub>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <robotCommand+0x880>)
 8003100:	f7fd fcf4 	bl	8000aec <__aeabi_dcmplt>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1cd      	bne.n	80030a6 <robotCommand+0x78e>
			}
			stopMovement();
 800310a:	f7fe fe79 	bl	8001e00 <stopMovement>

			moveForward("Straight", 10);
 800310e:	210a      	movs	r1, #10
 8003110:	4823      	ldr	r0, [pc, #140]	; (80031a0 <robotCommand+0x888>)
 8003112:	f7fe fea1 	bl	8001e58 <moveForward>

			motorLeft(90);
 8003116:	205a      	movs	r0, #90	; 0x5a
 8003118:	f7ff fa0e 	bl	8002538 <motorLeft>
			total_angle = 0;
 800311c:	491f      	ldr	r1, [pc, #124]	; (800319c <robotCommand+0x884>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 800312a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312e:	2205      	movs	r2, #5
 8003130:	491c      	ldr	r1, [pc, #112]	; (80031a4 <robotCommand+0x88c>)
 8003132:	481d      	ldr	r0, [pc, #116]	; (80031a8 <robotCommand+0x890>)
 8003134:	f005 fcdb 	bl	8008aee <HAL_UART_Transmit>

			break;
 8003138:	e23f      	b.n	80035ba <robotCommand+0xca2>

		case 9: // go fwd until detecting 1st obstacle on the right

			Aint = 0;
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8003146:	f7fd ffb5 	bl	80010b4 <gyroInit>
			osDelay(1000);
 800314a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800314e:	f006 fd86 	bl	8009c5e <osDelay>

			moveForward("Straight", 30);
 8003152:	211e      	movs	r1, #30
 8003154:	4812      	ldr	r0, [pc, #72]	; (80031a0 <robotCommand+0x888>)
 8003156:	f7fe fe7f 	bl	8001e58 <moveForward>

			motorForward(1000);
 800315a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800315e:	f7ff fb1b 	bl	8002798 <motorForward>
			while(37411*(1/(double)rightIR[0]) - 8.57 > 60){
 8003162:	e02d      	b.n	80031c0 <robotCommand+0x8a8>
 8003164:	f3af 8000 	nop.w
	...
 8003174:	40e24460 	.word	0x40e24460
 8003178:	0a3d70a4 	.word	0x0a3d70a4
 800317c:	402123d7 	.word	0x402123d7
 8003180:	00000000 	.word	0x00000000
 8003184:	40e46c40 	.word	0x40e46c40
 8003188:	28f5c28f 	.word	0x28f5c28f
 800318c:	40240f5c 	.word	0x40240f5c
 8003190:	2000267c 	.word	0x2000267c
 8003194:	3ff00000 	.word	0x3ff00000
 8003198:	404e0000 	.word	0x404e0000
 800319c:	200046b8 	.word	0x200046b8
 80031a0:	0800c1b8 	.word	0x0800c1b8
 80031a4:	0800c1a0 	.word	0x0800c1a0
 80031a8:	200005fc 	.word	0x200005fc
 80031ac:	2000067c 	.word	0x2000067c
				correctDirection(0, 1);
 80031b0:	2001      	movs	r0, #1
 80031b2:	ed9f 0bc1 	vldr	d0, [pc, #772]	; 80034b8 <robotCommand+0xba0>
 80031b6:	f7fd fef7 	bl	8000fa8 <correctDirection>
				osDelay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f006 fd4f 	bl	8009c5e <osDelay>
			while(37411*(1/(double)rightIR[0]) - 8.57 > 60){
 80031c0:	4bc7      	ldr	r3, [pc, #796]	; (80034e0 <robotCommand+0xbc8>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f9a5 	bl	8000514 <__aeabi_ui2d>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	49c4      	ldr	r1, [pc, #784]	; (80034e4 <robotCommand+0xbcc>)
 80031d4:	f7fd fb42 	bl	800085c <__aeabi_ddiv>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	a3b7      	add	r3, pc, #732	; (adr r3, 80034c0 <robotCommand+0xba8>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f7fd fa0f 	bl	8000608 <__aeabi_dmul>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	a3b5      	add	r3, pc, #724	; (adr r3, 80034c8 <robotCommand+0xbb0>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f7fd f84e 	bl	8000298 <__aeabi_dsub>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	4bb7      	ldr	r3, [pc, #732]	; (80034e8 <robotCommand+0xbd0>)
 800320a:	f7fd fc8d 	bl	8000b28 <__aeabi_dcmpgt>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1cd      	bne.n	80031b0 <robotCommand+0x898>
			}
			stopMovement();
 8003214:	f7fe fdf4 	bl	8001e00 <stopMovement>

			double rightDist = 37411*(1/(double)rightIR[0]) - 8.57;
 8003218:	4bb1      	ldr	r3, [pc, #708]	; (80034e0 <robotCommand+0xbc8>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f979 	bl	8000514 <__aeabi_ui2d>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	49ae      	ldr	r1, [pc, #696]	; (80034e4 <robotCommand+0xbcc>)
 800322c:	f7fd fb16 	bl	800085c <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	a3a1      	add	r3, pc, #644	; (adr r3, 80034c0 <robotCommand+0xba8>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd f9e3 	bl	8000608 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	a39f      	add	r3, pc, #636	; (adr r3, 80034c8 <robotCommand+0xbb0>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f822 	bl	8000298 <__aeabi_dsub>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	e9c7 2302 	strd	r2, r3, [r7, #8]

			moveForward("Straight", 25);
 800325c:	2119      	movs	r1, #25
 800325e:	48a3      	ldr	r0, [pc, #652]	; (80034ec <robotCommand+0xbd4>)
 8003260:	f7fe fdfa 	bl	8001e58 <moveForward>

			motorRight(90);
 8003264:	205a      	movs	r0, #90	; 0x5a
 8003266:	f7ff f823 	bl	80022b0 <motorRight>
			total_angle = 0;
 800326a:	49a1      	ldr	r1, [pc, #644]	; (80034f0 <robotCommand+0xbd8>)
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9c1 2300 	strd	r2, r3, [r1]

			motorForward(rightDist);
 8003278:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800327c:	f7fd fc5e 	bl	8000b3c <__aeabi_d2iz>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fa88 	bl	8002798 <motorForward>

			motorLeft(90);
 8003288:	205a      	movs	r0, #90	; 0x5a
 800328a:	f7ff f955 	bl	8002538 <motorLeft>
			total_angle = 0;
 800328e:	4998      	ldr	r1, [pc, #608]	; (80034f0 <robotCommand+0xbd8>)
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 800329c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a0:	2205      	movs	r2, #5
 80032a2:	4994      	ldr	r1, [pc, #592]	; (80034f4 <robotCommand+0xbdc>)
 80032a4:	4894      	ldr	r0, [pc, #592]	; (80034f8 <robotCommand+0xbe0>)
 80032a6:	f005 fc22 	bl	8008aee <HAL_UART_Transmit>

			break;
 80032aa:	e186      	b.n	80035ba <robotCommand+0xca2>

		case 10: // go fwd until detecting 1st obstacle on the left

			Aint = 0;
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 80032b8:	f7fd fefc 	bl	80010b4 <gyroInit>
			osDelay(1000);
 80032bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c0:	f006 fccd 	bl	8009c5e <osDelay>

			moveForward("Straight", 30);
 80032c4:	211e      	movs	r1, #30
 80032c6:	4889      	ldr	r0, [pc, #548]	; (80034ec <robotCommand+0xbd4>)
 80032c8:	f7fe fdc6 	bl	8001e58 <moveForward>

			motorForward(1000);
 80032cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032d0:	f7ff fa62 	bl	8002798 <motorForward>
			while(41826*(1/(double)leftIR[0]) - 10.03 > 60){
 80032d4:	e007      	b.n	80032e6 <robotCommand+0x9ce>
				correctDirection(0, 1);
 80032d6:	2001      	movs	r0, #1
 80032d8:	ed9f 0b77 	vldr	d0, [pc, #476]	; 80034b8 <robotCommand+0xba0>
 80032dc:	f7fd fe64 	bl	8000fa8 <correctDirection>
				osDelay(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f006 fcbc 	bl	8009c5e <osDelay>
			while(41826*(1/(double)leftIR[0]) - 10.03 > 60){
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <robotCommand+0xbe4>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f912 	bl	8000514 <__aeabi_ui2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	497a      	ldr	r1, [pc, #488]	; (80034e4 <robotCommand+0xbcc>)
 80032fa:	f7fd faaf 	bl	800085c <__aeabi_ddiv>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	a372      	add	r3, pc, #456	; (adr r3, 80034d0 <robotCommand+0xbb8>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fd f97c 	bl	8000608 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	a36f      	add	r3, pc, #444	; (adr r3, 80034d8 <robotCommand+0xbc0>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fc ffbb 	bl	8000298 <__aeabi_dsub>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <robotCommand+0xbd0>)
 8003330:	f7fd fbfa 	bl	8000b28 <__aeabi_dcmpgt>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1cd      	bne.n	80032d6 <robotCommand+0x9be>
			}
			stopMovement();
 800333a:	f7fe fd61 	bl	8001e00 <stopMovement>

			double leftDist = 41826*(1/(double)leftIR[0]) - 10.03;
 800333e:	4b6f      	ldr	r3, [pc, #444]	; (80034fc <robotCommand+0xbe4>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd f8e6 	bl	8000514 <__aeabi_ui2d>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	f04f 0000 	mov.w	r0, #0
 8003350:	4964      	ldr	r1, [pc, #400]	; (80034e4 <robotCommand+0xbcc>)
 8003352:	f7fd fa83 	bl	800085c <__aeabi_ddiv>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	a35c      	add	r3, pc, #368	; (adr r3, 80034d0 <robotCommand+0xbb8>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f950 	bl	8000608 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	a359      	add	r3, pc, #356	; (adr r3, 80034d8 <robotCommand+0xbc0>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fc ff8f 	bl	8000298 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			moveForward("Straight", 20);
 8003382:	2114      	movs	r1, #20
 8003384:	4859      	ldr	r0, [pc, #356]	; (80034ec <robotCommand+0xbd4>)
 8003386:	f7fe fd67 	bl	8001e58 <moveForward>

			motorLeft(90);
 800338a:	205a      	movs	r0, #90	; 0x5a
 800338c:	f7ff f8d4 	bl	8002538 <motorLeft>
			total_angle = 0;
 8003390:	4957      	ldr	r1, [pc, #348]	; (80034f0 <robotCommand+0xbd8>)
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9c1 2300 	strd	r2, r3, [r1]

			motorForward(leftDist);
 800339e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a2:	f7fd fbcb 	bl	8000b3c <__aeabi_d2iz>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f9f5 	bl	8002798 <motorForward>

			motorRight(92);
 80033ae:	205c      	movs	r0, #92	; 0x5c
 80033b0:	f7fe ff7e 	bl	80022b0 <motorRight>
			total_angle = 0;
 80033b4:	494e      	ldr	r1, [pc, #312]	; (80034f0 <robotCommand+0xbd8>)
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 80033c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033c6:	2205      	movs	r2, #5
 80033c8:	494a      	ldr	r1, [pc, #296]	; (80034f4 <robotCommand+0xbdc>)
 80033ca:	484b      	ldr	r0, [pc, #300]	; (80034f8 <robotCommand+0xbe0>)
 80033cc:	f005 fb8f 	bl	8008aee <HAL_UART_Transmit>

			break;
 80033d0:	e0f3      	b.n	80035ba <robotCommand+0xca2>

		case 11:
			Aint = 0;
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 80033de:	f7fd fe69 	bl	80010b4 <gyroInit>
			osDelay(1000);
 80033e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e6:	f006 fc3a 	bl	8009c5e <osDelay>
			moveBackward("Straight", angle);
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <robotCommand+0xbe8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	483e      	ldr	r0, [pc, #248]	; (80034ec <robotCommand+0xbd4>)
 80033f2:	f7fe fdf1 	bl	8001fd8 <moveBackward>
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 80033f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033fa:	2205      	movs	r2, #5
 80033fc:	493d      	ldr	r1, [pc, #244]	; (80034f4 <robotCommand+0xbdc>)
 80033fe:	483e      	ldr	r0, [pc, #248]	; (80034f8 <robotCommand+0xbe0>)
 8003400:	f005 fb75 	bl	8008aee <HAL_UART_Transmit>
			break;
 8003404:	e0d9      	b.n	80035ba <robotCommand+0xca2>
		case 12:
			Aint = 0;
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8003412:	f7fd fe4f 	bl	80010b4 <gyroInit>
			moveBackward("Left", angle);
 8003416:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <robotCommand+0xbe8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	4839      	ldr	r0, [pc, #228]	; (8003504 <robotCommand+0xbec>)
 800341e:	f7fe fddb 	bl	8001fd8 <moveBackward>
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8003422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003426:	2205      	movs	r2, #5
 8003428:	4932      	ldr	r1, [pc, #200]	; (80034f4 <robotCommand+0xbdc>)
 800342a:	4833      	ldr	r0, [pc, #204]	; (80034f8 <robotCommand+0xbe0>)
 800342c:	f005 fb5f 	bl	8008aee <HAL_UART_Transmit>
			break;
 8003430:	e0c3      	b.n	80035ba <robotCommand+0xca2>
		case 13:
			Aint = 0;
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 800343e:	f7fd fe39 	bl	80010b4 <gyroInit>
			moveBackward("Right", angle);
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <robotCommand+0xbe8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	482f      	ldr	r0, [pc, #188]	; (8003508 <robotCommand+0xbf0>)
 800344a:	f7fe fdc5 	bl	8001fd8 <moveBackward>
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 800344e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003452:	2205      	movs	r2, #5
 8003454:	4927      	ldr	r1, [pc, #156]	; (80034f4 <robotCommand+0xbdc>)
 8003456:	4828      	ldr	r0, [pc, #160]	; (80034f8 <robotCommand+0xbe0>)
 8003458:	f005 fb49 	bl	8008aee <HAL_UART_Transmit>
			break;
 800345c:	e0ad      	b.n	80035ba <robotCommand+0xca2>

		case 14:

			Aint = 0;
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 800346a:	f7fd fe23 	bl	80010b4 <gyroInit>
			osDelay(1000);
 800346e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003472:	f006 fbf4 	bl	8009c5e <osDelay>

			motorForward(1300); // 1500 too fast; 13th Oct 6pm
 8003476:	f240 5014 	movw	r0, #1300	; 0x514
 800347a:	f7ff f98d 	bl	8002798 <motorForward>
			while(Distance > 20){
 800347e:	e007      	b.n	8003490 <robotCommand+0xb78>
				correctDirection(0, 1);
 8003480:	2001      	movs	r0, #1
 8003482:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80034b8 <robotCommand+0xba0>
 8003486:	f7fd fd8f 	bl	8000fa8 <correctDirection>
				osDelay(1);
 800348a:	2001      	movs	r0, #1
 800348c:	f006 fbe7 	bl	8009c5e <osDelay>
			while(Distance > 20){
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <robotCommand+0xbf4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b14      	cmp	r3, #20
 8003496:	d8f3      	bhi.n	8003480 <robotCommand+0xb68>
			}
			stopMovement();
 8003498:	f7fe fcb2 	bl	8001e00 <stopMovement>

			motorDir = 0;
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <robotCommand+0xbf8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 80034a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a6:	2205      	movs	r2, #5
 80034a8:	4912      	ldr	r1, [pc, #72]	; (80034f4 <robotCommand+0xbdc>)
 80034aa:	4813      	ldr	r0, [pc, #76]	; (80034f8 <robotCommand+0xbe0>)
 80034ac:	f005 fb1f 	bl	8008aee <HAL_UART_Transmit>

			break;
 80034b0:	e083      	b.n	80035ba <robotCommand+0xca2>
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
	...
 80034c4:	40e24460 	.word	0x40e24460
 80034c8:	0a3d70a4 	.word	0x0a3d70a4
 80034cc:	402123d7 	.word	0x402123d7
 80034d0:	00000000 	.word	0x00000000
 80034d4:	40e46c40 	.word	0x40e46c40
 80034d8:	28f5c28f 	.word	0x28f5c28f
 80034dc:	40240f5c 	.word	0x40240f5c
 80034e0:	2000267c 	.word	0x2000267c
 80034e4:	3ff00000 	.word	0x3ff00000
 80034e8:	404e0000 	.word	0x404e0000
 80034ec:	0800c1b8 	.word	0x0800c1b8
 80034f0:	200046b8 	.word	0x200046b8
 80034f4:	0800c1a0 	.word	0x0800c1a0
 80034f8:	200005fc 	.word	0x200005fc
 80034fc:	2000067c 	.word	0x2000067c
 8003500:	20000000 	.word	0x20000000
 8003504:	0800c1a8 	.word	0x0800c1a8
 8003508:	0800c1b0 	.word	0x0800c1b0
 800350c:	200046b5 	.word	0x200046b5
 8003510:	20004680 	.word	0x20004680

		case 15:

			Aint = 0;
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8003520:	f7fd fdc8 	bl	80010b4 <gyroInit>
			osDelay(1000);
 8003524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003528:	f006 fb99 	bl	8009c5e <osDelay>

			//motorLeft(angle);

			motorLeft(50);
 800352c:	2032      	movs	r0, #50	; 0x32
 800352e:	f7ff f803 	bl	8002538 <motorLeft>
			osDelay(1);
 8003532:	2001      	movs	r0, #1
 8003534:	f006 fb93 	bl	8009c5e <osDelay>
			moveBackward("Straight", 10);
 8003538:	210a      	movs	r1, #10
 800353a:	4822      	ldr	r0, [pc, #136]	; (80035c4 <robotCommand+0xcac>)
 800353c:	f7fe fd4c 	bl	8001fd8 <moveBackward>
			osDelay(1);
 8003540:	2001      	movs	r0, #1
 8003542:	f006 fb8c 	bl	8009c5e <osDelay>
			motorLeft(40);
 8003546:	2028      	movs	r0, #40	; 0x28
 8003548:	f7fe fff6 	bl	8002538 <motorLeft>
			// moveBackward("Straight", 10);

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 800354c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003550:	2205      	movs	r2, #5
 8003552:	491d      	ldr	r1, [pc, #116]	; (80035c8 <robotCommand+0xcb0>)
 8003554:	481d      	ldr	r0, [pc, #116]	; (80035cc <robotCommand+0xcb4>)
 8003556:	f005 faca 	bl	8008aee <HAL_UART_Transmit>
			break;
 800355a:	e02e      	b.n	80035ba <robotCommand+0xca2>


		case 16:

			Aint = 0;
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9c7 2306 	strd	r2, r3, [r7, #24]
			gyroInit();
 8003568:	f7fd fda4 	bl	80010b4 <gyroInit>
			osDelay(1000);
 800356c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003570:	f006 fb75 	bl	8009c5e <osDelay>

			//motorLeft(angle);

			motorRight(50);
 8003574:	2032      	movs	r0, #50	; 0x32
 8003576:	f7fe fe9b 	bl	80022b0 <motorRight>
			osDelay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f006 fb6f 	bl	8009c5e <osDelay>
			moveBackward("Straight", 10);
 8003580:	210a      	movs	r1, #10
 8003582:	4810      	ldr	r0, [pc, #64]	; (80035c4 <robotCommand+0xcac>)
 8003584:	f7fe fd28 	bl	8001fd8 <moveBackward>
			osDelay(1);
 8003588:	2001      	movs	r0, #1
 800358a:	f006 fb68 	bl	8009c5e <osDelay>
			motorRight(40);
 800358e:	2028      	movs	r0, #40	; 0x28
 8003590:	f7fe fe8e 	bl	80022b0 <motorRight>
			// moveBackward("Straight", 10);

			HAL_UART_Transmit(&huart3, (uint8_t *) "Done", 5, 0xFFFF);
 8003594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003598:	2205      	movs	r2, #5
 800359a:	490b      	ldr	r1, [pc, #44]	; (80035c8 <robotCommand+0xcb0>)
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <robotCommand+0xcb4>)
 800359e:	f005 faa6 	bl	8008aee <HAL_UART_Transmit>
			break;
 80035a2:	e00a      	b.n	80035ba <robotCommand+0xca2>

		default:
			stopMovement();
 80035a4:	f7fe fc2c 	bl	8001e00 <stopMovement>
			HAL_UART_Transmit(&huart3, (uint8_t *) "Err", 5, 0xFFFF);
 80035a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ac:	2205      	movs	r2, #5
 80035ae:	4908      	ldr	r1, [pc, #32]	; (80035d0 <robotCommand+0xcb8>)
 80035b0:	4806      	ldr	r0, [pc, #24]	; (80035cc <robotCommand+0xcb4>)
 80035b2:	f005 fa9c 	bl	8008aee <HAL_UART_Transmit>
			break;
 80035b6:	e000      	b.n	80035ba <robotCommand+0xca2>
			break;
 80035b8:	bf00      	nop
		}

		osDelay(1);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f006 fb4f 	bl	8009c5e <osDelay>
		target_angle = 0;
 80035c0:	f7ff b9b4 	b.w	800292c <robotCommand+0x14>
 80035c4:	0800c1b8 	.word	0x0800c1b8
 80035c8:	0800c1a0 	.word	0x0800c1a0
 80035cc:	200005fc 	.word	0x200005fc
 80035d0:	0800c1c4 	.word	0x0800c1c4

080035d4 <leftEncoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_leftEncoder */
void leftEncoder(void const * argument)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN leftEncoder */
	//OLED_Refresh_Gram();
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80035dc:	213c      	movs	r1, #60	; 0x3c
 80035de:	4821      	ldr	r0, [pc, #132]	; (8003664 <leftEncoder+0x90>)
 80035e0:	f004 f8f4 	bl	80077cc <HAL_TIM_Encoder_Start>

	int cntL1, cntL2;

	int cnt2;
	int dirL = 1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
	int diff;
	uint32_t tick;
	cntL1 = __HAL_TIM_GET_COUNTER(&htim2);
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <leftEncoder+0x90>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	613b      	str	r3, [r7, #16]

	tick = HAL_GetTick();
 80035f0:	f000 fe46 	bl	8004280 <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]
	/* Infinite loop */
	//	float speed = 0;
	//	int delta_count = 0;
	for(;;)
	{
		if(HAL_GetTick()-tick > 100L)
 80035f6:	f000 fe43 	bl	8004280 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	; 0x64
 8003602:	d92a      	bls.n	800365a <leftEncoder+0x86>
		{

			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <leftEncoder+0x90>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	60fb      	str	r3, [r7, #12]

			if(cnt2 > 32000){
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003612:	dd06      	ble.n	8003622 <leftEncoder+0x4e>
				dirL = 1;
 8003614:	2301      	movs	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]

				diff = (65536 - cnt2);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e004      	b.n	800362c <leftEncoder+0x58>


			} else {
				dirL = -1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	61fb      	str	r3, [r7, #28]




				diff = cnt2;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	61bb      	str	r3, [r7, #24]
			}




			if(dirL == 1){
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <leftEncoder+0x6c>
				totalLeftEncoder += diff;
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <leftEncoder+0x94>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <leftEncoder+0x94>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e005      	b.n	800364c <leftEncoder+0x78>
			} else {
				totalLeftEncoder -= diff;
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <leftEncoder+0x94>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <leftEncoder+0x94>)
 800364a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <leftEncoder+0x90>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8003654:	f000 fe14 	bl	8004280 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]
			//		  totalLeftEncoder += leftEncoderVal;
			//
			//		  cntL1 = __HAL_TIM_GET_COUNTER(&htim2);
			//		  tick = HAL_GetTick();
		}
		osDelay(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f006 faff 	bl	8009c5e <osDelay>
		if(HAL_GetTick()-tick > 100L)
 8003660:	e7c9      	b.n	80035f6 <leftEncoder+0x22>
 8003662:	bf00      	nop
 8003664:	200004dc 	.word	0x200004dc
 8003668:	20004684 	.word	0x20004684

0800366c <rightEncoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_rightEncoder */
void rightEncoder(void const * argument)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN rightEncoder */
	//OLED_Refresh_Gram();

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8003674:	213c      	movs	r1, #60	; 0x3c
 8003676:	4826      	ldr	r0, [pc, #152]	; (8003710 <rightEncoder+0xa4>)
 8003678:	f004 f8a8 	bl	80077cc <HAL_TIM_Encoder_Start>

	int cntR1, cntR2;
	uint32_t tick;
	cntR1 = __HAL_TIM_GET_COUNTER(&htim3);
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <rightEncoder+0xa4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	617b      	str	r3, [r7, #20]
	tick = HAL_GetTick();
 8003684:	f000 fdfc 	bl	8004280 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]
	//uint8_t right[30] = "Test\0";
	/* Infinite loop */
	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L)
 800368a:	f000 fdf9 	bl	8004280 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003698:	d936      	bls.n	8003708 <rightEncoder+0x9c>
		{
			cntR2 = __HAL_TIM_GET_COUNTER(&htim3);
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <rightEncoder+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	60fb      	str	r3, [r7, #12]

			// for left encoder
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <rightEncoder+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d112      	bne.n	80036d6 <rightEncoder+0x6a>
			{
				if(cntR2<cntR1)
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	da05      	bge.n	80036c4 <rightEncoder+0x58>
				{
					rightEncoderVal = cntR1 - cntR2;
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <rightEncoder+0xa8>)
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01a      	b.n	80036fa <rightEncoder+0x8e>
				}
				else
					rightEncoderVal = (65535-cntR2) + cntR1;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036ca:	33ff      	adds	r3, #255	; 0xff
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4413      	add	r3, r2
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <rightEncoder+0xa8>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e011      	b.n	80036fa <rightEncoder+0x8e>

			}
			else
			{
				if(cntR2>cntR1)
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	dd05      	ble.n	80036ea <rightEncoder+0x7e>
				{
					rightEncoderVal = cntR2 - cntR1;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <rightEncoder+0xa8>)
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e007      	b.n	80036fa <rightEncoder+0x8e>
				}
				else
					rightEncoderVal = (65535-cntR1) + cntR2;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036f0:	33ff      	adds	r3, #255	; 0xff
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <rightEncoder+0xa8>)
 80036f8:	6013      	str	r3, [r2, #0]
			}
			//rightPWMval = Right_PID_control (1500, rightEncoderVal);

			cntR1 = __HAL_TIM_GET_COUNTER(&htim3);
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <rightEncoder+0xa4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	617b      	str	r3, [r7, #20]
			tick = HAL_GetTick();
 8003702:	f000 fdbd 	bl	8004280 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]
		}
		osDelay(1);
 8003708:	2001      	movs	r0, #1
 800370a:	f006 faa8 	bl	8009c5e <osDelay>
		if(HAL_GetTick()-tick > 1000L)
 800370e:	e7bc      	b.n	800368a <rightEncoder+0x1e>
 8003710:	20000524 	.word	0x20000524
 8003714:	2000467c 	.word	0x2000467c

08003718 <stopBot>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_stopBot */
void stopBot(void const * argument)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN stopBot */
	/* Infinite loop */
	for(;;)
	{
		if(motorDir == 0)
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <stopBot+0x18>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1fb      	bne.n	8003720 <stopBot+0x8>
			stopMovement();
 8003728:	f7fe fb6a 	bl	8001e00 <stopMovement>
		if(motorDir == 0)
 800372c:	e7f8      	b.n	8003720 <stopBot+0x8>
 800372e:	bf00      	nop
 8003730:	20004680 	.word	0x20004680

08003734 <LeftMotorFix>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LeftMotorFix */
void LeftMotorFix(void const * argument)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
		//	}
		//	leftPWMval = Left_PID_control (1000, speed);
		////    osDelay(1);
		////    TIM2->CNT = 0;
		//	counter1 = counter;
		osDelay(200);
 800373c:	20c8      	movs	r0, #200	; 0xc8
 800373e:	f006 fa8e 	bl	8009c5e <osDelay>
 8003742:	e7fb      	b.n	800373c <LeftMotorFix+0x8>

08003744 <motor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_motor */
void motor(void const * argument)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN motor */
	/* Infinite loop */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800374c:	2100      	movs	r1, #0
 800374e:	4805      	ldr	r0, [pc, #20]	; (8003764 <motor+0x20>)
 8003750:	f003 fd56 	bl	8007200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003754:	2104      	movs	r1, #4
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <motor+0x20>)
 8003758:	f003 fd52 	bl	8007200 <HAL_TIM_PWM_Start>

	for(;;)
	{
		//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, rightPWMval);
		//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, leftPWMval);
		osDelay(1);
 800375c:	2001      	movs	r0, #1
 800375e:	f006 fa7e 	bl	8009c5e <osDelay>
 8003762:	e7fb      	b.n	800375c <motor+0x18>
 8003764:	200005b4 	.word	0x200005b4

08003768 <OLEDShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_OLEDShow */
void OLEDShow(void const * argument)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b094      	sub	sp, #80	; 0x50
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OLEDShow */
	/* Infinite loop */
	for(;;)
	{
		uint8_t oledText[70] = "oled \0";
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <OLEDShow+0xa8>)
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800377a:	6018      	str	r0, [r3, #0]
 800377c:	3304      	adds	r3, #4
 800377e:	8019      	strh	r1, [r3, #0]
 8003780:	3302      	adds	r3, #2
 8003782:	0c0a      	lsrs	r2, r1, #16
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	f107 030f 	add.w	r3, r7, #15
 800378a:	223f      	movs	r2, #63	; 0x3f
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f007 ff32 	bl	800b5f8 <memset>
		//sprintf(oledText,"Right is %5d, %5d \n Left is %5d, %5d \0",rightEncoderVal, rightPWMval, leftEncoderVal, leftPWMval);
		sprintf(oledText,"angle: %5d", (int)total_angle);
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <OLEDShow+0xac>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	f7fd f9cd 	bl	8000b3c <__aeabi_d2iz>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f107 0308 	add.w	r3, r7, #8
 80037a8:	491b      	ldr	r1, [pc, #108]	; (8003818 <OLEDShow+0xb0>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f007 ff2c 	bl	800b608 <siprintf>
		OLED_ShowString(10,10, oledText);
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	461a      	mov	r2, r3
 80037b6:	210a      	movs	r1, #10
 80037b8:	200a      	movs	r0, #10
 80037ba:	f007 fe23 	bl	800b404 <OLED_ShowString>
		sprintf(oledText, "distance: %5d", (int)Distance);
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <OLEDShow+0xb4>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4915      	ldr	r1, [pc, #84]	; (8003820 <OLEDShow+0xb8>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f007 ff1c 	bl	800b608 <siprintf>
		OLED_ShowString(10,20, oledText);
 80037d0:	f107 0308 	add.w	r3, r7, #8
 80037d4:	461a      	mov	r2, r3
 80037d6:	2114      	movs	r1, #20
 80037d8:	200a      	movs	r0, #10
 80037da:	f007 fe13 	bl	800b404 <OLED_ShowString>
		sprintf(oledText, "IR %4d %4d", (int)leftIR[0], (int)rightIR[0]);
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <OLEDShow+0xbc>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <OLEDShow+0xc0>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	f107 0008 	add.w	r0, r7, #8
 80037ec:	490f      	ldr	r1, [pc, #60]	; (800382c <OLEDShow+0xc4>)
 80037ee:	f007 ff0b 	bl	800b608 <siprintf>
		OLED_ShowString(10,30, oledText);
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	461a      	mov	r2, r3
 80037f8:	211e      	movs	r1, #30
 80037fa:	200a      	movs	r0, #10
 80037fc:	f007 fe02 	bl	800b404 <OLED_ShowString>
		OLED_Refresh_Gram();
 8003800:	f007 fc8c 	bl	800b11c <OLED_Refresh_Gram>
		osDelay(500);
 8003804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003808:	f006 fa29 	bl	8009c5e <osDelay>
	{
 800380c:	e7b0      	b.n	8003770 <OLEDShow+0x8>
 800380e:	bf00      	nop
 8003810:	0800c1f0 	.word	0x0800c1f0
 8003814:	200046b8 	.word	0x200046b8
 8003818:	0800c1c8 	.word	0x0800c1c8
 800381c:	200046b5 	.word	0x200046b5
 8003820:	0800c1d4 	.word	0x0800c1d4
 8003824:	2000067c 	.word	0x2000067c
 8003828:	2000267c 	.word	0x2000267c
 800382c:	0800c1e4 	.word	0x0800c1e4

08003830 <rightMotorFix>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_rightMotorFix */
void rightMotorFix(void const * argument)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
		//	}
		////	rightPWMval = Right_PID_control (1500, speed);
		////	  osDelay(1);
		////	  TIM3->CNT = 0;
		//	counter1 = counter;
		osDelay(1000);
 8003838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800383c:	f006 fa0f 	bl	8009c5e <osDelay>
 8003840:	e7fa      	b.n	8003838 <rightMotorFix+0x8>
 8003842:	0000      	movs	r0, r0
 8003844:	0000      	movs	r0, r0
	...

08003848 <gyroTask1>:
 * @retval None
 */
/* USER CODE END Header_gyroTask1 */

void gyroTask1(void const * argument)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyroTask1 */
	/* Infinite loop */
	uint8_t val[2] = {0,0};
 8003850:	2300      	movs	r3, #0
 8003852:	843b      	strh	r3, [r7, #32]

	char hello[20];
	int16_t angular_speed = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	847b      	strh	r3, [r7, #34]	; 0x22

	uint32_t tick = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gyroInit();
 800385c:	f7fd fc2a 	bl	80010b4 <gyroInit>
	int dir;
	int16_t offset = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	857b      	strh	r3, [r7, #42]	; 0x2a

	tick = HAL_GetTick();
 8003864:	f000 fd0c 	bl	8004280 <HAL_GetTick>
 8003868:	62f8      	str	r0, [r7, #44]	; 0x2c
	osDelay(10);
 800386a:	200a      	movs	r0, #10
 800386c:	f006 f9f7 	bl	8009c5e <osDelay>

		for(int i = 0; i < 3000; i++){
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	e016      	b.n	80038a4 <gyroTask1+0x5c>
			readByte(0x37, val);
 8003876:	f107 0320 	add.w	r3, r7, #32
 800387a:	4619      	mov	r1, r3
 800387c:	2037      	movs	r0, #55	; 0x37
 800387e:	f7fd fb41 	bl	8000f04 <readByte>
			angular_speed = val[0] << 8 | val[1];
 8003882:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	b21a      	sxth	r2, r3
 800388a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800388e:	b21b      	sxth	r3, r3
 8003890:	4313      	orrs	r3, r2
 8003892:	847b      	strh	r3, [r7, #34]	; 0x22
			offset += angular_speed;
 8003894:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003898:	4413      	add	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	857b      	strh	r3, [r7, #42]	; 0x2a
		for(int i = 0; i < 3000; i++){
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	3301      	adds	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80038aa:	4293      	cmp	r3, r2
 80038ac:	dde3      	ble.n	8003876 <gyroTask1+0x2e>
			//osDelayUntil(1);
		}
		offset = offset/3000.0f;
 80038ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ba:	eddf 6a41 	vldr	s13, [pc, #260]	; 80039c0 <gyroTask1+0x178>
 80038be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c6:	ee17 3a90 	vmov	r3, s15
 80038ca:	857b      	strh	r3, [r7, #42]	; 0x2a

		  for(;;)
		  {
		      osDelay(10);
 80038cc:	200a      	movs	r0, #10
 80038ce:	f006 f9c6 	bl	8009c5e <osDelay>

		      if(HAL_GetTick() - tick >= 100){
 80038d2:	f000 fcd5 	bl	8004280 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b63      	cmp	r3, #99	; 0x63
 80038de:	d9f5      	bls.n	80038cc <gyroTask1+0x84>
			  readByte(0x37, val);
 80038e0:	f107 0320 	add.w	r3, r7, #32
 80038e4:	4619      	mov	r1, r3
 80038e6:	2037      	movs	r0, #55	; 0x37
 80038e8:	f7fd fb0c 	bl	8000f04 <readByte>
			  //osDelayUntil(1);
			  //angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
			  angular_speed = (val[0] << 8) | val[1];
 80038ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	b21a      	sxth	r2, r3
 80038f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	847b      	strh	r3, [r7, #34]	; 0x22


			  // for gyro drift removal, calibration needs to be added to angular speed
			  total_angle +=(double)(angular_speed - 1.8)*((HAL_GetTick() - tick)/16400.0);
 80038fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe16 	bl	8000534 <__aeabi_i2d>
 8003908:	a329      	add	r3, pc, #164	; (adr r3, 80039b0 <gyroTask1+0x168>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fcc3 	bl	8000298 <__aeabi_dsub>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4614      	mov	r4, r2
 8003918:	461d      	mov	r5, r3
 800391a:	f000 fcb1 	bl	8004280 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fdf5 	bl	8000514 <__aeabi_ui2d>
 800392a:	a323      	add	r3, pc, #140	; (adr r3, 80039b8 <gyroTask1+0x170>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc ff94 	bl	800085c <__aeabi_ddiv>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4620      	mov	r0, r4
 800393a:	4629      	mov	r1, r5
 800393c:	f7fc fe64 	bl	8000608 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <gyroTask1+0x17c>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fc fca5 	bl	800029c <__adddf3>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	491b      	ldr	r1, [pc, #108]	; (80039c4 <gyroTask1+0x17c>)
 8003958:	e9c1 2300 	strd	r2, r3, [r1]


			  //prevSpeed = angular_speed;
			  if(total_angle >= 720){
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <gyroTask1+0x17c>)
 800395e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <gyroTask1+0x180>)
 8003968:	f7fd f8d4 	bl	8000b14 <__aeabi_dcmpge>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <gyroTask1+0x138>
				  total_angle = 0;
 8003972:	4914      	ldr	r1, [pc, #80]	; (80039c4 <gyroTask1+0x17c>)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  if(total_angle <= -720){
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <gyroTask1+0x17c>)
 8003982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <gyroTask1+0x184>)
 800398c:	f7fd f8b8 	bl	8000b00 <__aeabi_dcmple>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <gyroTask1+0x15c>
				  total_angle = 0;
 8003996:	490b      	ldr	r1, [pc, #44]	; (80039c4 <gyroTask1+0x17c>)
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9c1 2300 	strd	r2, r3, [r1]
			  }


			  tick = HAL_GetTick();
 80039a4:	f000 fc6c 	bl	8004280 <HAL_GetTick>
 80039a8:	62f8      	str	r0, [r7, #44]	; 0x2c
		      osDelay(10);
 80039aa:	e78f      	b.n	80038cc <gyroTask1+0x84>
 80039ac:	f3af 8000 	nop.w
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	3ffccccc 	.word	0x3ffccccc
 80039b8:	00000000 	.word	0x00000000
 80039bc:	40d00400 	.word	0x40d00400
 80039c0:	453b8000 	.word	0x453b8000
 80039c4:	200046b8 	.word	0x200046b8
 80039c8:	40868000 	.word	0x40868000
 80039cc:	c0868000 	.word	0xc0868000

080039d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d4:	b672      	cpsid	i
}
 80039d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80039d8:	e7fe      	b.n	80039d8 <Error_Handler+0x8>
	...

080039dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_MspInit+0x54>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a11      	ldr	r2, [pc, #68]	; (8003a30 <HAL_MspInit+0x54>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_MspInit+0x54>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_MspInit+0x54>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_MspInit+0x54>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_MspInit+0x54>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	210f      	movs	r1, #15
 8003a1e:	f06f 0001 	mvn.w	r0, #1
 8003a22:	f001 f94a 	bl	8004cba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	60da      	str	r2, [r3, #12]
 8003a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5e      	ldr	r2, [pc, #376]	; (8003bcc <HAL_ADC_MspInit+0x198>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d158      	bne.n	8003b08 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a64:	6453      	str	r3, [r2, #68]	; 0x44
 8003a66:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a55      	ldr	r2, [pc, #340]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a92:	2303      	movs	r3, #3
 8003a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9a:	f107 031c 	add.w	r3, r7, #28
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	484c      	ldr	r0, [pc, #304]	; (8003bd4 <HAL_ADC_MspInit+0x1a0>)
 8003aa2:	f001 fd43 	bl	800552c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003aa6:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003aa8:	4a4c      	ldr	r2, [pc, #304]	; (8003bdc <HAL_ADC_MspInit+0x1a8>)
 8003aaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003aac:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ab2:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003abe:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ac6:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003acc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ace:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ad4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ad6:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003adc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ae4:	4b3c      	ldr	r3, [pc, #240]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003aea:	483b      	ldr	r0, [pc, #236]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003aec:	f001 f91c 	bl	8004d28 <HAL_DMA_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003af6:	f7ff ff6b 	bl	80039d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a36      	ldr	r2, [pc, #216]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
 8003b00:	4a35      	ldr	r2, [pc, #212]	; (8003bd8 <HAL_ADC_MspInit+0x1a4>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b06:	e05d      	b.n	8003bc4 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_ADC_MspInit+0x1ac>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d158      	bne.n	8003bc4 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_ADC_MspInit+0x19c>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b56:	f107 031c 	add.w	r3, r7, #28
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	481d      	ldr	r0, [pc, #116]	; (8003bd4 <HAL_ADC_MspInit+0x1a0>)
 8003b5e:	f001 fce5 	bl	800552c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <HAL_ADC_MspInit+0x1b4>)
 8003b66:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003b68:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b82:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b92:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003ba8:	480e      	ldr	r0, [pc, #56]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003baa:	f001 f8bd 	bl	8004d28 <HAL_DMA_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8003bb4:	f7ff ff0c 	bl	80039d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_ADC_MspInit+0x1b0>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003bc4:	bf00      	nop
 8003bc6:	3730      	adds	r7, #48	; 0x30
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40012000 	.word	0x40012000
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	20000380 	.word	0x20000380
 8003bdc:	40026410 	.word	0x40026410
 8003be0:	40012100 	.word	0x40012100
 8003be4:	200003e0 	.word	0x200003e0
 8003be8:	40026440 	.word	0x40026440

08003bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_I2C_MspInit+0x84>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12c      	bne.n	8003c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c30:	2312      	movs	r3, #18
 8003c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4619      	mov	r1, r3
 8003c46:	480c      	ldr	r0, [pc, #48]	; (8003c78 <HAL_I2C_MspInit+0x8c>)
 8003c48:	f001 fc70 	bl	800552c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_I2C_MspInit+0x88>)
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c68:	bf00      	nop
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40005400 	.word	0x40005400
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020400 	.word	0x40020400

08003c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10d      	bne.n	8003caa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_TIM_PWM_MspInit+0x40>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HAL_TIM_PWM_MspInit+0x40>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_TIM_PWM_MspInit+0x40>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40023800 	.word	0x40023800

08003cc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	; 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d14b      	bne.n	8003d7a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a3e      	ldr	r2, [pc, #248]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a37      	ldr	r2, [pc, #220]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a30      	ldr	r2, [pc, #192]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8003d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d44:	2303      	movs	r3, #3
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	4619      	mov	r1, r3
 8003d52:	4825      	ldr	r0, [pc, #148]	; (8003de8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d54:	f001 fbea 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8003d58:	2308      	movs	r3, #8
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d64:	2303      	movs	r3, #3
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4619      	mov	r1, r3
 8003d72:	481e      	ldr	r0, [pc, #120]	; (8003dec <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d74:	f001 fbda 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d78:	e030      	b.n	8003ddc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d12b      	bne.n	8003ddc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	6413      	str	r3, [r2, #64]	; 0x40
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6313      	str	r3, [r2, #48]	; 0x30
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8003dbc:	23c0      	movs	r3, #192	; 0xc0
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4804      	ldr	r0, [pc, #16]	; (8003de8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dd8:	f001 fba8 	bl	800552c <HAL_GPIO_Init>
}
 8003ddc:	bf00      	nop
 8003dde:	3730      	adds	r7, #48	; 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40020400 	.word	0x40020400
 8003df0:	40000400 	.word	0x40000400

08003df4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_TIM_IC_MspInit+0x94>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d134      	bne.n	8003e80 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_TIM_IC_MspInit+0x98>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ultra_ECHO_Pin;
 8003e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e60:	2302      	movs	r3, #2
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ultra_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4809      	ldr	r0, [pc, #36]	; (8003e90 <HAL_TIM_IC_MspInit+0x9c>)
 8003e6c:	f001 fb5e 	bl	800552c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2105      	movs	r1, #5
 8003e74:	201e      	movs	r0, #30
 8003e76:	f000 ff20 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e7a:	201e      	movs	r0, #30
 8003e7c:	f000 ff39 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e80:	bf00      	nop
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020c00 	.word	0x40020c00

08003e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_TIM_Base_MspInit+0x84>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d12b      	bne.n	8003f0e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_TIM_Base_MspInit+0x88>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MotorA_PWM_Pin|MotorB_PWM_Pin;
 8003eee:	23c0      	movs	r3, #192	; 0xc0
 8003ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003efe:	2303      	movs	r3, #3
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4619      	mov	r1, r3
 8003f08:	4805      	ldr	r0, [pc, #20]	; (8003f20 <HAL_TIM_Base_MspInit+0x8c>)
 8003f0a:	f001 fb0f 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f0e:	bf00      	nop
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020800 	.word	0x40020800

08003f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_TIM_MspPostInit+0x68>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d11e      	bne.n	8003f84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_TIM_MspPostInit+0x6c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_TIM_MspPostInit+0x6c>)
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_TIM_MspPostInit+0x6c>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ServoMotor_Pin;
 8003f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f70:	2303      	movs	r3, #3
 8003f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f74:	2301      	movs	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ServoMotor_GPIO_Port, &GPIO_InitStruct);
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4805      	ldr	r0, [pc, #20]	; (8003f94 <HAL_TIM_MspPostInit+0x70>)
 8003f80:	f001 fad4 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f84:	bf00      	nop
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_UART_MspInit+0x94>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d134      	bne.n	8004024 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_UART_MspInit+0x98>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ff2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	2303      	movs	r3, #3
 8004002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004004:	2307      	movs	r3, #7
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	4619      	mov	r1, r3
 800400e:	4809      	ldr	r0, [pc, #36]	; (8004034 <HAL_UART_MspInit+0x9c>)
 8004010:	f001 fa8c 	bl	800552c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	2105      	movs	r1, #5
 8004018:	2027      	movs	r0, #39	; 0x27
 800401a:	f000 fe4e 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800401e:	2027      	movs	r0, #39	; 0x27
 8004020:	f000 fe67 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004024:	bf00      	nop
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40004800 	.word	0x40004800
 8004030:	40023800 	.word	0x40023800
 8004034:	40020800 	.word	0x40020800

08004038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800403c:	e7fe      	b.n	800403c <NMI_Handler+0x4>

0800403e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004042:	e7fe      	b.n	8004042 <HardFault_Handler+0x4>

08004044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004048:	e7fe      	b.n	8004048 <MemManage_Handler+0x4>

0800404a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800404e:	e7fe      	b.n	800404e <BusFault_Handler+0x4>

08004050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004054:	e7fe      	b.n	8004054 <UsageFault_Handler+0x4>

08004056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004068:	f000 f8f6 	bl	8004258 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800406c:	f006 fb9c 	bl	800a7a8 <xTaskGetSchedulerState>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004076:	f006 fdd7 	bl	800ac28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <TIM4_IRQHandler+0x10>)
 8004086:	f003 fc2f 	bl	80078e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	2000056c 	.word	0x2000056c

08004094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <USART3_IRQHandler+0x10>)
 800409a:	f004 fdeb 	bl	8008c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200005fc 	.word	0x200005fc

080040a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <DMA2_Stream0_IRQHandler+0x10>)
 80040ae:	f000 ffd3 	bl	8005058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000380 	.word	0x20000380

080040bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80040c0:	4802      	ldr	r0, [pc, #8]	; (80040cc <DMA2_Stream2_IRQHandler+0x10>)
 80040c2:	f000 ffc9 	bl	8005058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200003e0 	.word	0x200003e0

080040d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <_sbrk+0x5c>)
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <_sbrk+0x60>)
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <_sbrk+0x64>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <_sbrk+0x64>)
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <_sbrk+0x68>)
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <_sbrk+0x64>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d207      	bcs.n	8004110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004100:	f007 fa42 	bl	800b588 <__errno>
 8004104:	4603      	mov	r3, r0
 8004106:	220c      	movs	r2, #12
 8004108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	e009      	b.n	8004124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <_sbrk+0x64>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <_sbrk+0x64>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <_sbrk+0x64>)
 8004120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20020000 	.word	0x20020000
 8004130:	00000400 	.word	0x00000400
 8004134:	200046c4 	.word	0x200046c4
 8004138:	20008830 	.word	0x20008830

0800413c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <SystemInit+0x20>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	4a05      	ldr	r2, [pc, #20]	; (800415c <SystemInit+0x20>)
 8004148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800414c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <Reset_Handler>:
 8004160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004198 <LoopFillZerobss+0x12>
 8004164:	480d      	ldr	r0, [pc, #52]	; (800419c <LoopFillZerobss+0x16>)
 8004166:	490e      	ldr	r1, [pc, #56]	; (80041a0 <LoopFillZerobss+0x1a>)
 8004168:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <LoopFillZerobss+0x1e>)
 800416a:	2300      	movs	r3, #0
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:
 800416e:	58d4      	ldr	r4, [r2, r3]
 8004170:	50c4      	str	r4, [r0, r3]
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:
 8004174:	18c4      	adds	r4, r0, r3
 8004176:	428c      	cmp	r4, r1
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <LoopFillZerobss+0x22>)
 800417c:	4c0b      	ldr	r4, [pc, #44]	; (80041ac <LoopFillZerobss+0x26>)
 800417e:	2300      	movs	r3, #0
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:
 8004186:	42a2      	cmp	r2, r4
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>
 800418a:	f7ff ffd7 	bl	800413c <SystemInit>
 800418e:	f007 fa01 	bl	800b594 <__libc_init_array>
 8004192:	f7fc ffd3 	bl	800113c <main>
 8004196:	4770      	bx	lr
 8004198:	20020000 	.word	0x20020000
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000080 	.word	0x20000080
 80041a4:	0800ce08 	.word	0x0800ce08
 80041a8:	20000080 	.word	0x20000080
 80041ac:	20008830 	.word	0x20008830

080041b0 <ADC_IRQHandler>:
 80041b0:	e7fe      	b.n	80041b0 <ADC_IRQHandler>
	...

080041b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_Init+0x40>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <HAL_Init+0x40>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_Init+0x40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_Init+0x40>)
 80041ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_Init+0x40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <HAL_Init+0x40>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041dc:	2003      	movs	r0, #3
 80041de:	f000 fd61 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e2:	200f      	movs	r0, #15
 80041e4:	f000 f808 	bl	80041f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e8:	f7ff fbf8 	bl	80039dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00

080041f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_InitTick+0x54>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_InitTick+0x58>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd79 	bl	8004d0e <HAL_SYSTICK_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e00e      	b.n	8004244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b0f      	cmp	r3, #15
 800422a:	d80a      	bhi.n	8004242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800422c:	2200      	movs	r2, #0
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f000 fd41 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004238:	4a06      	ldr	r2, [pc, #24]	; (8004254 <HAL_InitTick+0x5c>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000000c 	.word	0x2000000c
 8004250:	20000014 	.word	0x20000014
 8004254:	20000010 	.word	0x20000010

08004258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x20>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4413      	add	r3, r2
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_IncTick+0x24>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000014 	.word	0x20000014
 800427c:	200046c8 	.word	0x200046c8

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	200046c8 	.word	0x200046c8

08004298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff ffee 	bl	8004280 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d005      	beq.n	80042be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_Delay+0x44>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042be:	bf00      	nop
 80042c0:	f7ff ffde 	bl	8004280 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d8f7      	bhi.n	80042c0 <HAL_Delay+0x28>
  {
  }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000014 	.word	0x20000014

080042e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e033      	b.n	800435e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fb98 	bl	8003a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d118      	bne.n	8004350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004326:	f023 0302 	bic.w	r3, r3, #2
 800432a:	f043 0202 	orr.w	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa68 	bl	8004808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
 800434e:	e001      	b.n	8004354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_ADC_Start_DMA+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0e9      	b.n	800455a <HAL_ADC_Start_DMA+0x1f2>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d018      	beq.n	80043ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043ac:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_ADC_Start_DMA+0x1fc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6d      	ldr	r2, [pc, #436]	; (8004568 <HAL_ADC_Start_DMA+0x200>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0c9a      	lsrs	r2, r3, #18
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043c0:	e002      	b.n	80043c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f9      	bne.n	80043c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043dc:	d107      	bne.n	80043ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 80a1 	bne.w	8004540 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d106      	bne.n	800444c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f023 0206 	bic.w	r2, r3, #6
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
 800444a:	e002      	b.n	8004452 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_ADC_Start_DMA+0x204>)
 800445c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	4a43      	ldr	r2, [pc, #268]	; (8004570 <HAL_ADC_Start_DMA+0x208>)
 8004464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_ADC_Start_DMA+0x20c>)
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	4a41      	ldr	r2, [pc, #260]	; (8004578 <HAL_ADC_Start_DMA+0x210>)
 8004474:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800447e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800448e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	334c      	adds	r3, #76	; 0x4c
 80044aa:	4619      	mov	r1, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f000 fce8 	bl	8004e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d12a      	bne.n	8004516 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_ADC_Start_DMA+0x214>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d015      	beq.n	80044f6 <HAL_ADC_Start_DMA+0x18e>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <HAL_ADC_Start_DMA+0x218>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d105      	bne.n	80044e0 <HAL_ADC_Start_DMA+0x178>
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_ADC_Start_DMA+0x204>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <HAL_ADC_Start_DMA+0x21c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d136      	bne.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_ADC_Start_DMA+0x204>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d130      	bne.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d129      	bne.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	e020      	b.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_ADC_Start_DMA+0x214>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d11b      	bne.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d114      	bne.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	e00b      	b.n	8004558 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0210 	orr.w	r2, r3, #16
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
 8004568:	431bde83 	.word	0x431bde83
 800456c:	40012300 	.word	0x40012300
 8004570:	08004a01 	.word	0x08004a01
 8004574:	08004abb 	.word	0x08004abb
 8004578:	08004ad7 	.word	0x08004ad7
 800457c:	40012000 	.word	0x40012000
 8004580:	40012100 	.word	0x40012100
 8004584:	40012200 	.word	0x40012200

08004588 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1c>
 80045dc:	2302      	movs	r3, #2
 80045de:	e105      	b.n	80047ec <HAL_ADC_ConfigChannel+0x228>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d925      	bls.n	800463c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68d9      	ldr	r1, [r3, #12]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	3b1e      	subs	r3, #30
 8004606:	2207      	movs	r2, #7
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43da      	mvns	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	400a      	ands	r2, r1
 8004614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68d9      	ldr	r1, [r3, #12]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	4618      	mov	r0, r3
 8004628:	4603      	mov	r3, r0
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4403      	add	r3, r0
 800462e:	3b1e      	subs	r3, #30
 8004630:	409a      	lsls	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	e022      	b.n	8004682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6919      	ldr	r1, [r3, #16]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	2207      	movs	r2, #7
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43da      	mvns	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	400a      	ands	r2, r1
 800465e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6919      	ldr	r1, [r3, #16]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4618      	mov	r0, r3
 8004672:	4603      	mov	r3, r0
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4403      	add	r3, r0
 8004678:	409a      	lsls	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b06      	cmp	r3, #6
 8004688:	d824      	bhi.n	80046d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	3b05      	subs	r3, #5
 800469c:	221f      	movs	r2, #31
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	400a      	ands	r2, r1
 80046aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4618      	mov	r0, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	3b05      	subs	r3, #5
 80046c6:	fa00 f203 	lsl.w	r2, r0, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	635a      	str	r2, [r3, #52]	; 0x34
 80046d2:	e04c      	b.n	800476e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d824      	bhi.n	8004726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	3b23      	subs	r3, #35	; 0x23
 80046ee:	221f      	movs	r2, #31
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43da      	mvns	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	400a      	ands	r2, r1
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	4618      	mov	r0, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	3b23      	subs	r3, #35	; 0x23
 8004718:	fa00 f203 	lsl.w	r2, r0, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
 8004724:	e023      	b.n	800476e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	3b41      	subs	r3, #65	; 0x41
 8004738:	221f      	movs	r2, #31
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	400a      	ands	r2, r1
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4618      	mov	r0, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	3b41      	subs	r3, #65	; 0x41
 8004762:	fa00 f203 	lsl.w	r2, r0, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <HAL_ADC_ConfigChannel+0x234>)
 8004770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a21      	ldr	r2, [pc, #132]	; (80047fc <HAL_ADC_ConfigChannel+0x238>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d109      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1cc>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b12      	cmp	r3, #18
 8004782:	d105      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_ADC_ConfigChannel+0x238>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d123      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x21e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d003      	beq.n	80047aa <HAL_ADC_ConfigChannel+0x1e6>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b11      	cmp	r3, #17
 80047a8:	d11b      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d111      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_ADC_ConfigChannel+0x23c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <HAL_ADC_ConfigChannel+0x240>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9a      	lsrs	r2, r3, #18
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047d4:	e002      	b.n	80047dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3b01      	subs	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f9      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40012300 	.word	0x40012300
 80047fc:	40012000 	.word	0x40012000
 8004800:	2000000c 	.word	0x2000000c
 8004804:	431bde83 	.word	0x431bde83

08004808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004810:	4b79      	ldr	r3, [pc, #484]	; (80049f8 <ADC_Init+0x1f0>)
 8004812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800483c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6899      	ldr	r1, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	4a58      	ldr	r2, [pc, #352]	; (80049fc <ADC_Init+0x1f4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6899      	ldr	r1, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	e00f      	b.n	8004906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0202 	bic.w	r2, r2, #2
 8004914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	7e1b      	ldrb	r3, [r3, #24]
 8004920:	005a      	lsls	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	3b01      	subs	r3, #1
 8004960:	035a      	lsls	r2, r3, #13
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e007      	b.n	800497c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	3b01      	subs	r3, #1
 8004998:	051a      	lsls	r2, r3, #20
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049be:	025a      	lsls	r2, r3, #9
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	029a      	lsls	r2, r3, #10
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012300 	.word	0x40012300
 80049fc:	0f000001 	.word	0x0f000001

08004a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d13c      	bne.n	8004a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d12b      	bne.n	8004a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d127      	bne.n	8004a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d119      	bne.n	8004a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0220 	bic.w	r2, r2, #32
 8004a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fd7b 	bl	8004588 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a92:	e00e      	b.n	8004ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fd85 	bl	80045b0 <HAL_ADC_ErrorCallback>
}
 8004aa6:	e004      	b.n	8004ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fd67 	bl	800459c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f043 0204 	orr.w	r2, r3, #4
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fd5a 	bl	80045b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b20:	4013      	ands	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b36:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	60d3      	str	r3, [r2, #12]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <__NVIC_GetPriorityGrouping+0x18>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db0b      	blt.n	8004b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4907      	ldr	r1, [pc, #28]	; (8004ba0 <__NVIC_EnableIRQ+0x38>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	; (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	4313      	orrs	r3, r2
         );
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f7ff ff8e 	bl	8004ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff29 	bl	8004b04 <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ccc:	f7ff ff3e 	bl	8004b4c <__NVIC_GetPriorityGrouping>
 8004cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff8e 	bl	8004bf8 <NVIC_EncodePriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff5d 	bl	8004ba4 <__NVIC_SetPriority>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff31 	bl	8004b68 <__NVIC_EnableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ffa2 	bl	8004c60 <SysTick_Config>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7ff faa4 	bl	8004280 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e099      	b.n	8004e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d64:	e00f      	b.n	8004d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d66:	f7ff fa8b 	bl	8004280 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d908      	bls.n	8004d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e078      	b.n	8004e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e8      	bne.n	8004d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <HAL_DMA_Init+0x158>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d107      	bne.n	8004df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	4313      	orrs	r3, r2
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0307 	bic.w	r3, r3, #7
 8004e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d117      	bne.n	8004e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb01 	bl	8005434 <DMA_CheckFifoParam>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2240      	movs	r2, #64	; 0x40
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e46:	2301      	movs	r3, #1
 8004e48:	e016      	b.n	8004e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fab8 	bl	80053c8 <DMA_CalcBaseAndBitshift>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	223f      	movs	r2, #63	; 0x3f
 8004e62:	409a      	lsls	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	f010803f 	.word	0xf010803f

08004e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_DMA_Start_IT+0x26>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e040      	b.n	8004f2c <HAL_DMA_Start_IT+0xa8>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d12f      	bne.n	8004f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa4a 	bl	800536c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004edc:	223f      	movs	r2, #63	; 0x3f
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0216 	orr.w	r2, r2, #22
 8004ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e005      	b.n	8004f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
 8004f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f42:	f7ff f99d 	bl	8004280 <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d008      	beq.n	8004f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e052      	b.n	800500c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0216 	bic.w	r2, r2, #22
 8004f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_DMA_Abort+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0208 	bic.w	r2, r2, #8
 8004fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb6:	e013      	b.n	8004fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb8:	f7ff f962 	bl	8004280 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e015      	b.n	800500c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e4      	bne.n	8004fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	223f      	movs	r2, #63	; 0x3f
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d004      	beq.n	8005032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e00c      	b.n	800504c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2205      	movs	r2, #5
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005064:	4b8e      	ldr	r3, [pc, #568]	; (80052a0 <HAL_DMA_IRQHandler+0x248>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a8e      	ldr	r2, [pc, #568]	; (80052a4 <HAL_DMA_IRQHandler+0x24c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	2208      	movs	r2, #8
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	2208      	movs	r2, #8
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d012      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	2204      	movs	r2, #4
 8005100:	409a      	lsls	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2204      	movs	r2, #4
 800511e:	409a      	lsls	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2210      	movs	r2, #16
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d043      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03c      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2210      	movs	r2, #16
 8005154:	409a      	lsls	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d024      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
 8005186:	e01f      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
 8005198:	e016      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0208 	bic.w	r2, r2, #8
 80051b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	2220      	movs	r2, #32
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808f 	beq.w	80052f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8087 	beq.w	80052f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	2220      	movs	r2, #32
 80051f0:	409a      	lsls	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d136      	bne.n	8005270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0216 	bic.w	r2, r2, #22
 8005210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_DMA_IRQHandler+0x1da>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0208 	bic.w	r2, r2, #8
 8005240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005246:	223f      	movs	r2, #63	; 0x3f
 8005248:	409a      	lsls	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d07e      	beq.n	8005364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
        }
        return;
 800526e:	e079      	b.n	8005364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01d      	beq.n	80052ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	2b00      	cmp	r3, #0
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
 800529c:	e02c      	b.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
 80052b8:	e01e      	b.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0210 	bic.w	r2, r2, #16
 80052d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d032      	beq.n	8005366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2205      	movs	r2, #5
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0201 	bic.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	3301      	adds	r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d307      	bcc.n	8005340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f2      	bne.n	8005324 <HAL_DMA_IRQHandler+0x2cc>
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
 8005362:	e000      	b.n	8005366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005364:	bf00      	nop
    }
  }
}
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d108      	bne.n	80053ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053aa:	e007      	b.n	80053bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b10      	subs	r3, #16
 80053d8:	4a14      	ldr	r2, [pc, #80]	; (800542c <DMA_CalcBaseAndBitshift+0x64>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <DMA_CalcBaseAndBitshift+0x68>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d909      	bls.n	800540a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	659a      	str	r2, [r3, #88]	; 0x58
 8005408:	e007      	b.n	800541a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	aaaaaaab 	.word	0xaaaaaaab
 8005430:	0800c258 	.word	0x0800c258

08005434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11f      	bne.n	800548e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d856      	bhi.n	8005502 <DMA_CheckFifoParam+0xce>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <DMA_CheckFifoParam+0x28>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800547f 	.word	0x0800547f
 8005464:	0800546d 	.word	0x0800546d
 8005468:	08005503 	.word	0x08005503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d046      	beq.n	8005506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800547c:	e043      	b.n	8005506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005486:	d140      	bne.n	800550a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800548c:	e03d      	b.n	800550a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d121      	bne.n	80054dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d837      	bhi.n	800550e <DMA_CheckFifoParam+0xda>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <DMA_CheckFifoParam+0x70>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054bb 	.word	0x080054bb
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	080054cd 	.word	0x080054cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e030      	b.n	800551c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d025      	beq.n	8005512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ca:	e022      	b.n	8005512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d4:	d11f      	bne.n	8005516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054da:	e01c      	b.n	8005516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d903      	bls.n	80054ea <DMA_CheckFifoParam+0xb6>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d003      	beq.n	80054f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054e8:	e018      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e015      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e00b      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005502:	bf00      	nop
 8005504:	e00a      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 8005506:	bf00      	nop
 8005508:	e008      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800550a:	bf00      	nop
 800550c:	e006      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800550e:	bf00      	nop
 8005510:	e004      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;   
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800551a:	bf00      	nop
    }
  } 
  
  return status; 
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e16b      	b.n	8005820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005548:	2201      	movs	r2, #1
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	f040 815a 	bne.w	800581a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d005      	beq.n	800557e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800557a:	2b02      	cmp	r3, #2
 800557c:	d130      	bne.n	80055e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	2203      	movs	r2, #3
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055b4:	2201      	movs	r2, #1
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 0201 	and.w	r2, r3, #1
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d017      	beq.n	800561c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2203      	movs	r2, #3
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4013      	ands	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d123      	bne.n	8005670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	08da      	lsrs	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3208      	adds	r2, #8
 8005630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	220f      	movs	r2, #15
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	08da      	lsrs	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3208      	adds	r2, #8
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	2203      	movs	r2, #3
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0203 	and.w	r2, r3, #3
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80b4 	beq.w	800581a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4b60      	ldr	r3, [pc, #384]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	4a5f      	ldr	r2, [pc, #380]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c0:	6453      	str	r3, [r2, #68]	; 0x44
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ce:	4a5b      	ldr	r2, [pc, #364]	; (800583c <HAL_GPIO_Init+0x310>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a52      	ldr	r2, [pc, #328]	; (8005840 <HAL_GPIO_Init+0x314>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <HAL_GPIO_Init+0x226>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a51      	ldr	r2, [pc, #324]	; (8005844 <HAL_GPIO_Init+0x318>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d025      	beq.n	800574e <HAL_GPIO_Init+0x222>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a50      	ldr	r2, [pc, #320]	; (8005848 <HAL_GPIO_Init+0x31c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <HAL_GPIO_Init+0x21e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a4f      	ldr	r2, [pc, #316]	; (800584c <HAL_GPIO_Init+0x320>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x21a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <HAL_GPIO_Init+0x324>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x216>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a4d      	ldr	r2, [pc, #308]	; (8005854 <HAL_GPIO_Init+0x328>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x212>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a4c      	ldr	r2, [pc, #304]	; (8005858 <HAL_GPIO_Init+0x32c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a4b      	ldr	r2, [pc, #300]	; (800585c <HAL_GPIO_Init+0x330>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x20a>
 8005732:	2307      	movs	r3, #7
 8005734:	e00e      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005736:	2308      	movs	r3, #8
 8005738:	e00c      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800573a:	2306      	movs	r3, #6
 800573c:	e00a      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800573e:	2305      	movs	r3, #5
 8005740:	e008      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005742:	2304      	movs	r3, #4
 8005744:	e006      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005746:	2303      	movs	r3, #3
 8005748:	e004      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800574a:	2302      	movs	r3, #2
 800574c:	e002      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005752:	2300      	movs	r3, #0
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	f002 0203 	and.w	r2, r2, #3
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	4093      	lsls	r3, r2
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005764:	4935      	ldr	r1, [pc, #212]	; (800583c <HAL_GPIO_Init+0x310>)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	3302      	adds	r3, #2
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005796:	4a32      	ldr	r2, [pc, #200]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800579c:	4b30      	ldr	r3, [pc, #192]	; (8005860 <HAL_GPIO_Init+0x334>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057c6:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f0:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	f67f ae90 	bls.w	8005548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40013800 	.word	0x40013800
 8005840:	40020000 	.word	0x40020000
 8005844:	40020400 	.word	0x40020400
 8005848:	40020800 	.word	0x40020800
 800584c:	40020c00 	.word	0x40020c00
 8005850:	40021000 	.word	0x40021000
 8005854:	40021400 	.word	0x40021400
 8005858:	40021800 	.word	0x40021800
 800585c:	40021c00 	.word	0x40021c00
 8005860:	40013c00 	.word	0x40013c00

08005864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
 8005870:	4613      	mov	r3, r2
 8005872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005874:	787b      	ldrb	r3, [r7, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800587a:	887a      	ldrh	r2, [r7, #2]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005880:	e003      	b.n	800588a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005882:	887b      	ldrh	r3, [r7, #2]
 8005884:	041a      	lsls	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	619a      	str	r2, [r3, #24]
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e12b      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fe f994 	bl	8003bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058fc:	f001 fbba 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4a81      	ldr	r2, [pc, #516]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d807      	bhi.n	800591c <HAL_I2C_Init+0x84>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a80      	ldr	r2, [pc, #512]	; (8005b10 <HAL_I2C_Init+0x278>)
 8005910:	4293      	cmp	r3, r2
 8005912:	bf94      	ite	ls
 8005914:	2301      	movls	r3, #1
 8005916:	2300      	movhi	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e006      	b.n	800592a <HAL_I2C_Init+0x92>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a7d      	ldr	r2, [pc, #500]	; (8005b14 <HAL_I2C_Init+0x27c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	bf94      	ite	ls
 8005924:	2301      	movls	r3, #1
 8005926:	2300      	movhi	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e0e7      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a78      	ldr	r2, [pc, #480]	; (8005b18 <HAL_I2C_Init+0x280>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0c9b      	lsrs	r3, r3, #18
 800593c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <HAL_I2C_Init+0xd4>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3301      	adds	r3, #1
 800596a:	e009      	b.n	8005980 <HAL_I2C_Init+0xe8>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	4a69      	ldr	r2, [pc, #420]	; (8005b1c <HAL_I2C_Init+0x284>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	3301      	adds	r3, #1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	430b      	orrs	r3, r1
 8005986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	495c      	ldr	r1, [pc, #368]	; (8005b0c <HAL_I2C_Init+0x274>)
 800599c:	428b      	cmp	r3, r1
 800599e:	d819      	bhi.n	80059d4 <HAL_I2C_Init+0x13c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e59      	subs	r1, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059b4:	400b      	ands	r3, r1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_I2C_Init+0x138>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1e59      	subs	r1, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ce:	e051      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d0:	2304      	movs	r3, #4
 80059d2:	e04f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d111      	bne.n	8005a00 <HAL_I2C_Init+0x168>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e58      	subs	r0, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e012      	b.n	8005a26 <HAL_I2C_Init+0x18e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1e58      	subs	r0, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6859      	ldr	r1, [r3, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	0099      	lsls	r1, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Init+0x196>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e022      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10e      	bne.n	8005a54 <HAL_I2C_Init+0x1bc>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e58      	subs	r0, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	440b      	add	r3, r1
 8005a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	e00f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1e58      	subs	r0, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6859      	ldr	r1, [r3, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	0099      	lsls	r1, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	6809      	ldr	r1, [r1, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6911      	ldr	r1, [r2, #16]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68d2      	ldr	r2, [r2, #12]
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	000186a0 	.word	0x000186a0
 8005b10:	001e847f 	.word	0x001e847f
 8005b14:	003d08ff 	.word	0x003d08ff
 8005b18:	431bde83 	.word	0x431bde83
 8005b1c:	10624dd3 	.word	0x10624dd3

08005b20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	817b      	strh	r3, [r7, #10]
 8005b30:	4613      	mov	r3, r2
 8005b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b34:	f7fe fba4 	bl	8004280 <HAL_GetTick>
 8005b38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	f040 80e0 	bne.w	8005d08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	2319      	movs	r3, #25
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4970      	ldr	r1, [pc, #448]	; (8005d14 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fc58 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e0d3      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2C_Master_Transmit+0x50>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0cc      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d007      	beq.n	8005b96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2221      	movs	r2, #33	; 0x21
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	893a      	ldrh	r2, [r7, #8]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <HAL_I2C_Master_Transmit+0x1f8>)
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bd8:	8979      	ldrh	r1, [r7, #10]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fac2 	bl	8006168 <I2C_MasterRequestWrite>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e08d      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c04:	e066      	b.n	8005cd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6a39      	ldr	r1, [r7, #32]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fcd2 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d107      	bne.n	8005c2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e06b      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_I2C_Master_Transmit+0x188>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d017      	beq.n	8005ca8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	6a39      	ldr	r1, [r7, #32]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fcc2 	bl	8006636 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d107      	bne.n	8005cd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e01a      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d194      	bne.n	8005c06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	00100002 	.word	0x00100002
 8005d18:	ffff0000 	.word	0xffff0000

08005d1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	461a      	mov	r2, r3
 8005d28:	460b      	mov	r3, r1
 8005d2a:	817b      	strh	r3, [r7, #10]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7fe faa6 	bl	8004280 <HAL_GetTick>
 8005d34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	f040 820b 	bne.w	800615a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2319      	movs	r3, #25
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	497c      	ldr	r1, [pc, #496]	; (8005f40 <HAL_I2C_Master_Receive+0x224>)
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fb5a 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e1fe      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_I2C_Master_Receive+0x50>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e1f7      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d007      	beq.n	8005d92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2222      	movs	r2, #34	; 0x22
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2210      	movs	r2, #16
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	893a      	ldrh	r2, [r7, #8]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <HAL_I2C_Master_Receive+0x228>)
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005dd4:	8979      	ldrh	r1, [r7, #10]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fa46 	bl	800626c <I2C_MasterRequestRead>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e1b8      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d113      	bne.n	8005e1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df2:	2300      	movs	r3, #0
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e18c      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d11b      	bne.n	8005e5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e16c      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d11b      	bne.n	8005e9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	e14c      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec0:	e138      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	f200 80f1 	bhi.w	80060ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d123      	bne.n	8005f1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fbed 	bl	80066b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e139      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1a:	e10b      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d14e      	bne.n	8005fc2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_I2C_Master_Receive+0x22c>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fa6a 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e10e      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
 8005f3e:	bf00      	nop
 8005f40:	00100002 	.word	0x00100002
 8005f44:	ffff0000 	.word	0xffff0000
 8005f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc0:	e0b8      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4966      	ldr	r1, [pc, #408]	; (8006164 <HAL_I2C_Master_Receive+0x448>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fa1b 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0bf      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	494f      	ldr	r1, [pc, #316]	; (8006164 <HAL_I2C_Master_Receive+0x448>)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f9ed 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e091      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ac:	e042      	b.n	8006134 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fb00 	bl	80066b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e04c      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d118      	bne.n	8006134 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f aec2 	bne.w	8005ec2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00010004 	.word	0x00010004

08006168 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	460b      	mov	r3, r1
 8006176:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d006      	beq.n	8006192 <I2C_MasterRequestWrite+0x2a>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d003      	beq.n	8006192 <I2C_MasterRequestWrite+0x2a>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006190:	d108      	bne.n	80061a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e00b      	b.n	80061bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	2b12      	cmp	r3, #18
 80061aa:	d107      	bne.n	80061bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f91d 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00d      	beq.n	80061f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e2:	d103      	bne.n	80061ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e035      	b.n	800625c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f8:	d108      	bne.n	800620c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	e01b      	b.n	8006244 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800620c:	897b      	ldrh	r3, [r7, #10]
 800620e:	11db      	asrs	r3, r3, #7
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0306 	and.w	r3, r3, #6
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f063 030f 	orn	r3, r3, #15
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	490e      	ldr	r1, [pc, #56]	; (8006264 <I2C_MasterRequestWrite+0xfc>)
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f943 	bl	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e010      	b.n	800625c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800623a:	897b      	ldrh	r3, [r7, #10]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4907      	ldr	r1, [pc, #28]	; (8006268 <I2C_MasterRequestWrite+0x100>)
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f933 	bl	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	00010008 	.word	0x00010008
 8006268:	00010002 	.word	0x00010002

0800626c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006290:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d006      	beq.n	80062a6 <I2C_MasterRequestRead+0x3a>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d003      	beq.n	80062a6 <I2C_MasterRequestRead+0x3a>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a4:	d108      	bne.n	80062b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e00b      	b.n	80062d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	2b11      	cmp	r3, #17
 80062be:	d107      	bne.n	80062d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f893 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00d      	beq.n	8006304 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f6:	d103      	bne.n	8006300 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e079      	b.n	80063f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630c:	d108      	bne.n	8006320 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	e05f      	b.n	80063e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	11db      	asrs	r3, r3, #7
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f063 030f 	orn	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4930      	ldr	r1, [pc, #192]	; (8006400 <I2C_MasterRequestRead+0x194>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f8b9 	bl	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e054      	b.n	80063f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800634e:	897b      	ldrh	r3, [r7, #10]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4929      	ldr	r1, [pc, #164]	; (8006404 <I2C_MasterRequestRead+0x198>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f8a9 	bl	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e044      	b.n	80063f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006392:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f831 	bl	8006408 <I2C_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ba:	d103      	bne.n	80063c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e017      	b.n	80063f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063c8:	897b      	ldrh	r3, [r7, #10]
 80063ca:	11db      	asrs	r3, r3, #7
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0306 	and.w	r3, r3, #6
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f063 030e 	orn	r3, r3, #14
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	4907      	ldr	r1, [pc, #28]	; (8006404 <I2C_MasterRequestRead+0x198>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f865 	bl	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	00010008 	.word	0x00010008
 8006404:	00010002 	.word	0x00010002

08006408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006418:	e025      	b.n	8006466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d021      	beq.n	8006466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fd ff2d 	bl	8004280 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e023      	b.n	80064ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10d      	bne.n	800648c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	43da      	mvns	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf0c      	ite	eq
 8006482:	2301      	moveq	r3, #1
 8006484:	2300      	movne	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	e00c      	b.n	80064a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	43da      	mvns	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d0b6      	beq.n	800641a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c4:	e051      	b.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d4:	d123      	bne.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e046      	b.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d021      	beq.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fd feab 	bl	8004280 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d116      	bne.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e020      	b.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10c      	bne.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	43da      	mvns	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e00b      	b.n	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	43da      	mvns	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4013      	ands	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d18d      	bne.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065c0:	e02d      	b.n	800661e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f8ce 	bl	8006764 <I2C_IsAcknowledgeFailed>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e02d      	b.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d021      	beq.n	800661e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fd fe51 	bl	8004280 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d116      	bne.n	800661e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e007      	b.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d1ca      	bne.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006642:	e02d      	b.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f88d 	bl	8006764 <I2C_IsAcknowledgeFailed>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e02d      	b.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d021      	beq.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665c:	f7fd fe10 	bl	8004280 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d116      	bne.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f043 0220 	orr.w	r2, r3, #32
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e007      	b.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d1ca      	bne.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066c4:	e042      	b.n	800674c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b10      	cmp	r3, #16
 80066d2:	d119      	bne.n	8006708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0210 	mvn.w	r2, #16
 80066dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e029      	b.n	800675c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fd fdba 	bl	8004280 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e007      	b.n	800675c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d1b5      	bne.n	80066c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d11b      	bne.n	80067b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006784:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f043 0204 	orr.w	r2, r3, #4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80067d6:	687b      	ldr	r3, [r7, #4]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	420e0020 	.word	0x420e0020
 80067e8:	40007000 	.word	0x40007000

080067ec <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_PWR_DisableBkUpAccess+0x20>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_PWR_DisableBkUpAccess+0x24>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80067fe:	687b      	ldr	r3, [r7, #4]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	420e0020 	.word	0x420e0020
 8006810:	40007000 	.word	0x40007000

08006814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e267      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d075      	beq.n	800691e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006832:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b04      	cmp	r3, #4
 800683c:	d00c      	beq.n	8006858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683e:	4b85      	ldr	r3, [pc, #532]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006846:	2b08      	cmp	r3, #8
 8006848:	d112      	bne.n	8006870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684a:	4b82      	ldr	r3, [pc, #520]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006856:	d10b      	bne.n	8006870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006858:	4b7e      	ldr	r3, [pc, #504]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d05b      	beq.n	800691c <HAL_RCC_OscConfig+0x108>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d157      	bne.n	800691c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e242      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006878:	d106      	bne.n	8006888 <HAL_RCC_OscConfig+0x74>
 800687a:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a75      	ldr	r2, [pc, #468]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e01d      	b.n	80068c4 <HAL_RCC_OscConfig+0xb0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006890:	d10c      	bne.n	80068ac <HAL_RCC_OscConfig+0x98>
 8006892:	4b70      	ldr	r3, [pc, #448]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6f      	ldr	r2, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	4b6d      	ldr	r3, [pc, #436]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6c      	ldr	r2, [pc, #432]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e00b      	b.n	80068c4 <HAL_RCC_OscConfig+0xb0>
 80068ac:	4b69      	ldr	r3, [pc, #420]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a68      	ldr	r2, [pc, #416]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	4b66      	ldr	r3, [pc, #408]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a65      	ldr	r2, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d013      	beq.n	80068f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fd fcd8 	bl	8004280 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fd fcd4 	bl	8004280 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	; 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e207      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	4b5b      	ldr	r3, [pc, #364]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0xc0>
 80068f2:	e014      	b.n	800691e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f4:	f7fd fcc4 	bl	8004280 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068fc:	f7fd fcc0 	bl	8004280 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b64      	cmp	r3, #100	; 0x64
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1f3      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690e:	4b51      	ldr	r3, [pc, #324]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0xe8>
 800691a:	e000      	b.n	800691e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d063      	beq.n	80069f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692a:	4b4a      	ldr	r3, [pc, #296]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006936:	4b47      	ldr	r3, [pc, #284]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800693e:	2b08      	cmp	r3, #8
 8006940:	d11c      	bne.n	800697c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006942:	4b44      	ldr	r3, [pc, #272]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d116      	bne.n	800697c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694e:	4b41      	ldr	r3, [pc, #260]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_RCC_OscConfig+0x152>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d001      	beq.n	8006966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e1c7      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4937      	ldr	r1, [pc, #220]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697a:	e03a      	b.n	80069f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d020      	beq.n	80069c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006984:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_RCC_OscConfig+0x244>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fd fc79 	bl	8004280 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006992:	f7fd fc75 	bl	8004280 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e1a8      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4925      	ldr	r1, [pc, #148]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]
 80069c4:	e015      	b.n	80069f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <HAL_RCC_OscConfig+0x244>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fd fc58 	bl	8004280 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d4:	f7fd fc54 	bl	8004280 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e187      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e6:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d036      	beq.n	8006a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d016      	beq.n	8006a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a06:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <HAL_RCC_OscConfig+0x248>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fd fc38 	bl	8004280 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a14:	f7fd fc34 	bl	8004280 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e167      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x200>
 8006a32:	e01b      	b.n	8006a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <HAL_RCC_OscConfig+0x248>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3a:	f7fd fc21 	bl	8004280 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a40:	e00e      	b.n	8006a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a42:	f7fd fc1d 	bl	8004280 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d907      	bls.n	8006a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e150      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
 8006a54:	40023800 	.word	0x40023800
 8006a58:	42470000 	.word	0x42470000
 8006a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a60:	4b88      	ldr	r3, [pc, #544]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ea      	bne.n	8006a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8097 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7e:	4b81      	ldr	r3, [pc, #516]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	4b7d      	ldr	r3, [pc, #500]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	4a7c      	ldr	r2, [pc, #496]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9a:	4b7a      	ldr	r3, [pc, #488]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	60bb      	str	r3, [r7, #8]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aaa:	4b77      	ldr	r3, [pc, #476]	; (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d118      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab6:	4b74      	ldr	r3, [pc, #464]	; (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a73      	ldr	r2, [pc, #460]	; (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac2:	f7fd fbdd 	bl	8004280 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aca:	f7fd fbd9 	bl	8004280 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e10c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006adc:	4b6a      	ldr	r3, [pc, #424]	; (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d106      	bne.n	8006afe <HAL_RCC_OscConfig+0x2ea>
 8006af0:	4b64      	ldr	r3, [pc, #400]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a63      	ldr	r2, [pc, #396]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	e01c      	b.n	8006b38 <HAL_RCC_OscConfig+0x324>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCC_OscConfig+0x30c>
 8006b06:	4b5f      	ldr	r3, [pc, #380]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a5e      	ldr	r2, [pc, #376]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	f043 0304 	orr.w	r3, r3, #4
 8006b10:	6713      	str	r3, [r2, #112]	; 0x70
 8006b12:	4b5c      	ldr	r3, [pc, #368]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a5b      	ldr	r2, [pc, #364]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1e:	e00b      	b.n	8006b38 <HAL_RCC_OscConfig+0x324>
 8006b20:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	4a57      	ldr	r2, [pc, #348]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2c:	4b55      	ldr	r3, [pc, #340]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	4a54      	ldr	r2, [pc, #336]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b32:	f023 0304 	bic.w	r3, r3, #4
 8006b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d015      	beq.n	8006b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fd fb9e 	bl	8004280 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fd fb9a 	bl	8004280 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e0cb      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5e:	4b49      	ldr	r3, [pc, #292]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0ee      	beq.n	8006b48 <HAL_RCC_OscConfig+0x334>
 8006b6a:	e014      	b.n	8006b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b6c:	f7fd fb88 	bl	8004280 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b72:	e00a      	b.n	8006b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b74:	f7fd fb84 	bl	8004280 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e0b5      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8a:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1ee      	bne.n	8006b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d105      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b9c:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80a1 	beq.w	8006cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bb2:	4b34      	ldr	r3, [pc, #208]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d05c      	beq.n	8006c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d141      	bne.n	8006c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc6:	4b31      	ldr	r3, [pc, #196]	; (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bcc:	f7fd fb58 	bl	8004280 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd4:	f7fd fb54 	bl	8004280 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e087      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be6:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	019b      	lsls	r3, r3, #6
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	491b      	ldr	r1, [pc, #108]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fd fb2d 	bl	8004280 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c2a:	f7fd fb29 	bl	8004280 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e05c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x416>
 8006c48:	e054      	b.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fd fb16 	bl	8004280 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fd fb12 	bl	8004280 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e045      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x444>
 8006c76:	e03d      	b.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e038      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40007000 	.word	0x40007000
 8006c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c90:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <HAL_RCC_OscConfig+0x4ec>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d028      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d121      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d11a      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d111      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40023800 	.word	0x40023800

08006d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0cc      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d18:	4b68      	ldr	r3, [pc, #416]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d90c      	bls.n	8006d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b65      	ldr	r3, [pc, #404]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b63      	ldr	r3, [pc, #396]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0b8      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d020      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d58:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4a58      	ldr	r2, [pc, #352]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d70:	4b53      	ldr	r3, [pc, #332]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4a52      	ldr	r2, [pc, #328]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7c:	4b50      	ldr	r3, [pc, #320]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	494d      	ldr	r1, [pc, #308]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d044      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	4b47      	ldr	r3, [pc, #284]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d119      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e07f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc2:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e06f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd2:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e067      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006de2:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f023 0203 	bic.w	r2, r3, #3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4934      	ldr	r1, [pc, #208]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df4:	f7fd fa44 	bl	8004280 <HAL_GetTick>
 8006df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dfc:	f7fd fa40 	bl	8004280 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e04f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e12:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 020c 	and.w	r2, r3, #12
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d1eb      	bne.n	8006dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d20c      	bcs.n	8006e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e32:	4b22      	ldr	r3, [pc, #136]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e032      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4916      	ldr	r1, [pc, #88]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	490e      	ldr	r1, [pc, #56]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e8a:	f000 f821 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	490a      	ldr	r1, [pc, #40]	; (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e9c:	5ccb      	ldrb	r3, [r1, r3]
 8006e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <HAL_RCC_ClockConfig+0x1c8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd f9a4 	bl	80041f8 <HAL_InitTick>

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40023c00 	.word	0x40023c00
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	0800c240 	.word	0x0800c240
 8006ec8:	2000000c 	.word	0x2000000c
 8006ecc:	20000010 	.word	0x20000010

08006ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed4:	b090      	sub	sp, #64	; 0x40
 8006ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee8:	4b59      	ldr	r3, [pc, #356]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d00d      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x40>
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	f200 80a1 	bhi.w	800703c <HAL_RCC_GetSysClockFreq+0x16c>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x34>
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d003      	beq.n	8006f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f02:	e09b      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b53      	ldr	r3, [pc, #332]	; (8007054 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006f08:	e09b      	b.n	8007042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f0a:	4b53      	ldr	r3, [pc, #332]	; (8007058 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f0e:	e098      	b.n	8007042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f10:	4b4f      	ldr	r3, [pc, #316]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f1a:	4b4d      	ldr	r3, [pc, #308]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d028      	beq.n	8006f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f26:	4b4a      	ldr	r3, [pc, #296]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	099b      	lsrs	r3, r3, #6
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	623b      	str	r3, [r7, #32]
 8006f30:	627a      	str	r2, [r7, #36]	; 0x24
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f3c:	fb03 f201 	mul.w	r2, r3, r1
 8006f40:	2300      	movs	r3, #0
 8006f42:	fb00 f303 	mul.w	r3, r0, r3
 8006f46:	4413      	add	r3, r2
 8006f48:	4a43      	ldr	r2, [pc, #268]	; (8007058 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8006f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f50:	460a      	mov	r2, r1
 8006f52:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	4413      	add	r3, r2
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	61fa      	str	r2, [r7, #28]
 8006f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f6a:	f7f9 fe2f 	bl	8000bcc <__aeabi_uldivmod>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4613      	mov	r3, r2
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f76:	e053      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f78:	4b35      	ldr	r3, [pc, #212]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	099b      	lsrs	r3, r3, #6
 8006f7e:	2200      	movs	r2, #0
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	617a      	str	r2, [r7, #20]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f8a:	f04f 0b00 	mov.w	fp, #0
 8006f8e:	4652      	mov	r2, sl
 8006f90:	465b      	mov	r3, fp
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	0159      	lsls	r1, r3, #5
 8006f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fa0:	0150      	lsls	r0, r2, #5
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8006faa:	eb63 090b 	sbc.w	r9, r3, fp
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8006fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	00eb      	lsls	r3, r5, #3
 8006fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fd8:	00e2      	lsls	r2, r4, #3
 8006fda:	4614      	mov	r4, r2
 8006fdc:	461d      	mov	r5, r3
 8006fde:	eb14 030a 	adds.w	r3, r4, sl
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	eb45 030b 	adc.w	r3, r5, fp
 8006fe8:	607b      	str	r3, [r7, #4]
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	028b      	lsls	r3, r1, #10
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007000:	4621      	mov	r1, r4
 8007002:	028a      	lsls	r2, r1, #10
 8007004:	4610      	mov	r0, r2
 8007006:	4619      	mov	r1, r3
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	2200      	movs	r2, #0
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	60fa      	str	r2, [r7, #12]
 8007010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007014:	f7f9 fdda 	bl	8000bcc <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4613      	mov	r3, r2
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_RCC_GetSysClockFreq+0x180>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800703a:	e002      	b.n	8007042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCC_GetSysClockFreq+0x184>)
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007044:	4618      	mov	r0, r3
 8007046:	3740      	adds	r7, #64	; 0x40
 8007048:	46bd      	mov	sp, r7
 800704a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704e:	bf00      	nop
 8007050:	40023800 	.word	0x40023800
 8007054:	00f42400 	.word	0x00f42400
 8007058:	017d7840 	.word	0x017d7840

0800705c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <HAL_RCC_GetHCLKFreq+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000000c 	.word	0x2000000c

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007078:	f7ff fff0 	bl	800705c <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0a9b      	lsrs	r3, r3, #10
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4903      	ldr	r1, [pc, #12]	; (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40023800 	.word	0x40023800
 8007098:	0800c250 	.word	0x0800c250

0800709c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070a0:	f7ff ffdc 	bl	800705c <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0b5b      	lsrs	r3, r3, #13
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40023800 	.word	0x40023800
 80070c0:	0800c250 	.word	0x0800c250

080070c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e041      	b.n	800715a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc fed2 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f000 ff8a 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e041      	b.n	80071f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fc fd77 	bl	8003c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f000 ff3b 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <HAL_TIM_PWM_Start+0x24>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	e022      	b.n	800726a <HAL_TIM_PWM_Start+0x6a>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d109      	bne.n	800723e <HAL_TIM_PWM_Start+0x3e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b01      	cmp	r3, #1
 8007234:	bf14      	ite	ne
 8007236:	2301      	movne	r3, #1
 8007238:	2300      	moveq	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	e015      	b.n	800726a <HAL_TIM_PWM_Start+0x6a>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d109      	bne.n	8007258 <HAL_TIM_PWM_Start+0x58>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e008      	b.n	800726a <HAL_TIM_PWM_Start+0x6a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b01      	cmp	r3, #1
 8007262:	bf14      	ite	ne
 8007264:	2301      	movne	r3, #1
 8007266:	2300      	moveq	r3, #0
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e07c      	b.n	800736c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <HAL_TIM_PWM_Start+0x82>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007280:	e013      	b.n	80072aa <HAL_TIM_PWM_Start+0xaa>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b04      	cmp	r3, #4
 8007286:	d104      	bne.n	8007292 <HAL_TIM_PWM_Start+0x92>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007290:	e00b      	b.n	80072aa <HAL_TIM_PWM_Start+0xaa>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b08      	cmp	r3, #8
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_PWM_Start+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a0:	e003      	b.n	80072aa <HAL_TIM_PWM_Start+0xaa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fac6 	bl	8008844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2d      	ldr	r2, [pc, #180]	; (8007374 <HAL_TIM_PWM_Start+0x174>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_PWM_Start+0xcc>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <HAL_TIM_PWM_Start+0x178>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_PWM_Start+0xd0>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_PWM_Start+0xd2>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a22      	ldr	r2, [pc, #136]	; (8007374 <HAL_TIM_PWM_Start+0x174>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d01d      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	; (800737c <HAL_TIM_PWM_Start+0x17c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_TIM_PWM_Start+0x180>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <HAL_TIM_PWM_Start+0x184>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a16      	ldr	r2, [pc, #88]	; (8007378 <HAL_TIM_PWM_Start+0x178>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a18      	ldr	r2, [pc, #96]	; (8007388 <HAL_TIM_PWM_Start+0x188>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_TIM_PWM_Start+0x136>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_TIM_PWM_Start+0x18c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d111      	bne.n	800735a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b06      	cmp	r3, #6
 8007346:	d010      	beq.n	800736a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007358:	e007      	b.n	800736a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0201 	orr.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40010000 	.word	0x40010000
 8007378:	40010400 	.word	0x40010400
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40014000 	.word	0x40014000
 800738c:	40001800 	.word	0x40001800

08007390 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e041      	b.n	8007426 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fc fd1c 	bl	8003df4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f000 fe24 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <HAL_TIM_IC_Start_IT+0x1e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800744a:	b2db      	uxtb	r3, r3
 800744c:	e013      	b.n	8007476 <HAL_TIM_IC_Start_IT+0x46>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b04      	cmp	r3, #4
 8007452:	d104      	bne.n	800745e <HAL_TIM_IC_Start_IT+0x2e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800745a:	b2db      	uxtb	r3, r3
 800745c:	e00b      	b.n	8007476 <HAL_TIM_IC_Start_IT+0x46>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b08      	cmp	r3, #8
 8007462:	d104      	bne.n	800746e <HAL_TIM_IC_Start_IT+0x3e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800746a:	b2db      	uxtb	r3, r3
 800746c:	e003      	b.n	8007476 <HAL_TIM_IC_Start_IT+0x46>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007474:	b2db      	uxtb	r3, r3
 8007476:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <HAL_TIM_IC_Start_IT+0x58>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007484:	b2db      	uxtb	r3, r3
 8007486:	e013      	b.n	80074b0 <HAL_TIM_IC_Start_IT+0x80>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d104      	bne.n	8007498 <HAL_TIM_IC_Start_IT+0x68>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e00b      	b.n	80074b0 <HAL_TIM_IC_Start_IT+0x80>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b08      	cmp	r3, #8
 800749c:	d104      	bne.n	80074a8 <HAL_TIM_IC_Start_IT+0x78>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	e003      	b.n	80074b0 <HAL_TIM_IC_Start_IT+0x80>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d102      	bne.n	80074be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80074b8:	7b7b      	ldrb	r3, [r7, #13]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d001      	beq.n	80074c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0cc      	b.n	800765c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_IC_Start_IT+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d0:	e013      	b.n	80074fa <HAL_TIM_IC_Start_IT+0xca>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_IC_Start_IT+0xb2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e0:	e00b      	b.n	80074fa <HAL_TIM_IC_Start_IT+0xca>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_IC_Start_IT+0xc2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f0:	e003      	b.n	80074fa <HAL_TIM_IC_Start_IT+0xca>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <HAL_TIM_IC_Start_IT+0xda>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007508:	e013      	b.n	8007532 <HAL_TIM_IC_Start_IT+0x102>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b04      	cmp	r3, #4
 800750e:	d104      	bne.n	800751a <HAL_TIM_IC_Start_IT+0xea>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007518:	e00b      	b.n	8007532 <HAL_TIM_IC_Start_IT+0x102>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b08      	cmp	r3, #8
 800751e:	d104      	bne.n	800752a <HAL_TIM_IC_Start_IT+0xfa>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007528:	e003      	b.n	8007532 <HAL_TIM_IC_Start_IT+0x102>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	d841      	bhi.n	80075bc <HAL_TIM_IC_Start_IT+0x18c>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <HAL_TIM_IC_Start_IT+0x110>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007575 	.word	0x08007575
 8007544:	080075bd 	.word	0x080075bd
 8007548:	080075bd 	.word	0x080075bd
 800754c:	080075bd 	.word	0x080075bd
 8007550:	08007587 	.word	0x08007587
 8007554:	080075bd 	.word	0x080075bd
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075bd 	.word	0x080075bd
 8007560:	08007599 	.word	0x08007599
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075bd 	.word	0x080075bd
 800756c:	080075bd 	.word	0x080075bd
 8007570:	080075ab 	.word	0x080075ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0202 	orr.w	r2, r2, #2
 8007582:	60da      	str	r2, [r3, #12]
      break;
 8007584:	e01d      	b.n	80075c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0204 	orr.w	r2, r2, #4
 8007594:	60da      	str	r2, [r3, #12]
      break;
 8007596:	e014      	b.n	80075c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0208 	orr.w	r2, r2, #8
 80075a6:	60da      	str	r2, [r3, #12]
      break;
 80075a8:	e00b      	b.n	80075c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0210 	orr.w	r2, r2, #16
 80075b8:	60da      	str	r2, [r3, #12]
      break;
 80075ba:	e002      	b.n	80075c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
      break;
 80075c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d148      	bne.n	800765a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f937 	bl	8008844 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_TIM_IC_Start_IT+0x234>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d022      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d01d      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <HAL_TIM_IC_Start_IT+0x238>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d018      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1c      	ldr	r2, [pc, #112]	; (800766c <HAL_TIM_IC_Start_IT+0x23c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1b      	ldr	r2, [pc, #108]	; (8007670 <HAL_TIM_IC_Start_IT+0x240>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_TIM_IC_Start_IT+0x244>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a18      	ldr	r2, [pc, #96]	; (8007678 <HAL_TIM_IC_Start_IT+0x248>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_TIM_IC_Start_IT+0x1f6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIM_IC_Start_IT+0x24c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d111      	bne.n	800764a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b06      	cmp	r3, #6
 8007636:	d010      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007648:	e007      	b.n	800765a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0201 	orr.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40010000 	.word	0x40010000
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40010400 	.word	0x40010400
 8007678:	40014000 	.word	0x40014000
 800767c:	40001800 	.word	0x40001800

08007680 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e097      	b.n	80077c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7fc fb09 	bl	8003cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c4:	f023 0307 	bic.w	r3, r3, #7
 80076c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f000 fca1 	bl	800801c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	4313      	orrs	r3, r2
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007720:	f023 030c 	bic.w	r3, r3, #12
 8007724:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800772c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	4313      	orrs	r3, r2
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	011a      	lsls	r2, r3, #4
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	031b      	lsls	r3, r3, #12
 8007750:	4313      	orrs	r3, r2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007766:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	4313      	orrs	r3, r2
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d110      	bne.n	800781e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d102      	bne.n	8007808 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007802:	7b7b      	ldrb	r3, [r7, #13]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d001      	beq.n	800780c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e069      	b.n	80078e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800781c:	e031      	b.n	8007882 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b04      	cmp	r3, #4
 8007822:	d110      	bne.n	8007846 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d102      	bne.n	8007830 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800782a:	7b3b      	ldrb	r3, [r7, #12]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d001      	beq.n	8007834 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e055      	b.n	80078e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007844:	e01d      	b.n	8007882 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d108      	bne.n	800785e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007858:	7b3b      	ldrb	r3, [r7, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d001      	beq.n	8007862 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e03e      	b.n	80078e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_TIM_Encoder_Start+0xc4>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d008      	beq.n	80078a0 <HAL_TIM_Encoder_Start+0xd4>
 800788e:	e00f      	b.n	80078b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2201      	movs	r2, #1
 8007896:	2100      	movs	r1, #0
 8007898:	4618      	mov	r0, r3
 800789a:	f000 ffd3 	bl	8008844 <TIM_CCxChannelCmd>
      break;
 800789e:	e016      	b.n	80078ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2201      	movs	r2, #1
 80078a6:	2104      	movs	r1, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ffcb 	bl	8008844 <TIM_CCxChannelCmd>
      break;
 80078ae:	e00e      	b.n	80078ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2201      	movs	r2, #1
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 ffc3 	bl	8008844 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2201      	movs	r2, #1
 80078c4:	2104      	movs	r1, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 ffbc 	bl	8008844 <TIM_CCxChannelCmd>
      break;
 80078cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0201 	orr.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d122      	bne.n	8007944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b02      	cmp	r3, #2
 800790a:	d11b      	bne.n	8007944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0202 	mvn.w	r2, #2
 8007914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa f9a0 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8007930:	e005      	b.n	800793e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fb54 	bl	8007fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fb5b 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b04      	cmp	r3, #4
 8007950:	d122      	bne.n	8007998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b04      	cmp	r3, #4
 800795e:	d11b      	bne.n	8007998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0204 	mvn.w	r2, #4
 8007968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa f976 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb2a 	bl	8007fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb31 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d122      	bne.n	80079ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d11b      	bne.n	80079ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0208 	mvn.w	r2, #8
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fa f94c 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fb00 	bl	8007fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb07 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0210 	mvn.w	r2, #16
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2208      	movs	r2, #8
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fa f922 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fad6 	bl	8007fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fadd 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10e      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0201 	mvn.w	r2, #1
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fab0 	bl	8007fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d10e      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 ffd4 	bl	8008a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d10e      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d107      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 faa2 	bl	8008008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d10e      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0220 	mvn.w	r2, #32
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 ff9e 	bl	8008a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e088      	b.n	8007c28 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d11b      	bne.n	8007b5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6819      	ldr	r1, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f000 fcc2 	bl	80084bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 020c 	bic.w	r2, r2, #12
 8007b46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6999      	ldr	r1, [r3, #24]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	619a      	str	r2, [r3, #24]
 8007b5a:	e060      	b.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d11c      	bne.n	8007b9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6819      	ldr	r1, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f000 fd46 	bl	8008602 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6999      	ldr	r1, [r3, #24]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	021a      	lsls	r2, r3, #8
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	619a      	str	r2, [r3, #24]
 8007b9a:	e040      	b.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d11b      	bne.n	8007bda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f000 fd93 	bl	80086dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 020c 	bic.w	r2, r2, #12
 8007bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69d9      	ldr	r1, [r3, #28]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	61da      	str	r2, [r3, #28]
 8007bd8:	e021      	b.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b0c      	cmp	r3, #12
 8007bde:	d11c      	bne.n	8007c1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f000 fdb0 	bl	8008754 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69d9      	ldr	r1, [r3, #28]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	021a      	lsls	r2, r3, #8
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	61da      	str	r2, [r3, #28]
 8007c18:	e001      	b.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e0ae      	b.n	8007dac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b0c      	cmp	r3, #12
 8007c5a:	f200 809f 	bhi.w	8007d9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007d9d 	.word	0x08007d9d
 8007c6c:	08007d9d 	.word	0x08007d9d
 8007c70:	08007d9d 	.word	0x08007d9d
 8007c74:	08007cd9 	.word	0x08007cd9
 8007c78:	08007d9d 	.word	0x08007d9d
 8007c7c:	08007d9d 	.word	0x08007d9d
 8007c80:	08007d9d 	.word	0x08007d9d
 8007c84:	08007d1b 	.word	0x08007d1b
 8007c88:	08007d9d 	.word	0x08007d9d
 8007c8c:	08007d9d 	.word	0x08007d9d
 8007c90:	08007d9d 	.word	0x08007d9d
 8007c94:	08007d5b 	.word	0x08007d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fa5c 	bl	800815c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0208 	orr.w	r2, r2, #8
 8007cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0204 	bic.w	r2, r2, #4
 8007cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6999      	ldr	r1, [r3, #24]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	619a      	str	r2, [r3, #24]
      break;
 8007cd6:	e064      	b.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 faac 	bl	800823c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6999      	ldr	r1, [r3, #24]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	021a      	lsls	r2, r3, #8
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	619a      	str	r2, [r3, #24]
      break;
 8007d18:	e043      	b.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fb01 	bl	8008328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0208 	orr.w	r2, r2, #8
 8007d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0204 	bic.w	r2, r2, #4
 8007d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69d9      	ldr	r1, [r3, #28]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	61da      	str	r2, [r3, #28]
      break;
 8007d58:	e023      	b.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fb55 	bl	8008410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69d9      	ldr	r1, [r3, #28]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	021a      	lsls	r2, r3, #8
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	61da      	str	r2, [r3, #28]
      break;
 8007d9a:	e002      	b.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007da0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e0b4      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x186>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e08:	d03e      	beq.n	8007e88 <HAL_TIM_ConfigClockSource+0xd4>
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0e:	f200 8087 	bhi.w	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e16:	f000 8086 	beq.w	8007f26 <HAL_TIM_ConfigClockSource+0x172>
 8007e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1e:	d87f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e20:	2b70      	cmp	r3, #112	; 0x70
 8007e22:	d01a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xa6>
 8007e24:	2b70      	cmp	r3, #112	; 0x70
 8007e26:	d87b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e28:	2b60      	cmp	r3, #96	; 0x60
 8007e2a:	d050      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x11a>
 8007e2c:	2b60      	cmp	r3, #96	; 0x60
 8007e2e:	d877      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e30:	2b50      	cmp	r3, #80	; 0x50
 8007e32:	d03c      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0xfa>
 8007e34:	2b50      	cmp	r3, #80	; 0x50
 8007e36:	d873      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d058      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x13a>
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d86f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e40:	2b30      	cmp	r3, #48	; 0x30
 8007e42:	d064      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d86b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d060      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d867      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05c      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d05a      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e58:	e062      	b.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6899      	ldr	r1, [r3, #8]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f000 fccb 	bl	8008804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	609a      	str	r2, [r3, #8]
      break;
 8007e86:	e04f      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	6899      	ldr	r1, [r3, #8]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f000 fcb4 	bl	8008804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eaa:	609a      	str	r2, [r3, #8]
      break;
 8007eac:	e03c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f000 fb72 	bl	80085a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2150      	movs	r1, #80	; 0x50
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fc81 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007ecc:	e02c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6859      	ldr	r1, [r3, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f000 fbce 	bl	800867c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2160      	movs	r1, #96	; 0x60
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fc71 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007eec:	e01c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6859      	ldr	r1, [r3, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f000 fb52 	bl	80085a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fc61 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007f0c:	e00c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f000 fc58 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007f1e:	e003      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
      break;
 8007f24:	e000      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b0c      	cmp	r3, #12
 8007f56:	d831      	bhi.n	8007fbc <HAL_TIM_ReadCapturedValue+0x78>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f95 	.word	0x08007f95
 8007f64:	08007fbd 	.word	0x08007fbd
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007fbd 	.word	0x08007fbd
 8007f70:	08007f9f 	.word	0x08007f9f
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007fbd 	.word	0x08007fbd
 8007f7c:	08007fbd 	.word	0x08007fbd
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08007fb3 	.word	0x08007fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	60fb      	str	r3, [r7, #12]

      break;
 8007f9c:	e00f      	b.n	8007fbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	60fb      	str	r3, [r7, #12]

      break;
 8007fa6:	e00a      	b.n	8007fbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	60fb      	str	r3, [r7, #12]

      break;
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	60fb      	str	r3, [r7, #12]

      break;
 8007fba:	e000      	b.n	8007fbe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007fbc:	bf00      	nop
  }

  return tmpreg;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a40      	ldr	r2, [pc, #256]	; (8008130 <TIM_Base_SetConfig+0x114>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a3d      	ldr	r2, [pc, #244]	; (8008134 <TIM_Base_SetConfig+0x118>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3c      	ldr	r2, [pc, #240]	; (8008138 <TIM_Base_SetConfig+0x11c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3b      	ldr	r2, [pc, #236]	; (800813c <TIM_Base_SetConfig+0x120>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3a      	ldr	r2, [pc, #232]	; (8008140 <TIM_Base_SetConfig+0x124>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a2f      	ldr	r2, [pc, #188]	; (8008130 <TIM_Base_SetConfig+0x114>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800807c:	d027      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2c      	ldr	r2, [pc, #176]	; (8008134 <TIM_Base_SetConfig+0x118>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d023      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2b      	ldr	r2, [pc, #172]	; (8008138 <TIM_Base_SetConfig+0x11c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01f      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2a      	ldr	r2, [pc, #168]	; (800813c <TIM_Base_SetConfig+0x120>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a29      	ldr	r2, [pc, #164]	; (8008140 <TIM_Base_SetConfig+0x124>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d017      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a28      	ldr	r2, [pc, #160]	; (8008144 <TIM_Base_SetConfig+0x128>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a27      	ldr	r2, [pc, #156]	; (8008148 <TIM_Base_SetConfig+0x12c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00f      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a26      	ldr	r2, [pc, #152]	; (800814c <TIM_Base_SetConfig+0x130>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a25      	ldr	r2, [pc, #148]	; (8008150 <TIM_Base_SetConfig+0x134>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d007      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a24      	ldr	r2, [pc, #144]	; (8008154 <TIM_Base_SetConfig+0x138>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d003      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a23      	ldr	r2, [pc, #140]	; (8008158 <TIM_Base_SetConfig+0x13c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d108      	bne.n	80080e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <TIM_Base_SetConfig+0x114>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_Base_SetConfig+0xf8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <TIM_Base_SetConfig+0x124>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d103      	bne.n	800811c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	615a      	str	r2, [r3, #20]
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400
 800814c:	40014800 	.word	0x40014800
 8008150:	40001800 	.word	0x40001800
 8008154:	40001c00 	.word	0x40001c00
 8008158:	40002000 	.word	0x40002000

0800815c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f023 0302 	bic.w	r3, r3, #2
 80081a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a20      	ldr	r2, [pc, #128]	; (8008234 <TIM_OC1_SetConfig+0xd8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_OC1_SetConfig+0x64>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <TIM_OC1_SetConfig+0xdc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10c      	bne.n	80081da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f023 0308 	bic.w	r3, r3, #8
 80081c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 0304 	bic.w	r3, r3, #4
 80081d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a15      	ldr	r2, [pc, #84]	; (8008234 <TIM_OC1_SetConfig+0xd8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC1_SetConfig+0x8e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a14      	ldr	r2, [pc, #80]	; (8008238 <TIM_OC1_SetConfig+0xdc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d111      	bne.n	800820e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	621a      	str	r2, [r3, #32]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40010000 	.word	0x40010000
 8008238:	40010400 	.word	0x40010400

0800823c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0210 	bic.w	r2, r3, #16
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f023 0320 	bic.w	r3, r3, #32
 8008286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a22      	ldr	r2, [pc, #136]	; (8008320 <TIM_OC2_SetConfig+0xe4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC2_SetConfig+0x68>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a21      	ldr	r2, [pc, #132]	; (8008324 <TIM_OC2_SetConfig+0xe8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d10d      	bne.n	80082c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a17      	ldr	r2, [pc, #92]	; (8008320 <TIM_OC2_SetConfig+0xe4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_OC2_SetConfig+0x94>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a16      	ldr	r2, [pc, #88]	; (8008324 <TIM_OC2_SetConfig+0xe8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d113      	bne.n	80082f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40010000 	.word	0x40010000
 8008324:	40010400 	.word	0x40010400

08008328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a21      	ldr	r2, [pc, #132]	; (8008408 <TIM_OC3_SetConfig+0xe0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d003      	beq.n	800838e <TIM_OC3_SetConfig+0x66>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a20      	ldr	r2, [pc, #128]	; (800840c <TIM_OC3_SetConfig+0xe4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d10d      	bne.n	80083aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_OC3_SetConfig+0xe0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_OC3_SetConfig+0x92>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <TIM_OC3_SetConfig+0xe4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d113      	bne.n	80083e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	621a      	str	r2, [r3, #32]
}
 80083fc:	bf00      	nop
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40010000 	.word	0x40010000
 800840c:	40010400 	.word	0x40010400

08008410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800845a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <TIM_OC4_SetConfig+0xa4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC4_SetConfig+0x68>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <TIM_OC4_SetConfig+0xa8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d109      	bne.n	800848c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800847e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	019b      	lsls	r3, r3, #6
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40010400 	.word	0x40010400

080084bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a28      	ldr	r2, [pc, #160]	; (8008588 <TIM_TI1_SetConfig+0xcc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01b      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d017      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a25      	ldr	r2, [pc, #148]	; (800858c <TIM_TI1_SetConfig+0xd0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d013      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a24      	ldr	r2, [pc, #144]	; (8008590 <TIM_TI1_SetConfig+0xd4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00f      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4a23      	ldr	r2, [pc, #140]	; (8008594 <TIM_TI1_SetConfig+0xd8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00b      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4a22      	ldr	r2, [pc, #136]	; (8008598 <TIM_TI1_SetConfig+0xdc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d007      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a21      	ldr	r2, [pc, #132]	; (800859c <TIM_TI1_SetConfig+0xe0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d003      	beq.n	8008522 <TIM_TI1_SetConfig+0x66>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a20      	ldr	r2, [pc, #128]	; (80085a0 <TIM_TI1_SetConfig+0xe4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d101      	bne.n	8008526 <TIM_TI1_SetConfig+0x6a>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <TIM_TI1_SetConfig+0x6c>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e003      	b.n	8008546 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800854c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	b2db      	uxtb	r3, r3
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f023 030a 	bic.w	r3, r3, #10
 8008560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f003 030a 	and.w	r3, r3, #10
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40010000 	.word	0x40010000
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40001800 	.word	0x40001800

080085a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0201 	bic.w	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 030a 	bic.w	r3, r3, #10
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008602:	b480      	push	{r7}
 8008604:	b087      	sub	sp, #28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	f023 0210 	bic.w	r2, r3, #16
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	b29b      	uxth	r3, r3
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f023 0210 	bic.w	r2, r3, #16
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	031b      	lsls	r3, r3, #12
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	621a      	str	r2, [r3, #32]
}
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	b2db      	uxtb	r3, r3
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800872c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	621a      	str	r2, [r3, #32]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008780:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	031b      	lsls	r3, r3, #12
 8008798:	b29b      	uxth	r3, r3
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	4313      	orrs	r3, r2
 800879e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	031b      	lsls	r3, r3, #12
 80087ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f043 0307 	orr.w	r3, r3, #7
 80087f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	609a      	str	r2, [r3, #8]
}
 80087f8:	bf00      	nop
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800881e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	021a      	lsls	r2, r3, #8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	431a      	orrs	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4313      	orrs	r3, r2
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	609a      	str	r2, [r3, #8]
}
 8008838:	bf00      	nop
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	2201      	movs	r2, #1
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1a      	ldr	r2, [r3, #32]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	43db      	mvns	r3, r3
 8008866:	401a      	ands	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	fa01 f303 	lsl.w	r3, r1, r3
 800887c:	431a      	orrs	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e05a      	b.n	800895e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a21      	ldr	r2, [pc, #132]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d022      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f4:	d01d      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d018      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1b      	ldr	r2, [pc, #108]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d013      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1a      	ldr	r2, [pc, #104]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00e      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d009      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d004      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a15      	ldr	r2, [pc, #84]	; (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10c      	bne.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4313      	orrs	r3, r2
 8008942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	40010000 	.word	0x40010000
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800
 8008978:	40000c00 	.word	0x40000c00
 800897c:	40010400 	.word	0x40010400
 8008980:	40014000 	.word	0x40014000
 8008984:	40001800 	.word	0x40001800

08008988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e03d      	b.n	8008a20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e03f      	b.n	8008ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fb fa8c 	bl	8003f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	; 0x24
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fddf 	bl	800965c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b08a      	sub	sp, #40	; 0x28
 8008af2:	af02      	add	r7, sp, #8
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d17c      	bne.n	8008c08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <HAL_UART_Transmit+0x2c>
 8008b14:	88fb      	ldrh	r3, [r7, #6]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e075      	b.n	8008c0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Transmit+0x3e>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e06e      	b.n	8008c0a <HAL_UART_Transmit+0x11c>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2221      	movs	r2, #33	; 0x21
 8008b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b42:	f7fb fb9d 	bl	8004280 <HAL_GetTick>
 8008b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	88fa      	ldrh	r2, [r7, #6]
 8008b4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	88fa      	ldrh	r2, [r7, #6]
 8008b52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	d108      	bne.n	8008b70 <HAL_UART_Transmit+0x82>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	e003      	b.n	8008b78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b80:	e02a      	b.n	8008bd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2180      	movs	r1, #128	; 0x80
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fb1f 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e036      	b.n	8008c0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	61bb      	str	r3, [r7, #24]
 8008bb8:	e007      	b.n	8008bca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1cf      	bne.n	8008b82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	2140      	movs	r1, #64	; 0x40
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 faef 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e006      	b.n	8008c0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c08:	2302      	movs	r3, #2
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d11d      	bne.n	8008c68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_UART_Receive_IT+0x26>
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e016      	b.n	8008c6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_UART_Receive_IT+0x38>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e00f      	b.n	8008c6a <HAL_UART_Receive_IT+0x58>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fb24 	bl	80092ac <UART_Start_Receive_IT>
 8008c64:	4603      	mov	r3, r0
 8008c66:	e000      	b.n	8008c6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b0ba      	sub	sp, #232	; 0xe8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
 8008cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc07 	bl	80094e6 <UART_Receive_IT>
      return;
 8008cd8:	e256      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80de 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
 8008ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80d1 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
 8008d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	f043 0201 	orr.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
 8008d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	f043 0202 	orr.w	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
 8008d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f043 0204 	orr.w	r2, r3, #4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d011      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
 8008d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	f043 0208 	orr.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 81ed 	beq.w	800917e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb92 	bl	80094e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	bf0c      	ite	eq
 8008dd0:	2301      	moveq	r3, #1
 8008dd2:	2300      	movne	r3, #0
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <HAL_UART_IRQHandler+0x17a>
 8008de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d04f      	beq.n	8008e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa9a 	bl	8009328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d141      	bne.n	8008e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3314      	adds	r3, #20
 8008e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d9      	bne.n	8008e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d013      	beq.n	8008e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	4a7d      	ldr	r2, [pc, #500]	; (8009050 <HAL_UART_IRQHandler+0x3dc>)
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fc f8d6 	bl	8005014 <HAL_DMA_Abort_IT>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00e      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f990 	bl	80091a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e00a      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f98c 	bl	80091a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	e006      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f988 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e9a:	e170      	b.n	800917e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	bf00      	nop
    return;
 8008e9e:	e16e      	b.n	800917e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	f040 814a 	bne.w	800913e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8143 	beq.w	800913e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 813c 	beq.w	800913e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee6:	2b40      	cmp	r3, #64	; 0x40
 8008ee8:	f040 80b4 	bne.w	8009054 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8140 	beq.w	8009182 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f080 8139 	bcs.w	8009182 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f22:	f000 8088 	beq.w	8009036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1d9      	bne.n	8008f26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3314      	adds	r3, #20
 8008f78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e1      	bne.n	8008f72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e3      	bne.n	8008fae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009006:	f023 0310 	bic.w	r3, r3, #16
 800900a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	330c      	adds	r3, #12
 8009014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009018:	65ba      	str	r2, [r7, #88]	; 0x58
 800901a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800901e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e3      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	4618      	mov	r0, r3
 8009032:	f7fb ff7f 	bl	8004f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800903e:	b29b      	uxth	r3, r3
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b29b      	uxth	r3, r3
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8b6 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800904c:	e099      	b.n	8009182 <HAL_UART_IRQHandler+0x50e>
 800904e:	bf00      	nop
 8009050:	080093ef 	.word	0x080093ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800905c:	b29b      	uxth	r3, r3
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 808b 	beq.w	8009186 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8086 	beq.w	8009186 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	330c      	adds	r3, #12
 8009080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800909e:	647a      	str	r2, [r7, #68]	; 0x44
 80090a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e3      	bne.n	800907a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	623b      	str	r3, [r7, #32]
   return(result);
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3314      	adds	r3, #20
 80090d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090d6:	633a      	str	r2, [r7, #48]	; 0x30
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800911c:	61fa      	str	r2, [r7, #28]
 800911e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	617b      	str	r3, [r7, #20]
   return(result);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e3      	bne.n	80090f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f83e 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800913c:	e023      	b.n	8009186 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d009      	beq.n	800915e <HAL_UART_IRQHandler+0x4ea>
 800914a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f95d 	bl	8009416 <UART_Transmit_IT>
    return;
 800915c:	e014      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <HAL_UART_IRQHandler+0x514>
 800916a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f99d 	bl	80094b6 <UART_EndTransmit_IT>
    return;
 800917c:	e004      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
    return;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
      return;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
      return;
 8009186:	bf00      	nop
  }
}
 8009188:	37e8      	adds	r7, #232	; 0xe8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop

08009190 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b090      	sub	sp, #64	; 0x40
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e0:	e050      	b.n	8009284 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d04c      	beq.n	8009284 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d007      	beq.n	8009200 <UART_WaitOnFlagUntilTimeout+0x30>
 80091f0:	f7fb f846 	bl	8004280 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d241      	bcs.n	8009284 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	330c      	adds	r3, #12
 8009206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	330c      	adds	r3, #12
 800921e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009220:	637a      	str	r2, [r7, #52]	; 0x34
 8009222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3314      	adds	r3, #20
 800923a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	613b      	str	r3, [r7, #16]
   return(result);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 0301 	bic.w	r3, r3, #1
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3314      	adds	r3, #20
 8009252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009254:	623a      	str	r2, [r7, #32]
 8009256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	69f9      	ldr	r1, [r7, #28]
 800925a:	6a3a      	ldr	r2, [r7, #32]
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	61bb      	str	r3, [r7, #24]
   return(result);
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e5      	bne.n	8009234 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e00f      	b.n	80092a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4013      	ands	r3, r2
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	429a      	cmp	r2, r3
 8009292:	bf0c      	ite	eq
 8009294:	2301      	moveq	r3, #1
 8009296:	2300      	movne	r3, #0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	461a      	mov	r2, r3
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d09f      	beq.n	80091e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3740      	adds	r7, #64	; 0x40
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	88fa      	ldrh	r2, [r7, #6]
 80092ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2222      	movs	r2, #34	; 0x22
 80092d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f042 0201 	orr.w	r2, r2, #1
 8009308:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0220 	orr.w	r2, r2, #32
 8009318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b095      	sub	sp, #84	; 0x54
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009350:	643a      	str	r2, [r7, #64]	; 0x40
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	61fb      	str	r3, [r7, #28]
   return(result);
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	64bb      	str	r3, [r7, #72]	; 0x48
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3314      	adds	r3, #20
 8009382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d119      	bne.n	80093d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	647b      	str	r3, [r7, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	330c      	adds	r3, #12
 80093be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093c0:	61ba      	str	r2, [r7, #24]
 80093c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6979      	ldr	r1, [r7, #20]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	613b      	str	r3, [r7, #16]
   return(result);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e5      	bne.n	80093a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093e2:	bf00      	nop
 80093e4:	3754      	adds	r7, #84	; 0x54
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fecb 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b21      	cmp	r3, #33	; 0x21
 8009428:	d13e      	bne.n	80094a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009432:	d114      	bne.n	800945e <UART_Transmit_IT+0x48>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d110      	bne.n	800945e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	621a      	str	r2, [r3, #32]
 800945c:	e008      	b.n	8009470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	1c59      	adds	r1, r3, #1
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6211      	str	r1, [r2, #32]
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4619      	mov	r1, r3
 800947e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10f      	bne.n	80094a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	e000      	b.n	80094aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094a8:	2302      	movs	r3, #2
  }
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fe5a 	bl	8009190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b08c      	sub	sp, #48	; 0x30
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b22      	cmp	r3, #34	; 0x22
 80094f8:	f040 80ab 	bne.w	8009652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009504:	d117      	bne.n	8009536 <UART_Receive_IT+0x50>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d113      	bne.n	8009536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009524:	b29a      	uxth	r2, r3
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	1c9a      	adds	r2, r3, #2
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
 8009534:	e026      	b.n	8009584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009548:	d007      	beq.n	800955a <UART_Receive_IT+0x74>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <UART_Receive_IT+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d106      	bne.n	8009568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e008      	b.n	800957a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009574:	b2da      	uxtb	r2, r3
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009594:	2b00      	cmp	r3, #0
 8009596:	d15a      	bne.n	800964e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0220 	bic.w	r2, r2, #32
 80095a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695a      	ldr	r2, [r3, #20]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0201 	bic.w	r2, r2, #1
 80095c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d135      	bne.n	8009644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	613b      	str	r3, [r7, #16]
   return(result);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	330c      	adds	r3, #12
 80095fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fe:	623a      	str	r2, [r7, #32]
 8009600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	69f9      	ldr	r1, [r7, #28]
 8009604:	6a3a      	ldr	r2, [r7, #32]
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	61bb      	str	r3, [r7, #24]
   return(result);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e5      	bne.n	80095de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b10      	cmp	r3, #16
 800961e:	d10a      	bne.n	8009636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff fdbb 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
 8009642:	e002      	b.n	800964a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f8 fac9 	bl	8001bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	e002      	b.n	8009654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e000      	b.n	8009654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009652:	2302      	movs	r3, #2
  }
}
 8009654:	4618      	mov	r0, r3
 8009656:	3730      	adds	r7, #48	; 0x30
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800965c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009660:	b0c0      	sub	sp, #256	; 0x100
 8009662:	af00      	add	r7, sp, #0
 8009664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009678:	68d9      	ldr	r1, [r3, #12]
 800967a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	ea40 0301 	orr.w	r3, r0, r1
 8009684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	431a      	orrs	r2, r3
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	431a      	orrs	r2, r3
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096b4:	f021 010c 	bic.w	r1, r1, #12
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096c2:	430b      	orrs	r3, r1
 80096c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d6:	6999      	ldr	r1, [r3, #24]
 80096d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	ea40 0301 	orr.w	r3, r0, r1
 80096e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b8f      	ldr	r3, [pc, #572]	; (8009928 <UART_SetConfig+0x2cc>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d005      	beq.n	80096fc <UART_SetConfig+0xa0>
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b8d      	ldr	r3, [pc, #564]	; (800992c <UART_SetConfig+0x2d0>)
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d104      	bne.n	8009706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096fc:	f7fd fcce 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8009700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009704:	e003      	b.n	800970e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009706:	f7fd fcb5 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800970a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009718:	f040 810c 	bne.w	8009934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800971c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009720:	2200      	movs	r2, #0
 8009722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800972a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	1891      	adds	r1, r2, r2
 8009734:	65b9      	str	r1, [r7, #88]	; 0x58
 8009736:	415b      	adcs	r3, r3
 8009738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800973a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800973e:	4621      	mov	r1, r4
 8009740:	eb12 0801 	adds.w	r8, r2, r1
 8009744:	4629      	mov	r1, r5
 8009746:	eb43 0901 	adc.w	r9, r3, r1
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800975a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800975e:	4690      	mov	r8, r2
 8009760:	4699      	mov	r9, r3
 8009762:	4623      	mov	r3, r4
 8009764:	eb18 0303 	adds.w	r3, r8, r3
 8009768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800976c:	462b      	mov	r3, r5
 800976e:	eb49 0303 	adc.w	r3, r9, r3
 8009772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800978a:	460b      	mov	r3, r1
 800978c:	18db      	adds	r3, r3, r3
 800978e:	653b      	str	r3, [r7, #80]	; 0x50
 8009790:	4613      	mov	r3, r2
 8009792:	eb42 0303 	adc.w	r3, r2, r3
 8009796:	657b      	str	r3, [r7, #84]	; 0x54
 8009798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800979c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80097a0:	f7f7 fa14 	bl	8000bcc <__aeabi_uldivmod>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4b61      	ldr	r3, [pc, #388]	; (8009930 <UART_SetConfig+0x2d4>)
 80097aa:	fba3 2302 	umull	r2, r3, r3, r2
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	011c      	lsls	r4, r3, #4
 80097b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80097c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80097c4:	4642      	mov	r2, r8
 80097c6:	464b      	mov	r3, r9
 80097c8:	1891      	adds	r1, r2, r2
 80097ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80097cc:	415b      	adcs	r3, r3
 80097ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097d4:	4641      	mov	r1, r8
 80097d6:	eb12 0a01 	adds.w	sl, r2, r1
 80097da:	4649      	mov	r1, r9
 80097dc:	eb43 0b01 	adc.w	fp, r3, r1
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097f4:	4692      	mov	sl, r2
 80097f6:	469b      	mov	fp, r3
 80097f8:	4643      	mov	r3, r8
 80097fa:	eb1a 0303 	adds.w	r3, sl, r3
 80097fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009802:	464b      	mov	r3, r9
 8009804:	eb4b 0303 	adc.w	r3, fp, r3
 8009808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800980c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800981c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009820:	460b      	mov	r3, r1
 8009822:	18db      	adds	r3, r3, r3
 8009824:	643b      	str	r3, [r7, #64]	; 0x40
 8009826:	4613      	mov	r3, r2
 8009828:	eb42 0303 	adc.w	r3, r2, r3
 800982c:	647b      	str	r3, [r7, #68]	; 0x44
 800982e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009836:	f7f7 f9c9 	bl	8000bcc <__aeabi_uldivmod>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4611      	mov	r1, r2
 8009840:	4b3b      	ldr	r3, [pc, #236]	; (8009930 <UART_SetConfig+0x2d4>)
 8009842:	fba3 2301 	umull	r2, r3, r3, r1
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	2264      	movs	r2, #100	; 0x64
 800984a:	fb02 f303 	mul.w	r3, r2, r3
 800984e:	1acb      	subs	r3, r1, r3
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009856:	4b36      	ldr	r3, [pc, #216]	; (8009930 <UART_SetConfig+0x2d4>)
 8009858:	fba3 2302 	umull	r2, r3, r3, r2
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009864:	441c      	add	r4, r3
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	1891      	adds	r1, r2, r2
 800987e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009880:	415b      	adcs	r3, r3
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009888:	4641      	mov	r1, r8
 800988a:	1851      	adds	r1, r2, r1
 800988c:	6339      	str	r1, [r7, #48]	; 0x30
 800988e:	4649      	mov	r1, r9
 8009890:	414b      	adcs	r3, r1
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80098a0:	4659      	mov	r1, fp
 80098a2:	00cb      	lsls	r3, r1, #3
 80098a4:	4651      	mov	r1, sl
 80098a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098aa:	4651      	mov	r1, sl
 80098ac:	00ca      	lsls	r2, r1, #3
 80098ae:	4610      	mov	r0, r2
 80098b0:	4619      	mov	r1, r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	4642      	mov	r2, r8
 80098b6:	189b      	adds	r3, r3, r2
 80098b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098bc:	464b      	mov	r3, r9
 80098be:	460a      	mov	r2, r1
 80098c0:	eb42 0303 	adc.w	r3, r2, r3
 80098c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098dc:	460b      	mov	r3, r1
 80098de:	18db      	adds	r3, r3, r3
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098e2:	4613      	mov	r3, r2
 80098e4:	eb42 0303 	adc.w	r3, r2, r3
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098f2:	f7f7 f96b 	bl	8000bcc <__aeabi_uldivmod>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <UART_SetConfig+0x2d4>)
 80098fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2164      	movs	r1, #100	; 0x64
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <UART_SetConfig+0x2d4>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 0207 	and.w	r2, r3, #7
 800991a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4422      	add	r2, r4
 8009922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009924:	e105      	b.n	8009b32 <UART_SetConfig+0x4d6>
 8009926:	bf00      	nop
 8009928:	40011000 	.word	0x40011000
 800992c:	40011400 	.word	0x40011400
 8009930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009938:	2200      	movs	r2, #0
 800993a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800993e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	1891      	adds	r1, r2, r2
 800994c:	6239      	str	r1, [r7, #32]
 800994e:	415b      	adcs	r3, r3
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
 8009952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009956:	4641      	mov	r1, r8
 8009958:	1854      	adds	r4, r2, r1
 800995a:	4649      	mov	r1, r9
 800995c:	eb43 0501 	adc.w	r5, r3, r1
 8009960:	f04f 0200 	mov.w	r2, #0
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	00eb      	lsls	r3, r5, #3
 800996a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800996e:	00e2      	lsls	r2, r4, #3
 8009970:	4614      	mov	r4, r2
 8009972:	461d      	mov	r5, r3
 8009974:	4643      	mov	r3, r8
 8009976:	18e3      	adds	r3, r4, r3
 8009978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800997c:	464b      	mov	r3, r9
 800997e:	eb45 0303 	adc.w	r3, r5, r3
 8009982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80099a2:	4629      	mov	r1, r5
 80099a4:	008b      	lsls	r3, r1, #2
 80099a6:	4621      	mov	r1, r4
 80099a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ac:	4621      	mov	r1, r4
 80099ae:	008a      	lsls	r2, r1, #2
 80099b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099b4:	f7f7 f90a 	bl	8000bcc <__aeabi_uldivmod>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4b60      	ldr	r3, [pc, #384]	; (8009b40 <UART_SetConfig+0x4e4>)
 80099be:	fba3 2302 	umull	r2, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	011c      	lsls	r4, r3, #4
 80099c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099d8:	4642      	mov	r2, r8
 80099da:	464b      	mov	r3, r9
 80099dc:	1891      	adds	r1, r2, r2
 80099de:	61b9      	str	r1, [r7, #24]
 80099e0:	415b      	adcs	r3, r3
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099e8:	4641      	mov	r1, r8
 80099ea:	1851      	adds	r1, r2, r1
 80099ec:	6139      	str	r1, [r7, #16]
 80099ee:	4649      	mov	r1, r9
 80099f0:	414b      	adcs	r3, r1
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	f04f 0300 	mov.w	r3, #0
 80099fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a00:	4659      	mov	r1, fp
 8009a02:	00cb      	lsls	r3, r1, #3
 8009a04:	4651      	mov	r1, sl
 8009a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a0a:	4651      	mov	r1, sl
 8009a0c:	00ca      	lsls	r2, r1, #3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	4642      	mov	r2, r8
 8009a16:	189b      	adds	r3, r3, r2
 8009a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	460a      	mov	r2, r1
 8009a20:	eb42 0303 	adc.w	r3, r2, r3
 8009a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a40:	4649      	mov	r1, r9
 8009a42:	008b      	lsls	r3, r1, #2
 8009a44:	4641      	mov	r1, r8
 8009a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	008a      	lsls	r2, r1, #2
 8009a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a52:	f7f7 f8bb 	bl	8000bcc <__aeabi_uldivmod>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4b39      	ldr	r3, [pc, #228]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	2164      	movs	r1, #100	; 0x64
 8009a64:	fb01 f303 	mul.w	r3, r1, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	3332      	adds	r3, #50	; 0x32
 8009a6e:	4a34      	ldr	r2, [pc, #208]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009a70:	fba2 2303 	umull	r2, r3, r2, r3
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a7a:	441c      	add	r4, r3
 8009a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a80:	2200      	movs	r2, #0
 8009a82:	673b      	str	r3, [r7, #112]	; 0x70
 8009a84:	677a      	str	r2, [r7, #116]	; 0x74
 8009a86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	1891      	adds	r1, r2, r2
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	1851      	adds	r1, r2, r1
 8009a9e:	6039      	str	r1, [r7, #0]
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	414b      	adcs	r3, r1
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	f04f 0300 	mov.w	r3, #0
 8009aae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	00cb      	lsls	r3, r1, #3
 8009ab6:	4651      	mov	r1, sl
 8009ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009abc:	4651      	mov	r1, sl
 8009abe:	00ca      	lsls	r2, r1, #3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	189b      	adds	r3, r3, r2
 8009aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009acc:	464b      	mov	r3, r9
 8009ace:	460a      	mov	r2, r1
 8009ad0:	eb42 0303 	adc.w	r3, r2, r3
 8009ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	663b      	str	r3, [r7, #96]	; 0x60
 8009ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	f04f 0300 	mov.w	r3, #0
 8009aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009aee:	4649      	mov	r1, r9
 8009af0:	008b      	lsls	r3, r1, #2
 8009af2:	4641      	mov	r1, r8
 8009af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009af8:	4641      	mov	r1, r8
 8009afa:	008a      	lsls	r2, r1, #2
 8009afc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b00:	f7f7 f864 	bl	8000bcc <__aeabi_uldivmod>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	2164      	movs	r1, #100	; 0x64
 8009b12:	fb01 f303 	mul.w	r3, r1, r3
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	3332      	adds	r3, #50	; 0x32
 8009b1c:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4422      	add	r2, r4
 8009b30:	609a      	str	r2, [r3, #8]
}
 8009b32:	bf00      	nop
 8009b34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b3e:	bf00      	nop
 8009b40:	51eb851f 	.word	0x51eb851f

08009b44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b56:	2b84      	cmp	r3, #132	; 0x84
 8009b58:	d005      	beq.n	8009b66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4413      	add	r3, r2
 8009b62:	3303      	adds	r3, #3
 8009b64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7a:	f3ef 8305 	mrs	r3, IPSR
 8009b7e:	607b      	str	r3, [r7, #4]
  return(result);
 8009b80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bf14      	ite	ne
 8009b86:	2301      	movne	r3, #1
 8009b88:	2300      	moveq	r3, #0
 8009b8a:	b2db      	uxtb	r3, r3
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b9c:	f000 faee 	bl	800a17c <vTaskStartScheduler>
  
  return osOK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009baa:	f7ff ffe3 	bl	8009b74 <inHandlerMode>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009bb4:	f000 fbfc 	bl	800a3b0 <xTaskGetTickCountFromISR>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	e002      	b.n	8009bc2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009bbc:	f000 fbe8 	bl	800a390 <xTaskGetTickCount>
 8009bc0:	4603      	mov	r3, r0
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bc8:	b089      	sub	sp, #36	; 0x24
 8009bca:	af04      	add	r7, sp, #16
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d020      	beq.n	8009c1a <osThreadCreate+0x54>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01c      	beq.n	8009c1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685c      	ldr	r4, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681d      	ldr	r5, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691e      	ldr	r6, [r3, #16]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff ffa6 	bl	8009b44 <makeFreeRtosPriority>
 8009bf8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c02:	9202      	str	r2, [sp, #8]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	9100      	str	r1, [sp, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f8ed 	bl	8009dee <xTaskCreateStatic>
 8009c14:	4603      	mov	r3, r0
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	e01c      	b.n	8009c54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685c      	ldr	r4, [r3, #4]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c26:	b29e      	uxth	r6, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff ff88 	bl	8009b44 <makeFreeRtosPriority>
 8009c34:	4602      	mov	r2, r0
 8009c36:	f107 030c 	add.w	r3, r7, #12
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	9200      	str	r2, [sp, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	4632      	mov	r2, r6
 8009c42:	4629      	mov	r1, r5
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 f92f 	bl	8009ea8 <xTaskCreate>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d001      	beq.n	8009c54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e000      	b.n	8009c56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c54:	68fb      	ldr	r3, [r7, #12]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <osDelay+0x16>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	e000      	b.n	8009c76 <osDelay+0x18>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fa4c 	bl	800a114 <vTaskDelay>
  
  return osOK;
 8009c7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f103 0208 	add.w	r2, r3, #8
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f103 0208 	add.w	r2, r3, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f103 0208 	add.w	r2, r3, #8
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d103      	bne.n	8009d48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e00c      	b.n	8009d62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	e002      	b.n	8009d56 <vListInsert+0x2e>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	60fb      	str	r3, [r7, #12]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d2f6      	bcs.n	8009d50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	601a      	str	r2, [r3, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6892      	ldr	r2, [r2, #8]
 8009db0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6852      	ldr	r2, [r2, #4]
 8009dba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d103      	bne.n	8009dce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	1e5a      	subs	r2, r3, #1
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b08e      	sub	sp, #56	; 0x38
 8009df2:	af04      	add	r7, sp, #16
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	61fb      	str	r3, [r7, #28]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e34:	2354      	movs	r3, #84	; 0x54
 8009e36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2b54      	cmp	r3, #84	; 0x54
 8009e3c:	d00a      	beq.n	8009e54 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	61bb      	str	r3, [r7, #24]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d01e      	beq.n	8009e9a <xTaskCreateStatic+0xac>
 8009e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01b      	beq.n	8009e9a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e74:	2300      	movs	r3, #0
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 f850 	bl	8009f32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e94:	f000 f8d4 	bl	800a040 <prvAddNewTaskToReadyList>
 8009e98:	e001      	b.n	8009e9e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e9e:	697b      	ldr	r3, [r7, #20]
	}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3728      	adds	r7, #40	; 0x28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08c      	sub	sp, #48	; 0x30
 8009eac:	af04      	add	r7, sp, #16
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009eb8:	88fb      	ldrh	r3, [r7, #6]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 ff43 	bl	800ad48 <pvPortMalloc>
 8009ec2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00e      	beq.n	8009ee8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009eca:	2054      	movs	r0, #84	; 0x54
 8009ecc:	f000 ff3c 	bl	800ad48 <pvPortMalloc>
 8009ed0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
 8009ede:	e005      	b.n	8009eec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ee0:	6978      	ldr	r0, [r7, #20]
 8009ee2:	f000 fffd 	bl	800aee0 <vPortFree>
 8009ee6:	e001      	b.n	8009eec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d017      	beq.n	8009f22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009efa:	88fa      	ldrh	r2, [r7, #6]
 8009efc:	2300      	movs	r3, #0
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f80e 	bl	8009f32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f16:	69f8      	ldr	r0, [r7, #28]
 8009f18:	f000 f892 	bl	800a040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	e002      	b.n	8009f28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f22:	f04f 33ff 	mov.w	r3, #4294967295
 8009f26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f28:	69bb      	ldr	r3, [r7, #24]
	}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3720      	adds	r7, #32
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
 8009f3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f023 0307 	bic.w	r3, r3, #7
 8009f58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <prvInitialiseNewTask+0x48>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	617b      	str	r3, [r7, #20]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01f      	beq.n	8009fc0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f80:	2300      	movs	r3, #0
 8009f82:	61fb      	str	r3, [r7, #28]
 8009f84:	e012      	b.n	8009fac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	7819      	ldrb	r1, [r3, #0]
 8009f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	3334      	adds	r3, #52	; 0x34
 8009f96:	460a      	mov	r2, r1
 8009f98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d006      	beq.n	8009fb4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	2b0f      	cmp	r3, #15
 8009fb0:	d9e9      	bls.n	8009f86 <prvInitialiseNewTask+0x54>
 8009fb2:	e000      	b.n	8009fb6 <prvInitialiseNewTask+0x84>
			{
				break;
 8009fb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fbe:	e003      	b.n	8009fc8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	2b06      	cmp	r3, #6
 8009fcc:	d901      	bls.n	8009fd2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fce:	2306      	movs	r3, #6
 8009fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fdc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff fe6c 	bl	8009cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	3318      	adds	r3, #24
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fe67 	bl	8009cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	f1c3 0207 	rsb	r2, r3, #7
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	2200      	movs	r2, #0
 800a012:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	69b8      	ldr	r0, [r7, #24]
 800a022:	f000 fc45 	bl	800a8b0 <pxPortInitialiseStack>
 800a026:	4602      	mov	r2, r0
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a036:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a038:	bf00      	nop
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a048:	f000 fd5c 	bl	800ab04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a04c:	4b2a      	ldr	r3, [pc, #168]	; (800a0f8 <prvAddNewTaskToReadyList+0xb8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a29      	ldr	r2, [pc, #164]	; (800a0f8 <prvAddNewTaskToReadyList+0xb8>)
 800a054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a056:	4b29      	ldr	r3, [pc, #164]	; (800a0fc <prvAddNewTaskToReadyList+0xbc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d109      	bne.n	800a072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a05e:	4a27      	ldr	r2, [pc, #156]	; (800a0fc <prvAddNewTaskToReadyList+0xbc>)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a064:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <prvAddNewTaskToReadyList+0xb8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d110      	bne.n	800a08e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a06c:	f000 fade 	bl	800a62c <prvInitialiseTaskLists>
 800a070:	e00d      	b.n	800a08e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a072:	4b23      	ldr	r3, [pc, #140]	; (800a100 <prvAddNewTaskToReadyList+0xc0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d109      	bne.n	800a08e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a07a:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <prvAddNewTaskToReadyList+0xbc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	429a      	cmp	r2, r3
 800a086:	d802      	bhi.n	800a08e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a088:	4a1c      	ldr	r2, [pc, #112]	; (800a0fc <prvAddNewTaskToReadyList+0xbc>)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a08e:	4b1d      	ldr	r3, [pc, #116]	; (800a104 <prvAddNewTaskToReadyList+0xc4>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	4a1b      	ldr	r2, [pc, #108]	; (800a104 <prvAddNewTaskToReadyList+0xc4>)
 800a096:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	2201      	movs	r2, #1
 800a09e:	409a      	lsls	r2, r3
 800a0a0:	4b19      	ldr	r3, [pc, #100]	; (800a108 <prvAddNewTaskToReadyList+0xc8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	4a18      	ldr	r2, [pc, #96]	; (800a108 <prvAddNewTaskToReadyList+0xc8>)
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4a15      	ldr	r2, [pc, #84]	; (800a10c <prvAddNewTaskToReadyList+0xcc>)
 800a0b8:	441a      	add	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7ff fe0d 	bl	8009ce0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0c6:	f000 fd4d 	bl	800ab64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <prvAddNewTaskToReadyList+0xc0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00e      	beq.n	800a0f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <prvAddNewTaskToReadyList+0xbc>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d207      	bcs.n	800a0f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <prvAddNewTaskToReadyList+0xd0>)
 800a0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	200047cc 	.word	0x200047cc
 800a0fc:	200046cc 	.word	0x200046cc
 800a100:	200047d8 	.word	0x200047d8
 800a104:	200047e8 	.word	0x200047e8
 800a108:	200047d4 	.word	0x200047d4
 800a10c:	200046d0 	.word	0x200046d0
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d017      	beq.n	800a156 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a126:	4b13      	ldr	r3, [pc, #76]	; (800a174 <vTaskDelay+0x60>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <vTaskDelay+0x30>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	60bb      	str	r3, [r7, #8]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a144:	f000 f87a 	bl	800a23c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a148:	2100      	movs	r1, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fb4a 	bl	800a7e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a150:	f000 f882 	bl	800a258 <xTaskResumeAll>
 800a154:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d107      	bne.n	800a16c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <vTaskDelay+0x64>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	200047f4 	.word	0x200047f4
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	; 0x28
 800a180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a18a:	463a      	mov	r2, r7
 800a18c:	1d39      	adds	r1, r7, #4
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	4618      	mov	r0, r3
 800a194:	f7f6 fe9c 	bl	8000ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	9202      	str	r2, [sp, #8]
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	460a      	mov	r2, r1
 800a1aa:	491e      	ldr	r1, [pc, #120]	; (800a224 <vTaskStartScheduler+0xa8>)
 800a1ac:	481e      	ldr	r0, [pc, #120]	; (800a228 <vTaskStartScheduler+0xac>)
 800a1ae:	f7ff fe1e 	bl	8009dee <xTaskCreateStatic>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4a1d      	ldr	r2, [pc, #116]	; (800a22c <vTaskStartScheduler+0xb0>)
 800a1b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1b8:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <vTaskStartScheduler+0xb0>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	e001      	b.n	800a1ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d116      	bne.n	800a1fe <vTaskStartScheduler+0x82>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	613b      	str	r3, [r7, #16]
}
 800a1e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e4:	4b12      	ldr	r3, [pc, #72]	; (800a230 <vTaskStartScheduler+0xb4>)
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1ec:	4b11      	ldr	r3, [pc, #68]	; (800a234 <vTaskStartScheduler+0xb8>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1f2:	4b11      	ldr	r3, [pc, #68]	; (800a238 <vTaskStartScheduler+0xbc>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1f8:	f000 fbe2 	bl	800a9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1fc:	e00e      	b.n	800a21c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d10a      	bne.n	800a21c <vTaskStartScheduler+0xa0>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <vTaskStartScheduler+0x9e>
}
 800a21c:	bf00      	nop
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	0800c238 	.word	0x0800c238
 800a228:	0800a5fd 	.word	0x0800a5fd
 800a22c:	200047f0 	.word	0x200047f0
 800a230:	200047ec 	.word	0x200047ec
 800a234:	200047d8 	.word	0x200047d8
 800a238:	200047d0 	.word	0x200047d0

0800a23c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <vTaskSuspendAll+0x18>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	4a03      	ldr	r2, [pc, #12]	; (800a254 <vTaskSuspendAll+0x18>)
 800a248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a24a:	bf00      	nop
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	200047f4 	.word	0x200047f4

0800a258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a262:	2300      	movs	r3, #0
 800a264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a266:	4b41      	ldr	r3, [pc, #260]	; (800a36c <xTaskResumeAll+0x114>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <xTaskResumeAll+0x2c>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	603b      	str	r3, [r7, #0]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a284:	f000 fc3e 	bl	800ab04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a288:	4b38      	ldr	r3, [pc, #224]	; (800a36c <xTaskResumeAll+0x114>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	4a37      	ldr	r2, [pc, #220]	; (800a36c <xTaskResumeAll+0x114>)
 800a290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a292:	4b36      	ldr	r3, [pc, #216]	; (800a36c <xTaskResumeAll+0x114>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d161      	bne.n	800a35e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a29a:	4b35      	ldr	r3, [pc, #212]	; (800a370 <xTaskResumeAll+0x118>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d05d      	beq.n	800a35e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2a2:	e02e      	b.n	800a302 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a4:	4b33      	ldr	r3, [pc, #204]	; (800a374 <xTaskResumeAll+0x11c>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3318      	adds	r3, #24
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fd72 	bl	8009d9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fd6d 	bl	8009d9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	409a      	lsls	r2, r3
 800a2c8:	4b2b      	ldr	r3, [pc, #172]	; (800a378 <xTaskResumeAll+0x120>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	4a2a      	ldr	r2, [pc, #168]	; (800a378 <xTaskResumeAll+0x120>)
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4a27      	ldr	r2, [pc, #156]	; (800a37c <xTaskResumeAll+0x124>)
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f7ff fcf9 	bl	8009ce0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f2:	4b23      	ldr	r3, [pc, #140]	; (800a380 <xTaskResumeAll+0x128>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d302      	bcc.n	800a302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a2fc:	4b21      	ldr	r3, [pc, #132]	; (800a384 <xTaskResumeAll+0x12c>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a302:	4b1c      	ldr	r3, [pc, #112]	; (800a374 <xTaskResumeAll+0x11c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1cc      	bne.n	800a2a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a310:	f000 fa2a 	bl	800a768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a314:	4b1c      	ldr	r3, [pc, #112]	; (800a388 <xTaskResumeAll+0x130>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d010      	beq.n	800a342 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a320:	f000 f858 	bl	800a3d4 <xTaskIncrementTick>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a32a:	4b16      	ldr	r3, [pc, #88]	; (800a384 <xTaskResumeAll+0x12c>)
 800a32c:	2201      	movs	r2, #1
 800a32e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3b01      	subs	r3, #1
 800a334:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f1      	bne.n	800a320 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a33c:	4b12      	ldr	r3, [pc, #72]	; (800a388 <xTaskResumeAll+0x130>)
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <xTaskResumeAll+0x12c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d009      	beq.n	800a35e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a34a:	2301      	movs	r3, #1
 800a34c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <xTaskResumeAll+0x134>)
 800a350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a35e:	f000 fc01 	bl	800ab64 <vPortExitCritical>

	return xAlreadyYielded;
 800a362:	68bb      	ldr	r3, [r7, #8]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200047f4 	.word	0x200047f4
 800a370:	200047cc 	.word	0x200047cc
 800a374:	2000478c 	.word	0x2000478c
 800a378:	200047d4 	.word	0x200047d4
 800a37c:	200046d0 	.word	0x200046d0
 800a380:	200046cc 	.word	0x200046cc
 800a384:	200047e0 	.word	0x200047e0
 800a388:	200047dc 	.word	0x200047dc
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <xTaskGetTickCount+0x1c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a39c:	687b      	ldr	r3, [r7, #4]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200047d0 	.word	0x200047d0

0800a3b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3b6:	f000 fc87 	bl	800acc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a3be:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <xTaskGetTickCountFromISR+0x20>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3c4:	683b      	ldr	r3, [r7, #0]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200047d0 	.word	0x200047d0

0800a3d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3de:	4b4e      	ldr	r3, [pc, #312]	; (800a518 <xTaskIncrementTick+0x144>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f040 808e 	bne.w	800a504 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3e8:	4b4c      	ldr	r3, [pc, #304]	; (800a51c <xTaskIncrementTick+0x148>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3f0:	4a4a      	ldr	r2, [pc, #296]	; (800a51c <xTaskIncrementTick+0x148>)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d120      	bne.n	800a43e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3fc:	4b48      	ldr	r3, [pc, #288]	; (800a520 <xTaskIncrementTick+0x14c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <xTaskIncrementTick+0x48>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	603b      	str	r3, [r7, #0]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <xTaskIncrementTick+0x46>
 800a41c:	4b40      	ldr	r3, [pc, #256]	; (800a520 <xTaskIncrementTick+0x14c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	4b40      	ldr	r3, [pc, #256]	; (800a524 <xTaskIncrementTick+0x150>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a3e      	ldr	r2, [pc, #248]	; (800a520 <xTaskIncrementTick+0x14c>)
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	4a3e      	ldr	r2, [pc, #248]	; (800a524 <xTaskIncrementTick+0x150>)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	4b3d      	ldr	r3, [pc, #244]	; (800a528 <xTaskIncrementTick+0x154>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3301      	adds	r3, #1
 800a436:	4a3c      	ldr	r2, [pc, #240]	; (800a528 <xTaskIncrementTick+0x154>)
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	f000 f995 	bl	800a768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a43e:	4b3b      	ldr	r3, [pc, #236]	; (800a52c <xTaskIncrementTick+0x158>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	429a      	cmp	r2, r3
 800a446:	d348      	bcc.n	800a4da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a448:	4b35      	ldr	r3, [pc, #212]	; (800a520 <xTaskIncrementTick+0x14c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a452:	4b36      	ldr	r3, [pc, #216]	; (800a52c <xTaskIncrementTick+0x158>)
 800a454:	f04f 32ff 	mov.w	r2, #4294967295
 800a458:	601a      	str	r2, [r3, #0]
					break;
 800a45a:	e03e      	b.n	800a4da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45c:	4b30      	ldr	r3, [pc, #192]	; (800a520 <xTaskIncrementTick+0x14c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d203      	bcs.n	800a47c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a474:	4a2d      	ldr	r2, [pc, #180]	; (800a52c <xTaskIncrementTick+0x158>)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a47a:	e02e      	b.n	800a4da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	3304      	adds	r3, #4
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fc8a 	bl	8009d9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	3318      	adds	r3, #24
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff fc81 	bl	8009d9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	2201      	movs	r2, #1
 800a49e:	409a      	lsls	r2, r3
 800a4a0:	4b23      	ldr	r3, [pc, #140]	; (800a530 <xTaskIncrementTick+0x15c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	4a22      	ldr	r2, [pc, #136]	; (800a530 <xTaskIncrementTick+0x15c>)
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4a1f      	ldr	r2, [pc, #124]	; (800a534 <xTaskIncrementTick+0x160>)
 800a4b8:	441a      	add	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f7ff fc0d 	bl	8009ce0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <xTaskIncrementTick+0x164>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d3b9      	bcc.n	800a448 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d8:	e7b6      	b.n	800a448 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4da:	4b17      	ldr	r3, [pc, #92]	; (800a538 <xTaskIncrementTick+0x164>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	4914      	ldr	r1, [pc, #80]	; (800a534 <xTaskIncrementTick+0x160>)
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d901      	bls.n	800a4f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <xTaskIncrementTick+0x168>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d007      	beq.n	800a50e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a4fe:	2301      	movs	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	e004      	b.n	800a50e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a504:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <xTaskIncrementTick+0x16c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	4a0d      	ldr	r2, [pc, #52]	; (800a540 <xTaskIncrementTick+0x16c>)
 800a50c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a50e:	697b      	ldr	r3, [r7, #20]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	200047f4 	.word	0x200047f4
 800a51c:	200047d0 	.word	0x200047d0
 800a520:	20004784 	.word	0x20004784
 800a524:	20004788 	.word	0x20004788
 800a528:	200047e4 	.word	0x200047e4
 800a52c:	200047ec 	.word	0x200047ec
 800a530:	200047d4 	.word	0x200047d4
 800a534:	200046d0 	.word	0x200046d0
 800a538:	200046cc 	.word	0x200046cc
 800a53c:	200047e0 	.word	0x200047e0
 800a540:	200047dc 	.word	0x200047dc

0800a544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a54a:	4b27      	ldr	r3, [pc, #156]	; (800a5e8 <vTaskSwitchContext+0xa4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <vTaskSwitchContext+0xa8>)
 800a554:	2201      	movs	r2, #1
 800a556:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a558:	e03f      	b.n	800a5da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <vTaskSwitchContext+0xa8>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a560:	4b23      	ldr	r3, [pc, #140]	; (800a5f0 <vTaskSwitchContext+0xac>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	fab3 f383 	clz	r3, r3
 800a56c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	f1c3 031f 	rsb	r3, r3, #31
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	491f      	ldr	r1, [pc, #124]	; (800a5f4 <vTaskSwitchContext+0xb0>)
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	607b      	str	r3, [r7, #4]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <vTaskSwitchContext+0x5a>
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4a12      	ldr	r2, [pc, #72]	; (800a5f4 <vTaskSwitchContext+0xb0>)
 800a5ac:	4413      	add	r3, r2
 800a5ae:	613b      	str	r3, [r7, #16]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d104      	bne.n	800a5d0 <vTaskSwitchContext+0x8c>
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4a08      	ldr	r2, [pc, #32]	; (800a5f8 <vTaskSwitchContext+0xb4>)
 800a5d8:	6013      	str	r3, [r2, #0]
}
 800a5da:	bf00      	nop
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	200047f4 	.word	0x200047f4
 800a5ec:	200047e0 	.word	0x200047e0
 800a5f0:	200047d4 	.word	0x200047d4
 800a5f4:	200046d0 	.word	0x200046d0
 800a5f8:	200046cc 	.word	0x200046cc

0800a5fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a604:	f000 f852 	bl	800a6ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a608:	4b06      	ldr	r3, [pc, #24]	; (800a624 <prvIdleTask+0x28>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d9f9      	bls.n	800a604 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <prvIdleTask+0x2c>)
 800a612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a620:	e7f0      	b.n	800a604 <prvIdleTask+0x8>
 800a622:	bf00      	nop
 800a624:	200046d0 	.word	0x200046d0
 800a628:	e000ed04 	.word	0xe000ed04

0800a62c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a632:	2300      	movs	r3, #0
 800a634:	607b      	str	r3, [r7, #4]
 800a636:	e00c      	b.n	800a652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4613      	mov	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4a12      	ldr	r2, [pc, #72]	; (800a68c <prvInitialiseTaskLists+0x60>)
 800a644:	4413      	add	r3, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fb1d 	bl	8009c86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3301      	adds	r3, #1
 800a650:	607b      	str	r3, [r7, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b06      	cmp	r3, #6
 800a656:	d9ef      	bls.n	800a638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a658:	480d      	ldr	r0, [pc, #52]	; (800a690 <prvInitialiseTaskLists+0x64>)
 800a65a:	f7ff fb14 	bl	8009c86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a65e:	480d      	ldr	r0, [pc, #52]	; (800a694 <prvInitialiseTaskLists+0x68>)
 800a660:	f7ff fb11 	bl	8009c86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a664:	480c      	ldr	r0, [pc, #48]	; (800a698 <prvInitialiseTaskLists+0x6c>)
 800a666:	f7ff fb0e 	bl	8009c86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a66a:	480c      	ldr	r0, [pc, #48]	; (800a69c <prvInitialiseTaskLists+0x70>)
 800a66c:	f7ff fb0b 	bl	8009c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a670:	480b      	ldr	r0, [pc, #44]	; (800a6a0 <prvInitialiseTaskLists+0x74>)
 800a672:	f7ff fb08 	bl	8009c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a676:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <prvInitialiseTaskLists+0x78>)
 800a678:	4a05      	ldr	r2, [pc, #20]	; (800a690 <prvInitialiseTaskLists+0x64>)
 800a67a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <prvInitialiseTaskLists+0x7c>)
 800a67e:	4a05      	ldr	r2, [pc, #20]	; (800a694 <prvInitialiseTaskLists+0x68>)
 800a680:	601a      	str	r2, [r3, #0]
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	200046d0 	.word	0x200046d0
 800a690:	2000475c 	.word	0x2000475c
 800a694:	20004770 	.word	0x20004770
 800a698:	2000478c 	.word	0x2000478c
 800a69c:	200047a0 	.word	0x200047a0
 800a6a0:	200047b8 	.word	0x200047b8
 800a6a4:	20004784 	.word	0x20004784
 800a6a8:	20004788 	.word	0x20004788

0800a6ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6b2:	e019      	b.n	800a6e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6b4:	f000 fa26 	bl	800ab04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b8:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <prvCheckTasksWaitingTermination+0x50>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff fb68 	bl	8009d9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <prvCheckTasksWaitingTermination+0x54>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4a0b      	ldr	r2, [pc, #44]	; (800a700 <prvCheckTasksWaitingTermination+0x54>)
 800a6d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <prvCheckTasksWaitingTermination+0x58>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4a0a      	ldr	r2, [pc, #40]	; (800a704 <prvCheckTasksWaitingTermination+0x58>)
 800a6dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6de:	f000 fa41 	bl	800ab64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f810 	bl	800a708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <prvCheckTasksWaitingTermination+0x58>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e1      	bne.n	800a6b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	200047a0 	.word	0x200047a0
 800a700:	200047cc 	.word	0x200047cc
 800a704:	200047b4 	.word	0x200047b4

0800a708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a716:	2b00      	cmp	r3, #0
 800a718:	d108      	bne.n	800a72c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fbde 	bl	800aee0 <vPortFree>
				vPortFree( pxTCB );
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fbdb 	bl	800aee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a72a:	e018      	b.n	800a75e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a732:	2b01      	cmp	r3, #1
 800a734:	d103      	bne.n	800a73e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fbd2 	bl	800aee0 <vPortFree>
	}
 800a73c:	e00f      	b.n	800a75e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a744:	2b02      	cmp	r3, #2
 800a746:	d00a      	beq.n	800a75e <prvDeleteTCB+0x56>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	60fb      	str	r3, [r7, #12]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <prvDeleteTCB+0x54>
	}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <prvResetNextTaskUnblockTime+0x38>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d104      	bne.n	800a782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a77a:	f04f 32ff 	mov.w	r2, #4294967295
 800a77e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a780:	e008      	b.n	800a794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <prvResetNextTaskUnblockTime+0x38>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	4a04      	ldr	r2, [pc, #16]	; (800a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a792:	6013      	str	r3, [r2, #0]
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20004784 	.word	0x20004784
 800a7a4:	200047ec 	.word	0x200047ec

0800a7a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <xTaskGetSchedulerState+0x34>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	e008      	b.n	800a7ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <xTaskGetSchedulerState+0x38>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	e001      	b.n	800a7ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7ce:	687b      	ldr	r3, [r7, #4]
	}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	200047d8 	.word	0x200047d8
 800a7e0:	200047f4 	.word	0x200047f4

0800a7e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7ee:	4b29      	ldr	r3, [pc, #164]	; (800a894 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f4:	4b28      	ldr	r3, [pc, #160]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff facd 	bl	8009d9a <uxListRemove>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a806:	4b24      	ldr	r3, [pc, #144]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	2201      	movs	r2, #1
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	43da      	mvns	r2, r3
 800a814:	4b21      	ldr	r3, [pc, #132]	; (800a89c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4013      	ands	r3, r2
 800a81a:	4a20      	ldr	r2, [pc, #128]	; (800a89c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a81c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d10a      	bne.n	800a83c <prvAddCurrentTaskToDelayedList+0x58>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d007      	beq.n	800a83c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a82c:	4b1a      	ldr	r3, [pc, #104]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3304      	adds	r3, #4
 800a832:	4619      	mov	r1, r3
 800a834:	481a      	ldr	r0, [pc, #104]	; (800a8a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a836:	f7ff fa53 	bl	8009ce0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a83a:	e026      	b.n	800a88a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4413      	add	r3, r2
 800a842:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a844:	4b14      	ldr	r3, [pc, #80]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	429a      	cmp	r2, r3
 800a852:	d209      	bcs.n	800a868 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a854:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3304      	adds	r3, #4
 800a85e:	4619      	mov	r1, r3
 800a860:	4610      	mov	r0, r2
 800a862:	f7ff fa61 	bl	8009d28 <vListInsert>
}
 800a866:	e010      	b.n	800a88a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a868:	4b0f      	ldr	r3, [pc, #60]	; (800a8a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3304      	adds	r3, #4
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7ff fa57 	bl	8009d28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a87a:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	d202      	bcs.n	800a88a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a884:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6013      	str	r3, [r2, #0]
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	200047d0 	.word	0x200047d0
 800a898:	200046cc 	.word	0x200046cc
 800a89c:	200047d4 	.word	0x200047d4
 800a8a0:	200047b8 	.word	0x200047b8
 800a8a4:	20004788 	.word	0x20004788
 800a8a8:	20004784 	.word	0x20004784
 800a8ac:	200047ec 	.word	0x200047ec

0800a8b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3b04      	subs	r3, #4
 800a8c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3b04      	subs	r3, #4
 800a8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f023 0201 	bic.w	r2, r3, #1
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3b04      	subs	r3, #4
 800a8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8e0:	4a0c      	ldr	r2, [pc, #48]	; (800a914 <pxPortInitialiseStack+0x64>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3b14      	subs	r3, #20
 800a8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3b04      	subs	r3, #4
 800a8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f06f 0202 	mvn.w	r2, #2
 800a8fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3b20      	subs	r3, #32
 800a904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a906:	68fb      	ldr	r3, [r7, #12]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	0800a919 	.word	0x0800a919

0800a918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a922:	4b12      	ldr	r3, [pc, #72]	; (800a96c <prvTaskExitError+0x54>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92a:	d00a      	beq.n	800a942 <prvTaskExitError+0x2a>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	60fb      	str	r3, [r7, #12]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <prvTaskExitError+0x28>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	60bb      	str	r3, [r7, #8]
}
 800a954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a956:	bf00      	nop
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0fc      	beq.n	800a958 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a95e:	bf00      	nop
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20000018 	.word	0x20000018

0800a970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <pxCurrentTCBConst2>)
 800a972:	6819      	ldr	r1, [r3, #0]
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	f380 8809 	msr	PSP, r0
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f04f 0000 	mov.w	r0, #0
 800a986:	f380 8811 	msr	BASEPRI, r0
 800a98a:	4770      	bx	lr
 800a98c:	f3af 8000 	nop.w

0800a990 <pxCurrentTCBConst2>:
 800a990:	200046cc 	.word	0x200046cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop

0800a998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a998:	4808      	ldr	r0, [pc, #32]	; (800a9bc <prvPortStartFirstTask+0x24>)
 800a99a:	6800      	ldr	r0, [r0, #0]
 800a99c:	6800      	ldr	r0, [r0, #0]
 800a99e:	f380 8808 	msr	MSP, r0
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	f380 8814 	msr	CONTROL, r0
 800a9aa:	b662      	cpsie	i
 800a9ac:	b661      	cpsie	f
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	df00      	svc	0
 800a9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ba:	bf00      	nop
 800a9bc:	e000ed08 	.word	0xe000ed08

0800a9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9c6:	4b46      	ldr	r3, [pc, #280]	; (800aae0 <xPortStartScheduler+0x120>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a46      	ldr	r2, [pc, #280]	; (800aae4 <xPortStartScheduler+0x124>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10a      	bne.n	800a9e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	613b      	str	r3, [r7, #16]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9e6:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <xPortStartScheduler+0x120>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a3f      	ldr	r2, [pc, #252]	; (800aae8 <xPortStartScheduler+0x128>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d10a      	bne.n	800aa06 <xPortStartScheduler+0x46>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa06:	4b39      	ldr	r3, [pc, #228]	; (800aaec <xPortStartScheduler+0x12c>)
 800aa08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	4b31      	ldr	r3, [pc, #196]	; (800aaf0 <xPortStartScheduler+0x130>)
 800aa2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa34:	e009      	b.n	800aa4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa36:	4b2f      	ldr	r3, [pc, #188]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4a2d      	ldr	r2, [pc, #180]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d0ef      	beq.n	800aa36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa56:	4b27      	ldr	r3, [pc, #156]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1c3 0307 	rsb	r3, r3, #7
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d00a      	beq.n	800aa78 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60bb      	str	r3, [r7, #8]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	4a1d      	ldr	r2, [pc, #116]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa82:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa8a:	4a1a      	ldr	r2, [pc, #104]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa96:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a17      	ldr	r2, [pc, #92]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aa9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aaa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aaa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aaac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aaae:	f000 f8dd 	bl	800ac6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aab2:	4b12      	ldr	r3, [pc, #72]	; (800aafc <xPortStartScheduler+0x13c>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aab8:	f000 f8fc 	bl	800acb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aabc:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <xPortStartScheduler+0x140>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0f      	ldr	r2, [pc, #60]	; (800ab00 <xPortStartScheduler+0x140>)
 800aac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aac8:	f7ff ff66 	bl	800a998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aacc:	f7ff fd3a 	bl	800a544 <vTaskSwitchContext>
	prvTaskExitError();
 800aad0:	f7ff ff22 	bl	800a918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	e000ed00 	.word	0xe000ed00
 800aae4:	410fc271 	.word	0x410fc271
 800aae8:	410fc270 	.word	0x410fc270
 800aaec:	e000e400 	.word	0xe000e400
 800aaf0:	200047f8 	.word	0x200047f8
 800aaf4:	200047fc 	.word	0x200047fc
 800aaf8:	e000ed20 	.word	0xe000ed20
 800aafc:	20000018 	.word	0x20000018
 800ab00:	e000ef34 	.word	0xe000ef34

0800ab04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	607b      	str	r3, [r7, #4]
}
 800ab1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	4a0d      	ldr	r2, [pc, #52]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab28:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10f      	bne.n	800ab50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <vPortEnterCritical+0x5c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00a      	beq.n	800ab50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	603b      	str	r3, [r7, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <vPortEnterCritical+0x4a>
	}
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000018 	.word	0x20000018
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <vPortExitCritical+0x50>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10a      	bne.n	800ab88 <vPortExitCritical+0x24>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	607b      	str	r3, [r7, #4]
}
 800ab84:	bf00      	nop
 800ab86:	e7fe      	b.n	800ab86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab88:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <vPortExitCritical+0x50>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <vPortExitCritical+0x50>)
 800ab90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab92:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <vPortExitCritical+0x50>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <vPortExitCritical+0x42>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000018 	.word	0x20000018
	...

0800abc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abc0:	f3ef 8009 	mrs	r0, PSP
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <pxCurrentTCBConst>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	f01e 0f10 	tst.w	lr, #16
 800abd0:	bf08      	it	eq
 800abd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abda:	6010      	str	r0, [r2, #0]
 800abdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abe4:	f380 8811 	msr	BASEPRI, r0
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f7ff fca8 	bl	800a544 <vTaskSwitchContext>
 800abf4:	f04f 0000 	mov.w	r0, #0
 800abf8:	f380 8811 	msr	BASEPRI, r0
 800abfc:	bc09      	pop	{r0, r3}
 800abfe:	6819      	ldr	r1, [r3, #0]
 800ac00:	6808      	ldr	r0, [r1, #0]
 800ac02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac06:	f01e 0f10 	tst.w	lr, #16
 800ac0a:	bf08      	it	eq
 800ac0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac10:	f380 8809 	msr	PSP, r0
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w

0800ac20 <pxCurrentTCBConst>:
 800ac20:	200046cc 	.word	0x200046cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop

0800ac28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	607b      	str	r3, [r7, #4]
}
 800ac40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac42:	f7ff fbc7 	bl	800a3d4 <xTaskIncrementTick>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac4c:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <xPortSysTickHandler+0x40>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f383 8811 	msr	BASEPRI, r3
}
 800ac5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <vPortSetupTimerInterrupt+0x34>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac76:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <vPortSetupTimerInterrupt+0x38>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <vPortSetupTimerInterrupt+0x3c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <vPortSetupTimerInterrupt+0x40>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	099b      	lsrs	r3, r3, #6
 800ac88:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <vPortSetupTimerInterrupt+0x44>)
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac8e:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <vPortSetupTimerInterrupt+0x34>)
 800ac90:	2207      	movs	r2, #7
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	e000e010 	.word	0xe000e010
 800aca4:	e000e018 	.word	0xe000e018
 800aca8:	2000000c 	.word	0x2000000c
 800acac:	10624dd3 	.word	0x10624dd3
 800acb0:	e000e014 	.word	0xe000e014

0800acb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800acb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acc4 <vPortEnableVFP+0x10>
 800acb8:	6801      	ldr	r1, [r0, #0]
 800acba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acbe:	6001      	str	r1, [r0, #0]
 800acc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acc2:	bf00      	nop
 800acc4:	e000ed88 	.word	0xe000ed88

0800acc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800acce:	f3ef 8305 	mrs	r3, IPSR
 800acd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d914      	bls.n	800ad04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <vPortValidateInterruptPriority+0x70>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ace4:	4b15      	ldr	r3, [pc, #84]	; (800ad3c <vPortValidateInterruptPriority+0x74>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	7afa      	ldrb	r2, [r7, #11]
 800acea:	429a      	cmp	r2, r3
 800acec:	d20a      	bcs.n	800ad04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	607b      	str	r3, [r7, #4]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad04:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <vPortValidateInterruptPriority+0x78>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <vPortValidateInterruptPriority+0x7c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d90a      	bls.n	800ad2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	603b      	str	r3, [r7, #0]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <vPortValidateInterruptPriority+0x60>
	}
 800ad2a:	bf00      	nop
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	e000e3f0 	.word	0xe000e3f0
 800ad3c:	200047f8 	.word	0x200047f8
 800ad40:	e000ed0c 	.word	0xe000ed0c
 800ad44:	200047fc 	.word	0x200047fc

0800ad48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	; 0x28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad54:	f7ff fa72 	bl	800a23c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad58:	4b5b      	ldr	r3, [pc, #364]	; (800aec8 <pvPortMalloc+0x180>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad60:	f000 f920 	bl	800afa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad64:	4b59      	ldr	r3, [pc, #356]	; (800aecc <pvPortMalloc+0x184>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f040 8093 	bne.w	800ae98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01d      	beq.n	800adb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad78:	2208      	movs	r2, #8
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d014      	beq.n	800adb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f023 0307 	bic.w	r3, r3, #7
 800ad90:	3308      	adds	r3, #8
 800ad92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <pvPortMalloc+0x6c>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	617b      	str	r3, [r7, #20]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d06e      	beq.n	800ae98 <pvPortMalloc+0x150>
 800adba:	4b45      	ldr	r3, [pc, #276]	; (800aed0 <pvPortMalloc+0x188>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d869      	bhi.n	800ae98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800adc4:	4b43      	ldr	r3, [pc, #268]	; (800aed4 <pvPortMalloc+0x18c>)
 800adc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adc8:	4b42      	ldr	r3, [pc, #264]	; (800aed4 <pvPortMalloc+0x18c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adce:	e004      	b.n	800adda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d903      	bls.n	800adec <pvPortMalloc+0xa4>
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f1      	bne.n	800add0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adec:	4b36      	ldr	r3, [pc, #216]	; (800aec8 <pvPortMalloc+0x180>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d050      	beq.n	800ae98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2208      	movs	r2, #8
 800adfc:	4413      	add	r3, r2
 800adfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	2308      	movs	r3, #8
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d91f      	bls.n	800ae58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <pvPortMalloc+0xf8>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	613b      	str	r3, [r7, #16]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	1ad2      	subs	r2, r2, r3
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae52:	69b8      	ldr	r0, [r7, #24]
 800ae54:	f000 f908 	bl	800b068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae58:	4b1d      	ldr	r3, [pc, #116]	; (800aed0 <pvPortMalloc+0x188>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	4a1b      	ldr	r2, [pc, #108]	; (800aed0 <pvPortMalloc+0x188>)
 800ae64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae66:	4b1a      	ldr	r3, [pc, #104]	; (800aed0 <pvPortMalloc+0x188>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <pvPortMalloc+0x190>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d203      	bcs.n	800ae7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae72:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <pvPortMalloc+0x188>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a18      	ldr	r2, [pc, #96]	; (800aed8 <pvPortMalloc+0x190>)
 800ae78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	4b13      	ldr	r3, [pc, #76]	; (800aecc <pvPortMalloc+0x184>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	431a      	orrs	r2, r3
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <pvPortMalloc+0x194>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	4a11      	ldr	r2, [pc, #68]	; (800aedc <pvPortMalloc+0x194>)
 800ae96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae98:	f7ff f9de 	bl	800a258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f003 0307 	and.w	r3, r3, #7
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <pvPortMalloc+0x174>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	60fb      	str	r3, [r7, #12]
}
 800aeb8:	bf00      	nop
 800aeba:	e7fe      	b.n	800aeba <pvPortMalloc+0x172>
	return pvReturn;
 800aebc:	69fb      	ldr	r3, [r7, #28]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3728      	adds	r7, #40	; 0x28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20008408 	.word	0x20008408
 800aecc:	2000841c 	.word	0x2000841c
 800aed0:	2000840c 	.word	0x2000840c
 800aed4:	20008400 	.word	0x20008400
 800aed8:	20008410 	.word	0x20008410
 800aedc:	20008414 	.word	0x20008414

0800aee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d04d      	beq.n	800af8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aef2:	2308      	movs	r3, #8
 800aef4:	425b      	negs	r3, r3
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4413      	add	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	4b24      	ldr	r3, [pc, #144]	; (800af98 <vPortFree+0xb8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4013      	ands	r3, r2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10a      	bne.n	800af24 <vPortFree+0x44>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	60fb      	str	r3, [r7, #12]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00a      	beq.n	800af42 <vPortFree+0x62>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	60bb      	str	r3, [r7, #8]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	4b14      	ldr	r3, [pc, #80]	; (800af98 <vPortFree+0xb8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01e      	beq.n	800af8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d11a      	bne.n	800af8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	4b0e      	ldr	r3, [pc, #56]	; (800af98 <vPortFree+0xb8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	43db      	mvns	r3, r3
 800af62:	401a      	ands	r2, r3
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af68:	f7ff f968 	bl	800a23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <vPortFree+0xbc>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4413      	add	r3, r2
 800af76:	4a09      	ldr	r2, [pc, #36]	; (800af9c <vPortFree+0xbc>)
 800af78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af7a:	6938      	ldr	r0, [r7, #16]
 800af7c:	f000 f874 	bl	800b068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af80:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <vPortFree+0xc0>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	4a06      	ldr	r2, [pc, #24]	; (800afa0 <vPortFree+0xc0>)
 800af88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af8a:	f7ff f965 	bl	800a258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af8e:	bf00      	nop
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	2000841c 	.word	0x2000841c
 800af9c:	2000840c 	.word	0x2000840c
 800afa0:	20008418 	.word	0x20008418

0800afa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800afae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afb0:	4b27      	ldr	r3, [pc, #156]	; (800b050 <prvHeapInit+0xac>)
 800afb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00c      	beq.n	800afd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3307      	adds	r3, #7
 800afc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	4a1f      	ldr	r2, [pc, #124]	; (800b050 <prvHeapInit+0xac>)
 800afd4:	4413      	add	r3, r2
 800afd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afdc:	4a1d      	ldr	r2, [pc, #116]	; (800b054 <prvHeapInit+0xb0>)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afe2:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <prvHeapInit+0xb0>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	4413      	add	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aff0:	2208      	movs	r2, #8
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 0307 	bic.w	r3, r3, #7
 800affe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <prvHeapInit+0xb4>)
 800b004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <prvHeapInit+0xb4>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2200      	movs	r2, #0
 800b00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <prvHeapInit+0xb4>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	1ad2      	subs	r2, r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b024:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <prvHeapInit+0xb4>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <prvHeapInit+0xb8>)
 800b032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <prvHeapInit+0xbc>)
 800b03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b03c:	4b09      	ldr	r3, [pc, #36]	; (800b064 <prvHeapInit+0xc0>)
 800b03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b042:	601a      	str	r2, [r3, #0]
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	20004800 	.word	0x20004800
 800b054:	20008400 	.word	0x20008400
 800b058:	20008408 	.word	0x20008408
 800b05c:	20008410 	.word	0x20008410
 800b060:	2000840c 	.word	0x2000840c
 800b064:	2000841c 	.word	0x2000841c

0800b068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b070:	4b28      	ldr	r3, [pc, #160]	; (800b114 <prvInsertBlockIntoFreeList+0xac>)
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e002      	b.n	800b07c <prvInsertBlockIntoFreeList+0x14>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d8f7      	bhi.n	800b076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4413      	add	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	429a      	cmp	r2, r3
 800b096:	d108      	bne.n	800b0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d118      	bne.n	800b0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <prvInsertBlockIntoFreeList+0xb0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d00d      	beq.n	800b0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	441a      	add	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	e008      	b.n	800b0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0e6:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <prvInsertBlockIntoFreeList+0xb0>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	e003      	b.n	800b0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d002      	beq.n	800b106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20008400 	.word	0x20008400
 800b118:	20008408 	.word	0x20008408

0800b11c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b122:	2300      	movs	r3, #0
 800b124:	71fb      	strb	r3, [r7, #7]
 800b126:	e026      	b.n	800b176 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b128:	79fb      	ldrb	r3, [r7, #7]
 800b12a:	3b50      	subs	r3, #80	; 0x50
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f000 f82b 	bl	800b18c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b136:	2100      	movs	r1, #0
 800b138:	2000      	movs	r0, #0
 800b13a:	f000 f827 	bl	800b18c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b13e:	2100      	movs	r1, #0
 800b140:	2010      	movs	r0, #16
 800b142:	f000 f823 	bl	800b18c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b146:	2300      	movs	r3, #0
 800b148:	71bb      	strb	r3, [r7, #6]
 800b14a:	e00d      	b.n	800b168 <OLED_Refresh_Gram+0x4c>
 800b14c:	79ba      	ldrb	r2, [r7, #6]
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	490d      	ldr	r1, [pc, #52]	; (800b188 <OLED_Refresh_Gram+0x6c>)
 800b152:	00d2      	lsls	r2, r2, #3
 800b154:	440a      	add	r2, r1
 800b156:	4413      	add	r3, r2
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2101      	movs	r1, #1
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f815 	bl	800b18c <OLED_WR_Byte>
 800b162:	79bb      	ldrb	r3, [r7, #6]
 800b164:	3301      	adds	r3, #1
 800b166:	71bb      	strb	r3, [r7, #6]
 800b168:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	daed      	bge.n	800b14c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	3301      	adds	r3, #1
 800b174:	71fb      	strb	r3, [r7, #7]
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	2b07      	cmp	r3, #7
 800b17a:	d9d5      	bls.n	800b128 <OLED_Refresh_Gram+0xc>
	}   
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20008420 	.word	0x20008420

0800b18c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	4603      	mov	r3, r0
 800b194:	460a      	mov	r2, r1
 800b196:	71fb      	strb	r3, [r7, #7]
 800b198:	4613      	mov	r3, r2
 800b19a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b19c:	79bb      	ldrb	r3, [r7, #6]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1a8:	481c      	ldr	r0, [pc, #112]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1aa:	f7fa fb5b 	bl	8005864 <HAL_GPIO_WritePin>
 800b1ae:	e005      	b.n	800b1bc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1b6:	4819      	ldr	r0, [pc, #100]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1b8:	f7fa fb54 	bl	8005864 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
 800b1c0:	e01e      	b.n	800b200 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2120      	movs	r1, #32
 800b1c6:	4815      	ldr	r0, [pc, #84]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1c8:	f7fa fb4c 	bl	8005864 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b1cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	da05      	bge.n	800b1e0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2140      	movs	r1, #64	; 0x40
 800b1d8:	4810      	ldr	r0, [pc, #64]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1da:	f7fa fb43 	bl	8005864 <HAL_GPIO_WritePin>
 800b1de:	e004      	b.n	800b1ea <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2140      	movs	r1, #64	; 0x40
 800b1e4:	480d      	ldr	r0, [pc, #52]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1e6:	f7fa fb3d 	bl	8005864 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	2120      	movs	r1, #32
 800b1ee:	480b      	ldr	r0, [pc, #44]	; (800b21c <OLED_WR_Byte+0x90>)
 800b1f0:	f7fa fb38 	bl	8005864 <HAL_GPIO_WritePin>
		dat<<=1;   
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	2b07      	cmp	r3, #7
 800b204:	d9dd      	bls.n	800b1c2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b206:	2201      	movs	r2, #1
 800b208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b20c:	4803      	ldr	r0, [pc, #12]	; (800b21c <OLED_WR_Byte+0x90>)
 800b20e:	f7fa fb29 	bl	8005864 <HAL_GPIO_WritePin>
} 
 800b212:	bf00      	nop
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	40021000 	.word	0x40021000

0800b220 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b226:	2300      	movs	r3, #0
 800b228:	71fb      	strb	r3, [r7, #7]
 800b22a:	e014      	b.n	800b256 <OLED_Clear+0x36>
 800b22c:	2300      	movs	r3, #0
 800b22e:	71bb      	strb	r3, [r7, #6]
 800b230:	e00a      	b.n	800b248 <OLED_Clear+0x28>
 800b232:	79ba      	ldrb	r2, [r7, #6]
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	490c      	ldr	r1, [pc, #48]	; (800b268 <OLED_Clear+0x48>)
 800b238:	00d2      	lsls	r2, r2, #3
 800b23a:	440a      	add	r2, r1
 800b23c:	4413      	add	r3, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	79bb      	ldrb	r3, [r7, #6]
 800b244:	3301      	adds	r3, #1
 800b246:	71bb      	strb	r3, [r7, #6]
 800b248:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	daf0      	bge.n	800b232 <OLED_Clear+0x12>
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	3301      	adds	r3, #1
 800b254:	71fb      	strb	r3, [r7, #7]
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	2b07      	cmp	r3, #7
 800b25a:	d9e7      	bls.n	800b22c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b25c:	f7ff ff5e 	bl	800b11c <OLED_Refresh_Gram>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20008420 	.word	0x20008420

0800b26c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	71fb      	strb	r3, [r7, #7]
 800b276:	460b      	mov	r3, r1
 800b278:	71bb      	strb	r3, [r7, #6]
 800b27a:	4613      	mov	r3, r2
 800b27c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b27e:	2300      	movs	r3, #0
 800b280:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b286:	2b00      	cmp	r3, #0
 800b288:	db41      	blt.n	800b30e <OLED_DrawPoint+0xa2>
 800b28a:	79bb      	ldrb	r3, [r7, #6]
 800b28c:	2b3f      	cmp	r3, #63	; 0x3f
 800b28e:	d83e      	bhi.n	800b30e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b290:	79bb      	ldrb	r3, [r7, #6]
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f1c3 0307 	rsb	r3, r3, #7
 800b29a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b29c:	79bb      	ldrb	r3, [r7, #6]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b2a4:	7b7b      	ldrb	r3, [r7, #13]
 800b2a6:	f1c3 0307 	rsb	r3, r3, #7
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b2b2:	797b      	ldrb	r3, [r7, #5]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d012      	beq.n	800b2de <OLED_DrawPoint+0x72>
 800b2b8:	79fa      	ldrb	r2, [r7, #7]
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	4917      	ldr	r1, [pc, #92]	; (800b31c <OLED_DrawPoint+0xb0>)
 800b2be:	00d2      	lsls	r2, r2, #3
 800b2c0:	440a      	add	r2, r1
 800b2c2:	4413      	add	r3, r2
 800b2c4:	7818      	ldrb	r0, [r3, #0]
 800b2c6:	79fa      	ldrb	r2, [r7, #7]
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ca:	7bf9      	ldrb	r1, [r7, #15]
 800b2cc:	4301      	orrs	r1, r0
 800b2ce:	b2c8      	uxtb	r0, r1
 800b2d0:	4912      	ldr	r1, [pc, #72]	; (800b31c <OLED_DrawPoint+0xb0>)
 800b2d2:	00d2      	lsls	r2, r2, #3
 800b2d4:	440a      	add	r2, r1
 800b2d6:	4413      	add	r3, r2
 800b2d8:	4602      	mov	r2, r0
 800b2da:	701a      	strb	r2, [r3, #0]
 800b2dc:	e018      	b.n	800b310 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b2de:	79fa      	ldrb	r2, [r7, #7]
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	490e      	ldr	r1, [pc, #56]	; (800b31c <OLED_DrawPoint+0xb0>)
 800b2e4:	00d2      	lsls	r2, r2, #3
 800b2e6:	440a      	add	r2, r1
 800b2e8:	4413      	add	r3, r2
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	b25a      	sxtb	r2, r3
 800b2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	b25b      	sxtb	r3, r3
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	b259      	sxtb	r1, r3
 800b2fa:	79fa      	ldrb	r2, [r7, #7]
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	b2c8      	uxtb	r0, r1
 800b300:	4906      	ldr	r1, [pc, #24]	; (800b31c <OLED_DrawPoint+0xb0>)
 800b302:	00d2      	lsls	r2, r2, #3
 800b304:	440a      	add	r2, r1
 800b306:	4413      	add	r3, r2
 800b308:	4602      	mov	r2, r0
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	e000      	b.n	800b310 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b30e:	bf00      	nop
}
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20008420 	.word	0x20008420

0800b320 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	4611      	mov	r1, r2
 800b32c:	461a      	mov	r2, r3
 800b32e:	4623      	mov	r3, r4
 800b330:	71fb      	strb	r3, [r7, #7]
 800b332:	4603      	mov	r3, r0
 800b334:	71bb      	strb	r3, [r7, #6]
 800b336:	460b      	mov	r3, r1
 800b338:	717b      	strb	r3, [r7, #5]
 800b33a:	4613      	mov	r3, r2
 800b33c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b33e:	79bb      	ldrb	r3, [r7, #6]
 800b340:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b342:	797b      	ldrb	r3, [r7, #5]
 800b344:	3b20      	subs	r3, #32
 800b346:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]
 800b34c:	e04d      	b.n	800b3ea <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b34e:	793b      	ldrb	r3, [r7, #4]
 800b350:	2b0c      	cmp	r3, #12
 800b352:	d10b      	bne.n	800b36c <OLED_ShowChar+0x4c>
 800b354:	797a      	ldrb	r2, [r7, #5]
 800b356:	7bb9      	ldrb	r1, [r7, #14]
 800b358:	4828      	ldr	r0, [pc, #160]	; (800b3fc <OLED_ShowChar+0xdc>)
 800b35a:	4613      	mov	r3, r2
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4403      	add	r3, r0
 800b364:	440b      	add	r3, r1
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	73fb      	strb	r3, [r7, #15]
 800b36a:	e007      	b.n	800b37c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b36c:	797a      	ldrb	r2, [r7, #5]
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	4923      	ldr	r1, [pc, #140]	; (800b400 <OLED_ShowChar+0xe0>)
 800b372:	0112      	lsls	r2, r2, #4
 800b374:	440a      	add	r2, r1
 800b376:	4413      	add	r3, r2
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	737b      	strb	r3, [r7, #13]
 800b380:	e02d      	b.n	800b3de <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b386:	2b00      	cmp	r3, #0
 800b388:	da07      	bge.n	800b39a <OLED_ShowChar+0x7a>
 800b38a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b38e:	79b9      	ldrb	r1, [r7, #6]
 800b390:	79fb      	ldrb	r3, [r7, #7]
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff ff6a 	bl	800b26c <OLED_DrawPoint>
 800b398:	e00c      	b.n	800b3b4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b39a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bf0c      	ite	eq
 800b3a2:	2301      	moveq	r3, #1
 800b3a4:	2300      	movne	r3, #0
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	79b9      	ldrb	r1, [r7, #6]
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff ff5c 	bl	800b26c <OLED_DrawPoint>
			temp<<=1;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	73fb      	strb	r3, [r7, #15]
			y++;
 800b3ba:	79bb      	ldrb	r3, [r7, #6]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b3c0:	79ba      	ldrb	r2, [r7, #6]
 800b3c2:	7b3b      	ldrb	r3, [r7, #12]
 800b3c4:	1ad2      	subs	r2, r2, r3
 800b3c6:	793b      	ldrb	r3, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d105      	bne.n	800b3d8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b3cc:	7b3b      	ldrb	r3, [r7, #12]
 800b3ce:	71bb      	strb	r3, [r7, #6]
				x++;
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	71fb      	strb	r3, [r7, #7]
				break;
 800b3d6:	e005      	b.n	800b3e4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b3d8:	7b7b      	ldrb	r3, [r7, #13]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	737b      	strb	r3, [r7, #13]
 800b3de:	7b7b      	ldrb	r3, [r7, #13]
 800b3e0:	2b07      	cmp	r3, #7
 800b3e2:	d9ce      	bls.n	800b382 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	73bb      	strb	r3, [r7, #14]
 800b3ea:	7bba      	ldrb	r2, [r7, #14]
 800b3ec:	793b      	ldrb	r3, [r7, #4]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d3ad      	bcc.n	800b34e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd90      	pop	{r4, r7, pc}
 800b3fc:	0800c260 	.word	0x0800c260
 800b400:	0800c6d4 	.word	0x0800c6d4

0800b404 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af02      	add	r7, sp, #8
 800b40a:	4603      	mov	r3, r0
 800b40c:	603a      	str	r2, [r7, #0]
 800b40e:	71fb      	strb	r3, [r7, #7]
 800b410:	460b      	mov	r3, r1
 800b412:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b414:	e01f      	b.n	800b456 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	2b7a      	cmp	r3, #122	; 0x7a
 800b41a:	d904      	bls.n	800b426 <OLED_ShowString+0x22>
 800b41c:	2300      	movs	r3, #0
 800b41e:	71fb      	strb	r3, [r7, #7]
 800b420:	79bb      	ldrb	r3, [r7, #6]
 800b422:	3310      	adds	r3, #16
 800b424:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b426:	79bb      	ldrb	r3, [r7, #6]
 800b428:	2b3a      	cmp	r3, #58	; 0x3a
 800b42a:	d905      	bls.n	800b438 <OLED_ShowString+0x34>
 800b42c:	2300      	movs	r3, #0
 800b42e:	71fb      	strb	r3, [r7, #7]
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	71bb      	strb	r3, [r7, #6]
 800b434:	f7ff fef4 	bl	800b220 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	79b9      	ldrb	r1, [r7, #6]
 800b43e:	79f8      	ldrb	r0, [r7, #7]
 800b440:	2301      	movs	r3, #1
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	230c      	movs	r3, #12
 800b446:	f7ff ff6b 	bl	800b320 <OLED_ShowChar>
        x+=8;
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	3308      	adds	r3, #8
 800b44e:	71fb      	strb	r3, [r7, #7]
        p++;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1db      	bne.n	800b416 <OLED_ShowString+0x12>
    }  
}	 
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <OLED_Init>:

void OLED_Init(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b46c:	f7fb f9aa 	bl	80067c4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b470:	4b41      	ldr	r3, [pc, #260]	; (800b578 <OLED_Init+0x110>)
 800b472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b474:	4a40      	ldr	r2, [pc, #256]	; (800b578 <OLED_Init+0x110>)
 800b476:	f023 0301 	bic.w	r3, r3, #1
 800b47a:	6713      	str	r3, [r2, #112]	; 0x70
 800b47c:	4b3e      	ldr	r3, [pc, #248]	; (800b578 <OLED_Init+0x110>)
 800b47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b480:	4a3d      	ldr	r2, [pc, #244]	; (800b578 <OLED_Init+0x110>)
 800b482:	f023 0304 	bic.w	r3, r3, #4
 800b486:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b488:	f7fb f9b0 	bl	80067ec <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b48c:	2200      	movs	r2, #0
 800b48e:	2180      	movs	r1, #128	; 0x80
 800b490:	483a      	ldr	r0, [pc, #232]	; (800b57c <OLED_Init+0x114>)
 800b492:	f7fa f9e7 	bl	8005864 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b496:	2064      	movs	r0, #100	; 0x64
 800b498:	f7f8 fefe 	bl	8004298 <HAL_Delay>
	OLED_RST_Set();
 800b49c:	2201      	movs	r2, #1
 800b49e:	2180      	movs	r1, #128	; 0x80
 800b4a0:	4836      	ldr	r0, [pc, #216]	; (800b57c <OLED_Init+0x114>)
 800b4a2:	f7fa f9df 	bl	8005864 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	20ae      	movs	r0, #174	; 0xae
 800b4aa:	f7ff fe6f 	bl	800b18c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	20d5      	movs	r0, #213	; 0xd5
 800b4b2:	f7ff fe6b 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	2050      	movs	r0, #80	; 0x50
 800b4ba:	f7ff fe67 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b4be:	2100      	movs	r1, #0
 800b4c0:	20a8      	movs	r0, #168	; 0xa8
 800b4c2:	f7ff fe63 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	203f      	movs	r0, #63	; 0x3f
 800b4ca:	f7ff fe5f 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	20d3      	movs	r0, #211	; 0xd3
 800b4d2:	f7ff fe5b 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f7ff fe57 	bl	800b18c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b4de:	2100      	movs	r1, #0
 800b4e0:	2040      	movs	r0, #64	; 0x40
 800b4e2:	f7ff fe53 	bl	800b18c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	208d      	movs	r0, #141	; 0x8d
 800b4ea:	f7ff fe4f 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	2014      	movs	r0, #20
 800b4f2:	f7ff fe4b 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	2020      	movs	r0, #32
 800b4fa:	f7ff fe47 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b4fe:	2100      	movs	r1, #0
 800b500:	2002      	movs	r0, #2
 800b502:	f7ff fe43 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b506:	2100      	movs	r1, #0
 800b508:	20a1      	movs	r0, #161	; 0xa1
 800b50a:	f7ff fe3f 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b50e:	2100      	movs	r1, #0
 800b510:	20c0      	movs	r0, #192	; 0xc0
 800b512:	f7ff fe3b 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b516:	2100      	movs	r1, #0
 800b518:	20da      	movs	r0, #218	; 0xda
 800b51a:	f7ff fe37 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b51e:	2100      	movs	r1, #0
 800b520:	2012      	movs	r0, #18
 800b522:	f7ff fe33 	bl	800b18c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b526:	2100      	movs	r1, #0
 800b528:	2081      	movs	r0, #129	; 0x81
 800b52a:	f7ff fe2f 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b52e:	2100      	movs	r1, #0
 800b530:	20ef      	movs	r0, #239	; 0xef
 800b532:	f7ff fe2b 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b536:	2100      	movs	r1, #0
 800b538:	20d9      	movs	r0, #217	; 0xd9
 800b53a:	f7ff fe27 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b53e:	2100      	movs	r1, #0
 800b540:	20f1      	movs	r0, #241	; 0xf1
 800b542:	f7ff fe23 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b546:	2100      	movs	r1, #0
 800b548:	20db      	movs	r0, #219	; 0xdb
 800b54a:	f7ff fe1f 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b54e:	2100      	movs	r1, #0
 800b550:	2030      	movs	r0, #48	; 0x30
 800b552:	f7ff fe1b 	bl	800b18c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b556:	2100      	movs	r1, #0
 800b558:	20a4      	movs	r0, #164	; 0xa4
 800b55a:	f7ff fe17 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b55e:	2100      	movs	r1, #0
 800b560:	20a6      	movs	r0, #166	; 0xa6
 800b562:	f7ff fe13 	bl	800b18c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b566:	2100      	movs	r1, #0
 800b568:	20af      	movs	r0, #175	; 0xaf
 800b56a:	f7ff fe0f 	bl	800b18c <OLED_WR_Byte>
	OLED_Clear(); 
 800b56e:	f7ff fe57 	bl	800b220 <OLED_Clear>
 800b572:	bf00      	nop
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40023800 	.word	0x40023800
 800b57c:	40021000 	.word	0x40021000

0800b580 <atoi>:
 800b580:	220a      	movs	r2, #10
 800b582:	2100      	movs	r1, #0
 800b584:	f000 b8e2 	b.w	800b74c <strtol>

0800b588 <__errno>:
 800b588:	4b01      	ldr	r3, [pc, #4]	; (800b590 <__errno+0x8>)
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	2000001c 	.word	0x2000001c

0800b594 <__libc_init_array>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4d0d      	ldr	r5, [pc, #52]	; (800b5cc <__libc_init_array+0x38>)
 800b598:	4c0d      	ldr	r4, [pc, #52]	; (800b5d0 <__libc_init_array+0x3c>)
 800b59a:	1b64      	subs	r4, r4, r5
 800b59c:	10a4      	asrs	r4, r4, #2
 800b59e:	2600      	movs	r6, #0
 800b5a0:	42a6      	cmp	r6, r4
 800b5a2:	d109      	bne.n	800b5b8 <__libc_init_array+0x24>
 800b5a4:	4d0b      	ldr	r5, [pc, #44]	; (800b5d4 <__libc_init_array+0x40>)
 800b5a6:	4c0c      	ldr	r4, [pc, #48]	; (800b5d8 <__libc_init_array+0x44>)
 800b5a8:	f000 fd1a 	bl	800bfe0 <_init>
 800b5ac:	1b64      	subs	r4, r4, r5
 800b5ae:	10a4      	asrs	r4, r4, #2
 800b5b0:	2600      	movs	r6, #0
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	d105      	bne.n	800b5c2 <__libc_init_array+0x2e>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5bc:	4798      	blx	r3
 800b5be:	3601      	adds	r6, #1
 800b5c0:	e7ee      	b.n	800b5a0 <__libc_init_array+0xc>
 800b5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c6:	4798      	blx	r3
 800b5c8:	3601      	adds	r6, #1
 800b5ca:	e7f2      	b.n	800b5b2 <__libc_init_array+0x1e>
 800b5cc:	0800ce00 	.word	0x0800ce00
 800b5d0:	0800ce00 	.word	0x0800ce00
 800b5d4:	0800ce00 	.word	0x0800ce00
 800b5d8:	0800ce04 	.word	0x0800ce04

0800b5dc <memcpy>:
 800b5dc:	440a      	add	r2, r1
 800b5de:	4291      	cmp	r1, r2
 800b5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e4:	d100      	bne.n	800b5e8 <memcpy+0xc>
 800b5e6:	4770      	bx	lr
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f2:	4291      	cmp	r1, r2
 800b5f4:	d1f9      	bne.n	800b5ea <memcpy+0xe>
 800b5f6:	bd10      	pop	{r4, pc}

0800b5f8 <memset>:
 800b5f8:	4402      	add	r2, r0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d100      	bne.n	800b602 <memset+0xa>
 800b600:	4770      	bx	lr
 800b602:	f803 1b01 	strb.w	r1, [r3], #1
 800b606:	e7f9      	b.n	800b5fc <memset+0x4>

0800b608 <siprintf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b500      	push	{lr}
 800b60c:	b09c      	sub	sp, #112	; 0x70
 800b60e:	ab1d      	add	r3, sp, #116	; 0x74
 800b610:	9002      	str	r0, [sp, #8]
 800b612:	9006      	str	r0, [sp, #24]
 800b614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b618:	4809      	ldr	r0, [pc, #36]	; (800b640 <siprintf+0x38>)
 800b61a:	9107      	str	r1, [sp, #28]
 800b61c:	9104      	str	r1, [sp, #16]
 800b61e:	4909      	ldr	r1, [pc, #36]	; (800b644 <siprintf+0x3c>)
 800b620:	f853 2b04 	ldr.w	r2, [r3], #4
 800b624:	9105      	str	r1, [sp, #20]
 800b626:	6800      	ldr	r0, [r0, #0]
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	a902      	add	r1, sp, #8
 800b62c:	f000 f8f4 	bl	800b818 <_svfiprintf_r>
 800b630:	9b02      	ldr	r3, [sp, #8]
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	b01c      	add	sp, #112	; 0x70
 800b638:	f85d eb04 	ldr.w	lr, [sp], #4
 800b63c:	b003      	add	sp, #12
 800b63e:	4770      	bx	lr
 800b640:	2000001c 	.word	0x2000001c
 800b644:	ffff0208 	.word	0xffff0208

0800b648 <_strtol_l.constprop.0>:
 800b648:	2b01      	cmp	r3, #1
 800b64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64e:	d001      	beq.n	800b654 <_strtol_l.constprop.0+0xc>
 800b650:	2b24      	cmp	r3, #36	; 0x24
 800b652:	d906      	bls.n	800b662 <_strtol_l.constprop.0+0x1a>
 800b654:	f7ff ff98 	bl	800b588 <__errno>
 800b658:	2316      	movs	r3, #22
 800b65a:	6003      	str	r3, [r0, #0]
 800b65c:	2000      	movs	r0, #0
 800b65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b748 <_strtol_l.constprop.0+0x100>
 800b666:	460d      	mov	r5, r1
 800b668:	462e      	mov	r6, r5
 800b66a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b66e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b672:	f017 0708 	ands.w	r7, r7, #8
 800b676:	d1f7      	bne.n	800b668 <_strtol_l.constprop.0+0x20>
 800b678:	2c2d      	cmp	r4, #45	; 0x2d
 800b67a:	d132      	bne.n	800b6e2 <_strtol_l.constprop.0+0x9a>
 800b67c:	782c      	ldrb	r4, [r5, #0]
 800b67e:	2701      	movs	r7, #1
 800b680:	1cb5      	adds	r5, r6, #2
 800b682:	2b00      	cmp	r3, #0
 800b684:	d05b      	beq.n	800b73e <_strtol_l.constprop.0+0xf6>
 800b686:	2b10      	cmp	r3, #16
 800b688:	d109      	bne.n	800b69e <_strtol_l.constprop.0+0x56>
 800b68a:	2c30      	cmp	r4, #48	; 0x30
 800b68c:	d107      	bne.n	800b69e <_strtol_l.constprop.0+0x56>
 800b68e:	782c      	ldrb	r4, [r5, #0]
 800b690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b694:	2c58      	cmp	r4, #88	; 0x58
 800b696:	d14d      	bne.n	800b734 <_strtol_l.constprop.0+0xec>
 800b698:	786c      	ldrb	r4, [r5, #1]
 800b69a:	2310      	movs	r3, #16
 800b69c:	3502      	adds	r5, #2
 800b69e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6a6:	f04f 0c00 	mov.w	ip, #0
 800b6aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800b6ae:	4666      	mov	r6, ip
 800b6b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b6b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b6b8:	f1be 0f09 	cmp.w	lr, #9
 800b6bc:	d816      	bhi.n	800b6ec <_strtol_l.constprop.0+0xa4>
 800b6be:	4674      	mov	r4, lr
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	dd24      	ble.n	800b70e <_strtol_l.constprop.0+0xc6>
 800b6c4:	f1bc 0f00 	cmp.w	ip, #0
 800b6c8:	db1e      	blt.n	800b708 <_strtol_l.constprop.0+0xc0>
 800b6ca:	45b1      	cmp	r9, r6
 800b6cc:	d31c      	bcc.n	800b708 <_strtol_l.constprop.0+0xc0>
 800b6ce:	d101      	bne.n	800b6d4 <_strtol_l.constprop.0+0x8c>
 800b6d0:	45a2      	cmp	sl, r4
 800b6d2:	db19      	blt.n	800b708 <_strtol_l.constprop.0+0xc0>
 800b6d4:	fb06 4603 	mla	r6, r6, r3, r4
 800b6d8:	f04f 0c01 	mov.w	ip, #1
 800b6dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6e0:	e7e8      	b.n	800b6b4 <_strtol_l.constprop.0+0x6c>
 800b6e2:	2c2b      	cmp	r4, #43	; 0x2b
 800b6e4:	bf04      	itt	eq
 800b6e6:	782c      	ldrbeq	r4, [r5, #0]
 800b6e8:	1cb5      	addeq	r5, r6, #2
 800b6ea:	e7ca      	b.n	800b682 <_strtol_l.constprop.0+0x3a>
 800b6ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b6f0:	f1be 0f19 	cmp.w	lr, #25
 800b6f4:	d801      	bhi.n	800b6fa <_strtol_l.constprop.0+0xb2>
 800b6f6:	3c37      	subs	r4, #55	; 0x37
 800b6f8:	e7e2      	b.n	800b6c0 <_strtol_l.constprop.0+0x78>
 800b6fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b6fe:	f1be 0f19 	cmp.w	lr, #25
 800b702:	d804      	bhi.n	800b70e <_strtol_l.constprop.0+0xc6>
 800b704:	3c57      	subs	r4, #87	; 0x57
 800b706:	e7db      	b.n	800b6c0 <_strtol_l.constprop.0+0x78>
 800b708:	f04f 3cff 	mov.w	ip, #4294967295
 800b70c:	e7e6      	b.n	800b6dc <_strtol_l.constprop.0+0x94>
 800b70e:	f1bc 0f00 	cmp.w	ip, #0
 800b712:	da05      	bge.n	800b720 <_strtol_l.constprop.0+0xd8>
 800b714:	2322      	movs	r3, #34	; 0x22
 800b716:	6003      	str	r3, [r0, #0]
 800b718:	4646      	mov	r6, r8
 800b71a:	b942      	cbnz	r2, 800b72e <_strtol_l.constprop.0+0xe6>
 800b71c:	4630      	mov	r0, r6
 800b71e:	e79e      	b.n	800b65e <_strtol_l.constprop.0+0x16>
 800b720:	b107      	cbz	r7, 800b724 <_strtol_l.constprop.0+0xdc>
 800b722:	4276      	negs	r6, r6
 800b724:	2a00      	cmp	r2, #0
 800b726:	d0f9      	beq.n	800b71c <_strtol_l.constprop.0+0xd4>
 800b728:	f1bc 0f00 	cmp.w	ip, #0
 800b72c:	d000      	beq.n	800b730 <_strtol_l.constprop.0+0xe8>
 800b72e:	1e69      	subs	r1, r5, #1
 800b730:	6011      	str	r1, [r2, #0]
 800b732:	e7f3      	b.n	800b71c <_strtol_l.constprop.0+0xd4>
 800b734:	2430      	movs	r4, #48	; 0x30
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1b1      	bne.n	800b69e <_strtol_l.constprop.0+0x56>
 800b73a:	2308      	movs	r3, #8
 800b73c:	e7af      	b.n	800b69e <_strtol_l.constprop.0+0x56>
 800b73e:	2c30      	cmp	r4, #48	; 0x30
 800b740:	d0a5      	beq.n	800b68e <_strtol_l.constprop.0+0x46>
 800b742:	230a      	movs	r3, #10
 800b744:	e7ab      	b.n	800b69e <_strtol_l.constprop.0+0x56>
 800b746:	bf00      	nop
 800b748:	0800ccc5 	.word	0x0800ccc5

0800b74c <strtol>:
 800b74c:	4613      	mov	r3, r2
 800b74e:	460a      	mov	r2, r1
 800b750:	4601      	mov	r1, r0
 800b752:	4802      	ldr	r0, [pc, #8]	; (800b75c <strtol+0x10>)
 800b754:	6800      	ldr	r0, [r0, #0]
 800b756:	f7ff bf77 	b.w	800b648 <_strtol_l.constprop.0>
 800b75a:	bf00      	nop
 800b75c:	2000001c 	.word	0x2000001c

0800b760 <__ssputs_r>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	688e      	ldr	r6, [r1, #8]
 800b766:	429e      	cmp	r6, r3
 800b768:	4682      	mov	sl, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	4690      	mov	r8, r2
 800b76e:	461f      	mov	r7, r3
 800b770:	d838      	bhi.n	800b7e4 <__ssputs_r+0x84>
 800b772:	898a      	ldrh	r2, [r1, #12]
 800b774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b778:	d032      	beq.n	800b7e0 <__ssputs_r+0x80>
 800b77a:	6825      	ldr	r5, [r4, #0]
 800b77c:	6909      	ldr	r1, [r1, #16]
 800b77e:	eba5 0901 	sub.w	r9, r5, r1
 800b782:	6965      	ldr	r5, [r4, #20]
 800b784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b78c:	3301      	adds	r3, #1
 800b78e:	444b      	add	r3, r9
 800b790:	106d      	asrs	r5, r5, #1
 800b792:	429d      	cmp	r5, r3
 800b794:	bf38      	it	cc
 800b796:	461d      	movcc	r5, r3
 800b798:	0553      	lsls	r3, r2, #21
 800b79a:	d531      	bpl.n	800b800 <__ssputs_r+0xa0>
 800b79c:	4629      	mov	r1, r5
 800b79e:	f000 fb55 	bl	800be4c <_malloc_r>
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	b950      	cbnz	r0, 800b7bc <__ssputs_r+0x5c>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	f8ca 3000 	str.w	r3, [sl]
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7bc:	6921      	ldr	r1, [r4, #16]
 800b7be:	464a      	mov	r2, r9
 800b7c0:	f7ff ff0c 	bl	800b5dc <memcpy>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	6126      	str	r6, [r4, #16]
 800b7d2:	6165      	str	r5, [r4, #20]
 800b7d4:	444e      	add	r6, r9
 800b7d6:	eba5 0509 	sub.w	r5, r5, r9
 800b7da:	6026      	str	r6, [r4, #0]
 800b7dc:	60a5      	str	r5, [r4, #8]
 800b7de:	463e      	mov	r6, r7
 800b7e0:	42be      	cmp	r6, r7
 800b7e2:	d900      	bls.n	800b7e6 <__ssputs_r+0x86>
 800b7e4:	463e      	mov	r6, r7
 800b7e6:	6820      	ldr	r0, [r4, #0]
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	f000 faa8 	bl	800bd40 <memmove>
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	1b9b      	subs	r3, r3, r6
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	4433      	add	r3, r6
 800b7fa:	6023      	str	r3, [r4, #0]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e7db      	b.n	800b7b8 <__ssputs_r+0x58>
 800b800:	462a      	mov	r2, r5
 800b802:	f000 fb97 	bl	800bf34 <_realloc_r>
 800b806:	4606      	mov	r6, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d1e1      	bne.n	800b7d0 <__ssputs_r+0x70>
 800b80c:	6921      	ldr	r1, [r4, #16]
 800b80e:	4650      	mov	r0, sl
 800b810:	f000 fab0 	bl	800bd74 <_free_r>
 800b814:	e7c7      	b.n	800b7a6 <__ssputs_r+0x46>
	...

0800b818 <_svfiprintf_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	898b      	ldrh	r3, [r1, #12]
 800b820:	061b      	lsls	r3, r3, #24
 800b822:	b09d      	sub	sp, #116	; 0x74
 800b824:	4607      	mov	r7, r0
 800b826:	460d      	mov	r5, r1
 800b828:	4614      	mov	r4, r2
 800b82a:	d50e      	bpl.n	800b84a <_svfiprintf_r+0x32>
 800b82c:	690b      	ldr	r3, [r1, #16]
 800b82e:	b963      	cbnz	r3, 800b84a <_svfiprintf_r+0x32>
 800b830:	2140      	movs	r1, #64	; 0x40
 800b832:	f000 fb0b 	bl	800be4c <_malloc_r>
 800b836:	6028      	str	r0, [r5, #0]
 800b838:	6128      	str	r0, [r5, #16]
 800b83a:	b920      	cbnz	r0, 800b846 <_svfiprintf_r+0x2e>
 800b83c:	230c      	movs	r3, #12
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	e0d1      	b.n	800b9ea <_svfiprintf_r+0x1d2>
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	616b      	str	r3, [r5, #20]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9309      	str	r3, [sp, #36]	; 0x24
 800b84e:	2320      	movs	r3, #32
 800b850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b854:	f8cd 800c 	str.w	r8, [sp, #12]
 800b858:	2330      	movs	r3, #48	; 0x30
 800b85a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba04 <_svfiprintf_r+0x1ec>
 800b85e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b862:	f04f 0901 	mov.w	r9, #1
 800b866:	4623      	mov	r3, r4
 800b868:	469a      	mov	sl, r3
 800b86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86e:	b10a      	cbz	r2, 800b874 <_svfiprintf_r+0x5c>
 800b870:	2a25      	cmp	r2, #37	; 0x25
 800b872:	d1f9      	bne.n	800b868 <_svfiprintf_r+0x50>
 800b874:	ebba 0b04 	subs.w	fp, sl, r4
 800b878:	d00b      	beq.n	800b892 <_svfiprintf_r+0x7a>
 800b87a:	465b      	mov	r3, fp
 800b87c:	4622      	mov	r2, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ff6d 	bl	800b760 <__ssputs_r>
 800b886:	3001      	adds	r0, #1
 800b888:	f000 80aa 	beq.w	800b9e0 <_svfiprintf_r+0x1c8>
 800b88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b88e:	445a      	add	r2, fp
 800b890:	9209      	str	r2, [sp, #36]	; 0x24
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80a2 	beq.w	800b9e0 <_svfiprintf_r+0x1c8>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a6:	f10a 0a01 	add.w	sl, sl, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	9307      	str	r3, [sp, #28]
 800b8ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8b4:	4654      	mov	r4, sl
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	4851      	ldr	r0, [pc, #324]	; (800ba04 <_svfiprintf_r+0x1ec>)
 800b8be:	f7f4 fc97 	bl	80001f0 <memchr>
 800b8c2:	9a04      	ldr	r2, [sp, #16]
 800b8c4:	b9d8      	cbnz	r0, 800b8fe <_svfiprintf_r+0xe6>
 800b8c6:	06d0      	lsls	r0, r2, #27
 800b8c8:	bf44      	itt	mi
 800b8ca:	2320      	movmi	r3, #32
 800b8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8d0:	0711      	lsls	r1, r2, #28
 800b8d2:	bf44      	itt	mi
 800b8d4:	232b      	movmi	r3, #43	; 0x2b
 800b8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8da:	f89a 3000 	ldrb.w	r3, [sl]
 800b8de:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e0:	d015      	beq.n	800b90e <_svfiprintf_r+0xf6>
 800b8e2:	9a07      	ldr	r2, [sp, #28]
 800b8e4:	4654      	mov	r4, sl
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f04f 0c0a 	mov.w	ip, #10
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8f2:	3b30      	subs	r3, #48	; 0x30
 800b8f4:	2b09      	cmp	r3, #9
 800b8f6:	d94e      	bls.n	800b996 <_svfiprintf_r+0x17e>
 800b8f8:	b1b0      	cbz	r0, 800b928 <_svfiprintf_r+0x110>
 800b8fa:	9207      	str	r2, [sp, #28]
 800b8fc:	e014      	b.n	800b928 <_svfiprintf_r+0x110>
 800b8fe:	eba0 0308 	sub.w	r3, r0, r8
 800b902:	fa09 f303 	lsl.w	r3, r9, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	46a2      	mov	sl, r4
 800b90c:	e7d2      	b.n	800b8b4 <_svfiprintf_r+0x9c>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	1d19      	adds	r1, r3, #4
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfbb      	ittet	lt
 800b91a:	425b      	neglt	r3, r3
 800b91c:	f042 0202 	orrlt.w	r2, r2, #2
 800b920:	9307      	strge	r3, [sp, #28]
 800b922:	9307      	strlt	r3, [sp, #28]
 800b924:	bfb8      	it	lt
 800b926:	9204      	strlt	r2, [sp, #16]
 800b928:	7823      	ldrb	r3, [r4, #0]
 800b92a:	2b2e      	cmp	r3, #46	; 0x2e
 800b92c:	d10c      	bne.n	800b948 <_svfiprintf_r+0x130>
 800b92e:	7863      	ldrb	r3, [r4, #1]
 800b930:	2b2a      	cmp	r3, #42	; 0x2a
 800b932:	d135      	bne.n	800b9a0 <_svfiprintf_r+0x188>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	1d1a      	adds	r2, r3, #4
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	9203      	str	r2, [sp, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfb8      	it	lt
 800b940:	f04f 33ff 	movlt.w	r3, #4294967295
 800b944:	3402      	adds	r4, #2
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba14 <_svfiprintf_r+0x1fc>
 800b94c:	7821      	ldrb	r1, [r4, #0]
 800b94e:	2203      	movs	r2, #3
 800b950:	4650      	mov	r0, sl
 800b952:	f7f4 fc4d 	bl	80001f0 <memchr>
 800b956:	b140      	cbz	r0, 800b96a <_svfiprintf_r+0x152>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	eba0 000a 	sub.w	r0, r0, sl
 800b95e:	fa03 f000 	lsl.w	r0, r3, r0
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	4303      	orrs	r3, r0
 800b966:	3401      	adds	r4, #1
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96e:	4826      	ldr	r0, [pc, #152]	; (800ba08 <_svfiprintf_r+0x1f0>)
 800b970:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b974:	2206      	movs	r2, #6
 800b976:	f7f4 fc3b 	bl	80001f0 <memchr>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d038      	beq.n	800b9f0 <_svfiprintf_r+0x1d8>
 800b97e:	4b23      	ldr	r3, [pc, #140]	; (800ba0c <_svfiprintf_r+0x1f4>)
 800b980:	bb1b      	cbnz	r3, 800b9ca <_svfiprintf_r+0x1b2>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	3307      	adds	r3, #7
 800b986:	f023 0307 	bic.w	r3, r3, #7
 800b98a:	3308      	adds	r3, #8
 800b98c:	9303      	str	r3, [sp, #12]
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	4433      	add	r3, r6
 800b992:	9309      	str	r3, [sp, #36]	; 0x24
 800b994:	e767      	b.n	800b866 <_svfiprintf_r+0x4e>
 800b996:	fb0c 3202 	mla	r2, ip, r2, r3
 800b99a:	460c      	mov	r4, r1
 800b99c:	2001      	movs	r0, #1
 800b99e:	e7a5      	b.n	800b8ec <_svfiprintf_r+0xd4>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	3401      	adds	r4, #1
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	f04f 0c0a 	mov.w	ip, #10
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9b2:	3a30      	subs	r2, #48	; 0x30
 800b9b4:	2a09      	cmp	r2, #9
 800b9b6:	d903      	bls.n	800b9c0 <_svfiprintf_r+0x1a8>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0c5      	beq.n	800b948 <_svfiprintf_r+0x130>
 800b9bc:	9105      	str	r1, [sp, #20]
 800b9be:	e7c3      	b.n	800b948 <_svfiprintf_r+0x130>
 800b9c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e7f0      	b.n	800b9ac <_svfiprintf_r+0x194>
 800b9ca:	ab03      	add	r3, sp, #12
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	462a      	mov	r2, r5
 800b9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <_svfiprintf_r+0x1f8>)
 800b9d2:	a904      	add	r1, sp, #16
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f3af 8000 	nop.w
 800b9da:	1c42      	adds	r2, r0, #1
 800b9dc:	4606      	mov	r6, r0
 800b9de:	d1d6      	bne.n	800b98e <_svfiprintf_r+0x176>
 800b9e0:	89ab      	ldrh	r3, [r5, #12]
 800b9e2:	065b      	lsls	r3, r3, #25
 800b9e4:	f53f af2c 	bmi.w	800b840 <_svfiprintf_r+0x28>
 800b9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ea:	b01d      	add	sp, #116	; 0x74
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	ab03      	add	r3, sp, #12
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4b06      	ldr	r3, [pc, #24]	; (800ba10 <_svfiprintf_r+0x1f8>)
 800b9f8:	a904      	add	r1, sp, #16
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	f000 f87a 	bl	800baf4 <_printf_i>
 800ba00:	e7eb      	b.n	800b9da <_svfiprintf_r+0x1c2>
 800ba02:	bf00      	nop
 800ba04:	0800cdc5 	.word	0x0800cdc5
 800ba08:	0800cdcf 	.word	0x0800cdcf
 800ba0c:	00000000 	.word	0x00000000
 800ba10:	0800b761 	.word	0x0800b761
 800ba14:	0800cdcb 	.word	0x0800cdcb

0800ba18 <_printf_common>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	4699      	mov	r9, r3
 800ba20:	688a      	ldr	r2, [r1, #8]
 800ba22:	690b      	ldr	r3, [r1, #16]
 800ba24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	bfb8      	it	lt
 800ba2c:	4613      	movlt	r3, r2
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba34:	4607      	mov	r7, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	b10a      	cbz	r2, 800ba3e <_printf_common+0x26>
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	0699      	lsls	r1, r3, #26
 800ba42:	bf42      	ittt	mi
 800ba44:	6833      	ldrmi	r3, [r6, #0]
 800ba46:	3302      	addmi	r3, #2
 800ba48:	6033      	strmi	r3, [r6, #0]
 800ba4a:	6825      	ldr	r5, [r4, #0]
 800ba4c:	f015 0506 	ands.w	r5, r5, #6
 800ba50:	d106      	bne.n	800ba60 <_printf_common+0x48>
 800ba52:	f104 0a19 	add.w	sl, r4, #25
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	6832      	ldr	r2, [r6, #0]
 800ba5a:	1a9b      	subs	r3, r3, r2
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	dc26      	bgt.n	800baae <_printf_common+0x96>
 800ba60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba64:	1e13      	subs	r3, r2, #0
 800ba66:	6822      	ldr	r2, [r4, #0]
 800ba68:	bf18      	it	ne
 800ba6a:	2301      	movne	r3, #1
 800ba6c:	0692      	lsls	r2, r2, #26
 800ba6e:	d42b      	bmi.n	800bac8 <_printf_common+0xb0>
 800ba70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba74:	4649      	mov	r1, r9
 800ba76:	4638      	mov	r0, r7
 800ba78:	47c0      	blx	r8
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d01e      	beq.n	800babc <_printf_common+0xa4>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	68e5      	ldr	r5, [r4, #12]
 800ba82:	6832      	ldr	r2, [r6, #0]
 800ba84:	f003 0306 	and.w	r3, r3, #6
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	bf08      	it	eq
 800ba8c:	1aad      	subeq	r5, r5, r2
 800ba8e:	68a3      	ldr	r3, [r4, #8]
 800ba90:	6922      	ldr	r2, [r4, #16]
 800ba92:	bf0c      	ite	eq
 800ba94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba98:	2500      	movne	r5, #0
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	bfc4      	itt	gt
 800ba9e:	1a9b      	subgt	r3, r3, r2
 800baa0:	18ed      	addgt	r5, r5, r3
 800baa2:	2600      	movs	r6, #0
 800baa4:	341a      	adds	r4, #26
 800baa6:	42b5      	cmp	r5, r6
 800baa8:	d11a      	bne.n	800bae0 <_printf_common+0xc8>
 800baaa:	2000      	movs	r0, #0
 800baac:	e008      	b.n	800bac0 <_printf_common+0xa8>
 800baae:	2301      	movs	r3, #1
 800bab0:	4652      	mov	r2, sl
 800bab2:	4649      	mov	r1, r9
 800bab4:	4638      	mov	r0, r7
 800bab6:	47c0      	blx	r8
 800bab8:	3001      	adds	r0, #1
 800baba:	d103      	bne.n	800bac4 <_printf_common+0xac>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac4:	3501      	adds	r5, #1
 800bac6:	e7c6      	b.n	800ba56 <_printf_common+0x3e>
 800bac8:	18e1      	adds	r1, r4, r3
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	2030      	movs	r0, #48	; 0x30
 800bace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bad2:	4422      	add	r2, r4
 800bad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800badc:	3302      	adds	r3, #2
 800bade:	e7c7      	b.n	800ba70 <_printf_common+0x58>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4622      	mov	r2, r4
 800bae4:	4649      	mov	r1, r9
 800bae6:	4638      	mov	r0, r7
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d0e6      	beq.n	800babc <_printf_common+0xa4>
 800baee:	3601      	adds	r6, #1
 800baf0:	e7d9      	b.n	800baa6 <_printf_common+0x8e>
	...

0800baf4 <_printf_i>:
 800baf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	7e0f      	ldrb	r7, [r1, #24]
 800bafa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bafc:	2f78      	cmp	r7, #120	; 0x78
 800bafe:	4691      	mov	r9, r2
 800bb00:	4680      	mov	r8, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	469a      	mov	sl, r3
 800bb06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb0a:	d807      	bhi.n	800bb1c <_printf_i+0x28>
 800bb0c:	2f62      	cmp	r7, #98	; 0x62
 800bb0e:	d80a      	bhi.n	800bb26 <_printf_i+0x32>
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	f000 80d8 	beq.w	800bcc6 <_printf_i+0x1d2>
 800bb16:	2f58      	cmp	r7, #88	; 0x58
 800bb18:	f000 80a3 	beq.w	800bc62 <_printf_i+0x16e>
 800bb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb24:	e03a      	b.n	800bb9c <_printf_i+0xa8>
 800bb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb2a:	2b15      	cmp	r3, #21
 800bb2c:	d8f6      	bhi.n	800bb1c <_printf_i+0x28>
 800bb2e:	a101      	add	r1, pc, #4	; (adr r1, 800bb34 <_printf_i+0x40>)
 800bb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb34:	0800bb8d 	.word	0x0800bb8d
 800bb38:	0800bba1 	.word	0x0800bba1
 800bb3c:	0800bb1d 	.word	0x0800bb1d
 800bb40:	0800bb1d 	.word	0x0800bb1d
 800bb44:	0800bb1d 	.word	0x0800bb1d
 800bb48:	0800bb1d 	.word	0x0800bb1d
 800bb4c:	0800bba1 	.word	0x0800bba1
 800bb50:	0800bb1d 	.word	0x0800bb1d
 800bb54:	0800bb1d 	.word	0x0800bb1d
 800bb58:	0800bb1d 	.word	0x0800bb1d
 800bb5c:	0800bb1d 	.word	0x0800bb1d
 800bb60:	0800bcad 	.word	0x0800bcad
 800bb64:	0800bbd1 	.word	0x0800bbd1
 800bb68:	0800bc8f 	.word	0x0800bc8f
 800bb6c:	0800bb1d 	.word	0x0800bb1d
 800bb70:	0800bb1d 	.word	0x0800bb1d
 800bb74:	0800bccf 	.word	0x0800bccf
 800bb78:	0800bb1d 	.word	0x0800bb1d
 800bb7c:	0800bbd1 	.word	0x0800bbd1
 800bb80:	0800bb1d 	.word	0x0800bb1d
 800bb84:	0800bb1d 	.word	0x0800bb1d
 800bb88:	0800bc97 	.word	0x0800bc97
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	1d1a      	adds	r2, r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	602a      	str	r2, [r5, #0]
 800bb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e0a3      	b.n	800bce8 <_printf_i+0x1f4>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	6829      	ldr	r1, [r5, #0]
 800bba4:	0606      	lsls	r6, r0, #24
 800bba6:	f101 0304 	add.w	r3, r1, #4
 800bbaa:	d50a      	bpl.n	800bbc2 <_printf_i+0xce>
 800bbac:	680e      	ldr	r6, [r1, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	da03      	bge.n	800bbbc <_printf_i+0xc8>
 800bbb4:	232d      	movs	r3, #45	; 0x2d
 800bbb6:	4276      	negs	r6, r6
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbc:	485e      	ldr	r0, [pc, #376]	; (800bd38 <_printf_i+0x244>)
 800bbbe:	230a      	movs	r3, #10
 800bbc0:	e019      	b.n	800bbf6 <_printf_i+0x102>
 800bbc2:	680e      	ldr	r6, [r1, #0]
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbca:	bf18      	it	ne
 800bbcc:	b236      	sxthne	r6, r6
 800bbce:	e7ef      	b.n	800bbb0 <_printf_i+0xbc>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6029      	str	r1, [r5, #0]
 800bbd8:	0601      	lsls	r1, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xec>
 800bbdc:	681e      	ldr	r6, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <_printf_i+0xf2>
 800bbe0:	0646      	lsls	r6, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xe8>
 800bbe4:	881e      	ldrh	r6, [r3, #0]
 800bbe6:	4854      	ldr	r0, [pc, #336]	; (800bd38 <_printf_i+0x244>)
 800bbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbea:	bf0c      	ite	eq
 800bbec:	2308      	moveq	r3, #8
 800bbee:	230a      	movne	r3, #10
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbf6:	6865      	ldr	r5, [r4, #4]
 800bbf8:	60a5      	str	r5, [r4, #8]
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	bfa2      	ittt	ge
 800bbfe:	6821      	ldrge	r1, [r4, #0]
 800bc00:	f021 0104 	bicge.w	r1, r1, #4
 800bc04:	6021      	strge	r1, [r4, #0]
 800bc06:	b90e      	cbnz	r6, 800bc0c <_printf_i+0x118>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d04d      	beq.n	800bca8 <_printf_i+0x1b4>
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc12:	fb03 6711 	mls	r7, r3, r1, r6
 800bc16:	5dc7      	ldrb	r7, [r0, r7]
 800bc18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc1c:	4637      	mov	r7, r6
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	460e      	mov	r6, r1
 800bc22:	d9f4      	bls.n	800bc0e <_printf_i+0x11a>
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d10b      	bne.n	800bc40 <_printf_i+0x14c>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	07de      	lsls	r6, r3, #31
 800bc2c:	d508      	bpl.n	800bc40 <_printf_i+0x14c>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	6861      	ldr	r1, [r4, #4]
 800bc32:	4299      	cmp	r1, r3
 800bc34:	bfde      	ittt	le
 800bc36:	2330      	movle	r3, #48	; 0x30
 800bc38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc40:	1b52      	subs	r2, r2, r5
 800bc42:	6122      	str	r2, [r4, #16]
 800bc44:	f8cd a000 	str.w	sl, [sp]
 800bc48:	464b      	mov	r3, r9
 800bc4a:	aa03      	add	r2, sp, #12
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7ff fee2 	bl	800ba18 <_printf_common>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d14c      	bne.n	800bcf2 <_printf_i+0x1fe>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	b004      	add	sp, #16
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	4835      	ldr	r0, [pc, #212]	; (800bd38 <_printf_i+0x244>)
 800bc64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc68:	6829      	ldr	r1, [r5, #0]
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc70:	6029      	str	r1, [r5, #0]
 800bc72:	061d      	lsls	r5, r3, #24
 800bc74:	d514      	bpl.n	800bca0 <_printf_i+0x1ac>
 800bc76:	07df      	lsls	r7, r3, #31
 800bc78:	bf44      	itt	mi
 800bc7a:	f043 0320 	orrmi.w	r3, r3, #32
 800bc7e:	6023      	strmi	r3, [r4, #0]
 800bc80:	b91e      	cbnz	r6, 800bc8a <_printf_i+0x196>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	f023 0320 	bic.w	r3, r3, #32
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	2310      	movs	r3, #16
 800bc8c:	e7b0      	b.n	800bbf0 <_printf_i+0xfc>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f043 0320 	orr.w	r3, r3, #32
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2378      	movs	r3, #120	; 0x78
 800bc98:	4828      	ldr	r0, [pc, #160]	; (800bd3c <_printf_i+0x248>)
 800bc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc9e:	e7e3      	b.n	800bc68 <_printf_i+0x174>
 800bca0:	0659      	lsls	r1, r3, #25
 800bca2:	bf48      	it	mi
 800bca4:	b2b6      	uxthmi	r6, r6
 800bca6:	e7e6      	b.n	800bc76 <_printf_i+0x182>
 800bca8:	4615      	mov	r5, r2
 800bcaa:	e7bb      	b.n	800bc24 <_printf_i+0x130>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	6826      	ldr	r6, [r4, #0]
 800bcb0:	6961      	ldr	r1, [r4, #20]
 800bcb2:	1d18      	adds	r0, r3, #4
 800bcb4:	6028      	str	r0, [r5, #0]
 800bcb6:	0635      	lsls	r5, r6, #24
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0x1cc>
 800bcbc:	6019      	str	r1, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <_printf_i+0x1d2>
 800bcc0:	0670      	lsls	r0, r6, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0x1c8>
 800bcc4:	8019      	strh	r1, [r3, #0]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	4615      	mov	r5, r2
 800bccc:	e7ba      	b.n	800bc44 <_printf_i+0x150>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	6862      	ldr	r2, [r4, #4]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7f4 fa88 	bl	80001f0 <memchr>
 800bce0:	b108      	cbz	r0, 800bce6 <_printf_i+0x1f2>
 800bce2:	1b40      	subs	r0, r0, r5
 800bce4:	6060      	str	r0, [r4, #4]
 800bce6:	6863      	ldr	r3, [r4, #4]
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	2300      	movs	r3, #0
 800bcec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf0:	e7a8      	b.n	800bc44 <_printf_i+0x150>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	462a      	mov	r2, r5
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	47d0      	blx	sl
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d0ab      	beq.n	800bc58 <_printf_i+0x164>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	079b      	lsls	r3, r3, #30
 800bd04:	d413      	bmi.n	800bd2e <_printf_i+0x23a>
 800bd06:	68e0      	ldr	r0, [r4, #12]
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	bfb8      	it	lt
 800bd0e:	4618      	movlt	r0, r3
 800bd10:	e7a4      	b.n	800bc5c <_printf_i+0x168>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4632      	mov	r2, r6
 800bd16:	4649      	mov	r1, r9
 800bd18:	4640      	mov	r0, r8
 800bd1a:	47d0      	blx	sl
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d09b      	beq.n	800bc58 <_printf_i+0x164>
 800bd20:	3501      	adds	r5, #1
 800bd22:	68e3      	ldr	r3, [r4, #12]
 800bd24:	9903      	ldr	r1, [sp, #12]
 800bd26:	1a5b      	subs	r3, r3, r1
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	dcf2      	bgt.n	800bd12 <_printf_i+0x21e>
 800bd2c:	e7eb      	b.n	800bd06 <_printf_i+0x212>
 800bd2e:	2500      	movs	r5, #0
 800bd30:	f104 0619 	add.w	r6, r4, #25
 800bd34:	e7f5      	b.n	800bd22 <_printf_i+0x22e>
 800bd36:	bf00      	nop
 800bd38:	0800cdd6 	.word	0x0800cdd6
 800bd3c:	0800cde7 	.word	0x0800cde7

0800bd40 <memmove>:
 800bd40:	4288      	cmp	r0, r1
 800bd42:	b510      	push	{r4, lr}
 800bd44:	eb01 0402 	add.w	r4, r1, r2
 800bd48:	d902      	bls.n	800bd50 <memmove+0x10>
 800bd4a:	4284      	cmp	r4, r0
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	d807      	bhi.n	800bd60 <memmove+0x20>
 800bd50:	1e43      	subs	r3, r0, #1
 800bd52:	42a1      	cmp	r1, r4
 800bd54:	d008      	beq.n	800bd68 <memmove+0x28>
 800bd56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd5e:	e7f8      	b.n	800bd52 <memmove+0x12>
 800bd60:	4402      	add	r2, r0
 800bd62:	4601      	mov	r1, r0
 800bd64:	428a      	cmp	r2, r1
 800bd66:	d100      	bne.n	800bd6a <memmove+0x2a>
 800bd68:	bd10      	pop	{r4, pc}
 800bd6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd72:	e7f7      	b.n	800bd64 <memmove+0x24>

0800bd74 <_free_r>:
 800bd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd76:	2900      	cmp	r1, #0
 800bd78:	d044      	beq.n	800be04 <_free_r+0x90>
 800bd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7e:	9001      	str	r0, [sp, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f1a1 0404 	sub.w	r4, r1, #4
 800bd86:	bfb8      	it	lt
 800bd88:	18e4      	addlt	r4, r4, r3
 800bd8a:	f000 f913 	bl	800bfb4 <__malloc_lock>
 800bd8e:	4a1e      	ldr	r2, [pc, #120]	; (800be08 <_free_r+0x94>)
 800bd90:	9801      	ldr	r0, [sp, #4]
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	b933      	cbnz	r3, 800bda4 <_free_r+0x30>
 800bd96:	6063      	str	r3, [r4, #4]
 800bd98:	6014      	str	r4, [r2, #0]
 800bd9a:	b003      	add	sp, #12
 800bd9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bda0:	f000 b90e 	b.w	800bfc0 <__malloc_unlock>
 800bda4:	42a3      	cmp	r3, r4
 800bda6:	d908      	bls.n	800bdba <_free_r+0x46>
 800bda8:	6825      	ldr	r5, [r4, #0]
 800bdaa:	1961      	adds	r1, r4, r5
 800bdac:	428b      	cmp	r3, r1
 800bdae:	bf01      	itttt	eq
 800bdb0:	6819      	ldreq	r1, [r3, #0]
 800bdb2:	685b      	ldreq	r3, [r3, #4]
 800bdb4:	1949      	addeq	r1, r1, r5
 800bdb6:	6021      	streq	r1, [r4, #0]
 800bdb8:	e7ed      	b.n	800bd96 <_free_r+0x22>
 800bdba:	461a      	mov	r2, r3
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	b10b      	cbz	r3, 800bdc4 <_free_r+0x50>
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	d9fa      	bls.n	800bdba <_free_r+0x46>
 800bdc4:	6811      	ldr	r1, [r2, #0]
 800bdc6:	1855      	adds	r5, r2, r1
 800bdc8:	42a5      	cmp	r5, r4
 800bdca:	d10b      	bne.n	800bde4 <_free_r+0x70>
 800bdcc:	6824      	ldr	r4, [r4, #0]
 800bdce:	4421      	add	r1, r4
 800bdd0:	1854      	adds	r4, r2, r1
 800bdd2:	42a3      	cmp	r3, r4
 800bdd4:	6011      	str	r1, [r2, #0]
 800bdd6:	d1e0      	bne.n	800bd9a <_free_r+0x26>
 800bdd8:	681c      	ldr	r4, [r3, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	6053      	str	r3, [r2, #4]
 800bdde:	4421      	add	r1, r4
 800bde0:	6011      	str	r1, [r2, #0]
 800bde2:	e7da      	b.n	800bd9a <_free_r+0x26>
 800bde4:	d902      	bls.n	800bdec <_free_r+0x78>
 800bde6:	230c      	movs	r3, #12
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	e7d6      	b.n	800bd9a <_free_r+0x26>
 800bdec:	6825      	ldr	r5, [r4, #0]
 800bdee:	1961      	adds	r1, r4, r5
 800bdf0:	428b      	cmp	r3, r1
 800bdf2:	bf04      	itt	eq
 800bdf4:	6819      	ldreq	r1, [r3, #0]
 800bdf6:	685b      	ldreq	r3, [r3, #4]
 800bdf8:	6063      	str	r3, [r4, #4]
 800bdfa:	bf04      	itt	eq
 800bdfc:	1949      	addeq	r1, r1, r5
 800bdfe:	6021      	streq	r1, [r4, #0]
 800be00:	6054      	str	r4, [r2, #4]
 800be02:	e7ca      	b.n	800bd9a <_free_r+0x26>
 800be04:	b003      	add	sp, #12
 800be06:	bd30      	pop	{r4, r5, pc}
 800be08:	20008820 	.word	0x20008820

0800be0c <sbrk_aligned>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	4e0e      	ldr	r6, [pc, #56]	; (800be48 <sbrk_aligned+0x3c>)
 800be10:	460c      	mov	r4, r1
 800be12:	6831      	ldr	r1, [r6, #0]
 800be14:	4605      	mov	r5, r0
 800be16:	b911      	cbnz	r1, 800be1e <sbrk_aligned+0x12>
 800be18:	f000 f8bc 	bl	800bf94 <_sbrk_r>
 800be1c:	6030      	str	r0, [r6, #0]
 800be1e:	4621      	mov	r1, r4
 800be20:	4628      	mov	r0, r5
 800be22:	f000 f8b7 	bl	800bf94 <_sbrk_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d00a      	beq.n	800be40 <sbrk_aligned+0x34>
 800be2a:	1cc4      	adds	r4, r0, #3
 800be2c:	f024 0403 	bic.w	r4, r4, #3
 800be30:	42a0      	cmp	r0, r4
 800be32:	d007      	beq.n	800be44 <sbrk_aligned+0x38>
 800be34:	1a21      	subs	r1, r4, r0
 800be36:	4628      	mov	r0, r5
 800be38:	f000 f8ac 	bl	800bf94 <_sbrk_r>
 800be3c:	3001      	adds	r0, #1
 800be3e:	d101      	bne.n	800be44 <sbrk_aligned+0x38>
 800be40:	f04f 34ff 	mov.w	r4, #4294967295
 800be44:	4620      	mov	r0, r4
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	20008824 	.word	0x20008824

0800be4c <_malloc_r>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	1ccd      	adds	r5, r1, #3
 800be52:	f025 0503 	bic.w	r5, r5, #3
 800be56:	3508      	adds	r5, #8
 800be58:	2d0c      	cmp	r5, #12
 800be5a:	bf38      	it	cc
 800be5c:	250c      	movcc	r5, #12
 800be5e:	2d00      	cmp	r5, #0
 800be60:	4607      	mov	r7, r0
 800be62:	db01      	blt.n	800be68 <_malloc_r+0x1c>
 800be64:	42a9      	cmp	r1, r5
 800be66:	d905      	bls.n	800be74 <_malloc_r+0x28>
 800be68:	230c      	movs	r3, #12
 800be6a:	603b      	str	r3, [r7, #0]
 800be6c:	2600      	movs	r6, #0
 800be6e:	4630      	mov	r0, r6
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	4e2e      	ldr	r6, [pc, #184]	; (800bf30 <_malloc_r+0xe4>)
 800be76:	f000 f89d 	bl	800bfb4 <__malloc_lock>
 800be7a:	6833      	ldr	r3, [r6, #0]
 800be7c:	461c      	mov	r4, r3
 800be7e:	bb34      	cbnz	r4, 800bece <_malloc_r+0x82>
 800be80:	4629      	mov	r1, r5
 800be82:	4638      	mov	r0, r7
 800be84:	f7ff ffc2 	bl	800be0c <sbrk_aligned>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	4604      	mov	r4, r0
 800be8c:	d14d      	bne.n	800bf2a <_malloc_r+0xde>
 800be8e:	6834      	ldr	r4, [r6, #0]
 800be90:	4626      	mov	r6, r4
 800be92:	2e00      	cmp	r6, #0
 800be94:	d140      	bne.n	800bf18 <_malloc_r+0xcc>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	4631      	mov	r1, r6
 800be9a:	4638      	mov	r0, r7
 800be9c:	eb04 0803 	add.w	r8, r4, r3
 800bea0:	f000 f878 	bl	800bf94 <_sbrk_r>
 800bea4:	4580      	cmp	r8, r0
 800bea6:	d13a      	bne.n	800bf1e <_malloc_r+0xd2>
 800bea8:	6821      	ldr	r1, [r4, #0]
 800beaa:	3503      	adds	r5, #3
 800beac:	1a6d      	subs	r5, r5, r1
 800beae:	f025 0503 	bic.w	r5, r5, #3
 800beb2:	3508      	adds	r5, #8
 800beb4:	2d0c      	cmp	r5, #12
 800beb6:	bf38      	it	cc
 800beb8:	250c      	movcc	r5, #12
 800beba:	4629      	mov	r1, r5
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff ffa5 	bl	800be0c <sbrk_aligned>
 800bec2:	3001      	adds	r0, #1
 800bec4:	d02b      	beq.n	800bf1e <_malloc_r+0xd2>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	442b      	add	r3, r5
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	e00e      	b.n	800beec <_malloc_r+0xa0>
 800bece:	6822      	ldr	r2, [r4, #0]
 800bed0:	1b52      	subs	r2, r2, r5
 800bed2:	d41e      	bmi.n	800bf12 <_malloc_r+0xc6>
 800bed4:	2a0b      	cmp	r2, #11
 800bed6:	d916      	bls.n	800bf06 <_malloc_r+0xba>
 800bed8:	1961      	adds	r1, r4, r5
 800beda:	42a3      	cmp	r3, r4
 800bedc:	6025      	str	r5, [r4, #0]
 800bede:	bf18      	it	ne
 800bee0:	6059      	strne	r1, [r3, #4]
 800bee2:	6863      	ldr	r3, [r4, #4]
 800bee4:	bf08      	it	eq
 800bee6:	6031      	streq	r1, [r6, #0]
 800bee8:	5162      	str	r2, [r4, r5]
 800beea:	604b      	str	r3, [r1, #4]
 800beec:	4638      	mov	r0, r7
 800beee:	f104 060b 	add.w	r6, r4, #11
 800bef2:	f000 f865 	bl	800bfc0 <__malloc_unlock>
 800bef6:	f026 0607 	bic.w	r6, r6, #7
 800befa:	1d23      	adds	r3, r4, #4
 800befc:	1af2      	subs	r2, r6, r3
 800befe:	d0b6      	beq.n	800be6e <_malloc_r+0x22>
 800bf00:	1b9b      	subs	r3, r3, r6
 800bf02:	50a3      	str	r3, [r4, r2]
 800bf04:	e7b3      	b.n	800be6e <_malloc_r+0x22>
 800bf06:	6862      	ldr	r2, [r4, #4]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	bf0c      	ite	eq
 800bf0c:	6032      	streq	r2, [r6, #0]
 800bf0e:	605a      	strne	r2, [r3, #4]
 800bf10:	e7ec      	b.n	800beec <_malloc_r+0xa0>
 800bf12:	4623      	mov	r3, r4
 800bf14:	6864      	ldr	r4, [r4, #4]
 800bf16:	e7b2      	b.n	800be7e <_malloc_r+0x32>
 800bf18:	4634      	mov	r4, r6
 800bf1a:	6876      	ldr	r6, [r6, #4]
 800bf1c:	e7b9      	b.n	800be92 <_malloc_r+0x46>
 800bf1e:	230c      	movs	r3, #12
 800bf20:	603b      	str	r3, [r7, #0]
 800bf22:	4638      	mov	r0, r7
 800bf24:	f000 f84c 	bl	800bfc0 <__malloc_unlock>
 800bf28:	e7a1      	b.n	800be6e <_malloc_r+0x22>
 800bf2a:	6025      	str	r5, [r4, #0]
 800bf2c:	e7de      	b.n	800beec <_malloc_r+0xa0>
 800bf2e:	bf00      	nop
 800bf30:	20008820 	.word	0x20008820

0800bf34 <_realloc_r>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	4680      	mov	r8, r0
 800bf3a:	4614      	mov	r4, r2
 800bf3c:	460e      	mov	r6, r1
 800bf3e:	b921      	cbnz	r1, 800bf4a <_realloc_r+0x16>
 800bf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	4611      	mov	r1, r2
 800bf46:	f7ff bf81 	b.w	800be4c <_malloc_r>
 800bf4a:	b92a      	cbnz	r2, 800bf58 <_realloc_r+0x24>
 800bf4c:	f7ff ff12 	bl	800bd74 <_free_r>
 800bf50:	4625      	mov	r5, r4
 800bf52:	4628      	mov	r0, r5
 800bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf58:	f000 f838 	bl	800bfcc <_malloc_usable_size_r>
 800bf5c:	4284      	cmp	r4, r0
 800bf5e:	4607      	mov	r7, r0
 800bf60:	d802      	bhi.n	800bf68 <_realloc_r+0x34>
 800bf62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf66:	d812      	bhi.n	800bf8e <_realloc_r+0x5a>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	f7ff ff6e 	bl	800be4c <_malloc_r>
 800bf70:	4605      	mov	r5, r0
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0ed      	beq.n	800bf52 <_realloc_r+0x1e>
 800bf76:	42bc      	cmp	r4, r7
 800bf78:	4622      	mov	r2, r4
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	bf28      	it	cs
 800bf7e:	463a      	movcs	r2, r7
 800bf80:	f7ff fb2c 	bl	800b5dc <memcpy>
 800bf84:	4631      	mov	r1, r6
 800bf86:	4640      	mov	r0, r8
 800bf88:	f7ff fef4 	bl	800bd74 <_free_r>
 800bf8c:	e7e1      	b.n	800bf52 <_realloc_r+0x1e>
 800bf8e:	4635      	mov	r5, r6
 800bf90:	e7df      	b.n	800bf52 <_realloc_r+0x1e>
	...

0800bf94 <_sbrk_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d06      	ldr	r5, [pc, #24]	; (800bfb0 <_sbrk_r+0x1c>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f8 f896 	bl	80040d0 <_sbrk>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_sbrk_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_sbrk_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	20008828 	.word	0x20008828

0800bfb4 <__malloc_lock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__malloc_lock+0x8>)
 800bfb6:	f000 b811 	b.w	800bfdc <__retarget_lock_acquire_recursive>
 800bfba:	bf00      	nop
 800bfbc:	2000882c 	.word	0x2000882c

0800bfc0 <__malloc_unlock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__malloc_unlock+0x8>)
 800bfc2:	f000 b80c 	b.w	800bfde <__retarget_lock_release_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	2000882c 	.word	0x2000882c

0800bfcc <_malloc_usable_size_r>:
 800bfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd0:	1f18      	subs	r0, r3, #4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfbc      	itt	lt
 800bfd6:	580b      	ldrlt	r3, [r1, r0]
 800bfd8:	18c0      	addlt	r0, r0, r3
 800bfda:	4770      	bx	lr

0800bfdc <__retarget_lock_acquire_recursive>:
 800bfdc:	4770      	bx	lr

0800bfde <__retarget_lock_release_recursive>:
 800bfde:	4770      	bx	lr

0800bfe0 <_init>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	bf00      	nop
 800bfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe6:	bc08      	pop	{r3}
 800bfe8:	469e      	mov	lr, r3
 800bfea:	4770      	bx	lr

0800bfec <_fini>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	bf00      	nop
 800bff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff2:	bc08      	pop	{r3}
 800bff4:	469e      	mov	lr, r3
 800bff6:	4770      	bx	lr
